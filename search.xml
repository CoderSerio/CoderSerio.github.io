<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AHook学习【更新中】</title>
      <link href="/2023/06/12/ahook/"/>
      <url>/2023/06/12/ahook/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文将介绍开源库<code>ahook</code>中部分常用的API的底层实现原理。</p><p>介绍的方式是，提出应用场景和用法作为<strong>需求</strong>，然后希望读者先思考如何实现，再看源码验证答案。</p><p>另外，<strong>为了代码更加直观易懂，会尽可能省略不必要的TS等内容</strong>。</p><h3 id="多余的话"><a href="#多余的话" class="headerlink" title="多余的话"></a>多余的话</h3><p>很久没有写技术博客了。</p><p>据上一次写技术笔记，已经过去了将近一年了，这一年里，我获得了前所未有的成长，见到了不可思议的技术，还有超凡入圣的技术大师。</p><p>我的经历大概是这样的，说实话做到这一步我感觉非常满意了，真的，对我而言非常不容易：</p><blockquote><p>LEC团队 (2020.10-2022.4)<br>教授的硬件设备公司 (2022.4-2022.5)<br>字节跳动-互娱研发(抖音) (2022.6-2022.10)<br>字节跳动-懂车帝 (2023.1-2023.5)<br>阿里巴巴-淘天集团 (2023.6-至今)</p></blockquote><p>但就算如此，我也总是在耳畔听到一个声音：</p><blockquote><p>“就这样而已吗？”</p></blockquote><p>我想要成为JS Master，我不想止步于此，总有一天——十年也好，二十年也好，我一定要实现我的梦想。</p><p>综合业务实用性和技术成长性两个方面考虑，我决定从React的Hook封装开始深挖，通过学习AHook这个前人铸造的丰碑获得成长。</p><h3 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h3><p>感谢阿里巴巴的开源库<code>ahook</code>: <a href="https://github.com/alibaba/hooks%E3%80%82">https://github.com/alibaba/hooks。</a></p><p>这一年非常感谢心圆、洋仔、鸡哥等开源大佬对我在技术上的激励。</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>我们从状态相关的库开始学习。</p><h3 id="useLatest"><a href="#useLatest" class="headerlink" title="useLatest"></a>useLatest</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>总是返回当前最新值的 Hook！可以避免闭包问题！</p></blockquote><p>还是不太清楚具体是干什么的？那来看看下面这个场景：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>cnt<span class="token punctuation">,</span> setCnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setCnt</span><span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">cnt: </span><span class="token punctuation">{</span>cnt<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里渲染的<code>cnt</code>最终会卡在1。</p><blockquote><p>我个人的理解是函数组件内的定时器把回调递出去挂到了计时线程上，内存泄漏形成了闭包，这时候的<code>cnt</code>还是0——由于只有首次渲染的时候才会设置定时器，所以之后每次触发都是获取到值为0的<code>cnt</code>，也就导致渲染的结果卡在1。</p></blockquote><p>这时，我们就可以使用<code>useLatest</code>。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h3 id="useToggle"><a href="#useToggle" class="headerlink" title="useToggle"></a>useToggle</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>实现一个用于在两个状态值间切换的 Hook！</p></blockquote><p>乍一听非常简单，但是需要注意，这可没说一定是布尔值。</p><p>让我们先给出一些基本的代码这样更容易理解我们要做些什么：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment">// 注意，两个参数都是可选的</span><span class="token keyword">interface</span> <span class="token class-name">UseToggleProps</span> <span class="token punctuation">{</span> leftValue<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span> rightValue<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">useToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">leftValue<span class="token punctuation">,</span> rightValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>     <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// ... TODO: 在这里补全代码</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            set<span class="token punctuation">,</span>   <span class="token comment">// 设置 state</span>            toggle<span class="token punctuation">,</span><span class="token comment">// 反转 state</span>            setLeft<span class="token punctuation">,</span> <span class="token comment">// 设置state为 leftValue</span>            setRight<span class="token punctuation">,</span><span class="token comment">// 设置state为 rightValue ?? !leftValue</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>也就是实现四个函数， 让我们从简单的开始由上往下进行实现：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">useToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">leftValue<span class="token punctuation">,</span> rightValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>     <span class="token keyword">const</span> action<span class="token operator">:</span> Action <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// --- 下面是补全的代码 --- </span>        <span class="token keyword">const</span> <span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">setState</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">}</span>         <span class="token keyword">const</span> <span class="token function-variable function">setLeft</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">setState</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>                <span class="token comment">// 由于rightValue参数可选，所以并不一定存在右值，需要我们自行对左值取反</span>        <span class="token keyword">const</span> revLeftValue <span class="token operator">=</span> rightValue <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token operator">!</span>leftValue <span class="token operator">:</span> rightValue                <span class="token keyword">const</span> <span class="token function-variable function">setRight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">setState</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">const</span> <span class="token function-variable function">toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> newValue <span class="token operator">=</span> state <span class="token operator">===</span> leftValue <span class="token operator">?</span> revLeftValue <span class="token operator">:</span> leftValue          <span class="token function">setState</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token comment">// --- 上面是补全的代码 ---</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            setLeft<span class="token punctuation">,</span>            setRight<span class="token punctuation">,</span>            set<span class="token punctuation">,</span>            toggle<span class="token punctuation">,</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上也并不难对吧——甚至有些简单？</p><h3 id="useDebounce"><a href="#useDebounce" class="headerlink" title="useDebounce"></a>useDebounce</h3><p>经典的防抖处理——就像是电梯门按钮一样，一直按就一直不关门，不按了过一会儿就关上了。</p><h3 id="useThrottle"><a href="#useThrottle" class="headerlink" title="useThrottle"></a>useThrottle</h3><h3 id="usePrevious"><a href="#usePrevious" class="headerlink" title="usePrevious"></a>usePrevious</h3><h3 id="useRafState"><a href="#useRafState" class="headerlink" title="useRafState"></a>useRafState</h3><h3 id="useGetState"><a href="#useGetState" class="headerlink" title="useGetState"></a>useGetState</h3><h3 id="useUrlState"><a href="#useUrlState" class="headerlink" title="useUrlState"></a>useUrlState</h3><h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重返字节跳动</title>
      <link href="/2023/02/21/diariesofbytedancer2/"/>
      <url>/2023/02/21/diariesofbytedancer2/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>前传：<a href="https://serio.gitee.io/2022/06/23/diariesofbytedancer/">2022实习日记</a></p><p>首次落笔于 2023/02/21 2:25 AM，重庆</p><p>由于多方面的原因，很久没有更新博客了，但是随着阅历的增多，恍惚回首发现无数宝贵的时光竟然无可追忆，那些和朋友们一起欢笑、一起奋斗的岁月要是沉没在时间的长河中，将会是令人无比遗憾的损失！</p><p>所以我又开始写博客，记录下这些日常的点滴，使得多年之后的某一天夜里，工作了一整天疲惫不堪的我偶然回顾这些文字时，苍老的心里能再次出现那些曾使自己潸然泪下的人物和故事。</p><p>也谨以此篇奉劝读者，珍惜当下的时光，重视眼前的人物。</p></blockquote><h2 id="归去来"><a href="#归去来" class="headerlink" title="归去来"></a>归去来</h2><h3 id="云中飞去"><a href="#云中飞去" class="headerlink" title="云中飞去"></a>云中飞去</h3><p>我在地铁上盯着进进出出的人群，目的地越来越近，我的眼眶也越来越湿润。</p><p>过去的四个月里，我和其他勇士们相互吸引进而有幸相识。外人看我们都说“一骑绝尘”、“登峰造极”之类，然而只有我们自己才知道自己的处境多么尴尬，既上不去又下不来，也没法横向发展——技术上有一定的优势，但短时间内又难以达到一个业内的及格水平，而且又因为自己的心理预期难以放下追求卓越的想法，并且分身乏术还难以在其他方面发展。</p><p>只有我们才知道这一身袍里藏着多少虱子，这是没法和其他人诉说的，因为他们都会觉得这是一种凡尔赛的说法，就像是“对面壁者的笑”。</p><p>所以当一群有相同处境的人聚到一块时，才是第一次知道“相逢何必曾相识”是什么意思。</p><p>“回去吗？”</p><p>大学后，我一度追求金钱，倒也不是因为非常缺少，是我认为没有经济基础决定上层建筑，没有金钱谈何幸福，谈何成功啊？我心底曾暗自以为那些贬低金钱地位的人多少是被虚无缥缈的浪漫主义冲昏了头脑。直到今天我又想起一个被我们视为无比成功的人所说的话是什么意思，“钱是挣不完的”。</p><p>我手里攥着一张明信片，红色的厚纸片上四个金印的大字：“一帆风顺”。这是我在飞机上时，乘务选中我希望让我写一段乘机体验评价，因为写的内容较为独特而给我的纪念品。</p><p>我翻了翻过往的评价，无非十几字敷衍收尾，我也本想如此，但是当我拿起笔时写字我才意识到自己已经不再习惯用笔书写了，不禁回顾起高中时的光景。</p><p>那时的自己，想过有一天会只身一人到举目无亲的城市，为了要交房租的今天和那个遥远的明天而硬着头皮像一个机器一样麻木地工作吗？想过一路走来陪自己嬉闹说笑共同，就算是沉重的压力下也陪自己苦中作乐地那群人，有朝一日突然就从自己的身边消失了，一下子就只有自己默默抗下一切吗？</p><p>“我想尽力把字写好，但是终究是做不到了。虽然这可能很丢人，但是我还是按捺不住想表达我的内心…1600千米，不是飞行的路程，而是我的思念的距离。”</p><h3 id="墙里墙外"><a href="#墙里墙外" class="headerlink" title="墙里墙外"></a>墙里墙外</h3><p>我隔着校门的铁围栏，目送两位朋友带着我一路带过来的一个行李箱加上两个背包的行李远去，独留我一人在校外凄然神伤。疫情给社会带来了巨大的损失，那个时代的空气里总是充满一种迷茫和淡淡的哀伤，学校对于疫情的态度自然是慎之又慎，所以纵使我当时已经满足了地方的要求，但是仍然不被允许进入校园，非得再要之后连续七天的检测报告。</p><p>无奈只好先下榻学校对面的旅馆。</p><p>前台接待头发花白，瘦削的面庞配上细框眼镜，身上又是大衣内就着白衬衫，俨然一副退休老干部形象。只是眨几下眼的功夫，这道貌岸然的老江湖便看出我是风尘仆仆一路奔波，现在早已是疲惫不堪了，眉开眼笑，嘴角一咧：</p><p>“二楼100一天，四楼50一天。”</p><p>我心里一惊，好一个趁火打劫！我岂能正中他下怀，咬咬牙，抬着自己没交给朋友的一个行李箱，一声不吭地上了四楼。</p><p>我从四楼的窗外望着围墙内的楼宇，灯影摇晃。是谁彻夜难眠，为一个难以实现的逻辑而连续作业超过37小时？又是谁夜不能寐，只为了四个即将截止的比赛项目而五天没回过寝室？此时此刻，是否也有人曾像我过去那样，为了给自己，为了给团队争口气而如此做如此不值得的拼命呢？诚然我曾因此获得更多，但是也失去了更多。</p><p>或许我能够弥补。</p><p>第二天我又将两个朋友约到校门口将剩下的一箱行李交付，然后独自一人花了一整天时间在校外转悠。</p><p>墙外便多了一重心事。</p><h3 id="一声愁绝"><a href="#一声愁绝" class="headerlink" title="一声愁绝"></a>一声愁绝</h3><p>紫黑的云边微微显露出月亮明晃晃的一角。</p><p>一声犬吠从远处看不见的黑暗中传来，我面前草丛随即发出窸窸窣窣的响动，两个人影在其中若隐若现。</p><p>见到我靠近，他们开始招手，尽力压低声音向我说道：</p><p>“几个月不见，身手竟然变得如此灵活！”</p><p>我笑而不语，只示意他们赶紧带我回去。一路上我们谁也没有再开口，只任由犬吠声渐远。</p><p>我想说些什么，但是我此时的心灵是如此苍老，也再没有力气开口。</p><p>莫名想起六七年前在香港遇到的那个孩子，第一次见到他时，阳光正从海的边缘升起，街道长椅边的白鸽在微光中飞起，这一眼的惊艳，让我回味多年。</p><p>但谁能想象那个曾经眼里泛着光的，因为对美学的追求而漂洋过海来到意大利的孩子，和如今左搂右抱，游走在灯红酒绿之中放浪形骸的竟是同一个人呢？</p><p>夜晚的砂地上泛着白光，一阵微寒的风渐渐卷起，拂过小径两侧的荒草，周围的雾气也随之流转起来，清冷的光辉在其间变幻。至少有那么一瞬间，我们大概是真的成为了大漠孤烟的澄澄夜风中行走的旅人，满身风尘，纵然迷惘却还是蹒跚着前行。</p><p>如果人间真没有那所谓的异样的神明，那我曾怎样离去，又曾怎样归来，便再没有人会知晓了。</p><h2 id="明月青山"><a href="#明月青山" class="headerlink" title="明月青山"></a>明月青山</h2><h3 id="秋千索"><a href="#秋千索" class="headerlink" title="秋千索"></a>秋千索</h3><p>世间一直有一种巨大的金鱼，雨天时会在半空中悠悠地游动。</p><p>许多人尝试证明这是谬误的，他们中有些或许成功过，但大部分终究是失败了。不巧的是，成功者总是放声大笑万众瞩目，失败者却一言不发无比落寞。</p><p>有人怀揣着梦想与自己的一切，来到人间的旷野，在前人探索过无数次的土地上倔强地用力挖掘，不断向下，不断开拓，直到精疲力竭，才瘫倒在这日积月累形成的深坑之中，到最后他们才相信，这里没有黄金，没有石油，只有自掘坟墓者的泪水被不断涌入的雨吞没。</p><p>我永远都不知道向下几十米到几百米处，埋葬着多少梦想。哪怕我自己也到此一般深处。</p><p>经过大概半年的光景，我又一无所有地回到了起点，如同一场大梦。</p><p>有人说他在平原上望向远山的上空，夕阳的辉映下云里丛生着玫瑰；</p><p>我却只能看到一只巨大的鱼尾悬停在半空微微摇曳，奇异的黑色鱼鳞隐约泛着霜一般的微光，而巨大的鱼眼正一动不动地——直勾勾地望向我！我心里一怵，紧忙收回目光躲到窗户的一旁，紧贴着墙壁我才感知到自己一身冷汗。</p><p>当我能够稳定地数出自己一分钟内的心跳时，我开始慢慢地开始移动躯干，我已经做好了觉悟鼓起此生最大的勇气离开它视野的死角与之对视，就在这一瞬间，大地被它用一股巨大的力量轰击得近乎要碎裂开，狂野的呼啸随之响彻寰宇——窗外的景象像是整个宇宙急剧升温到即将蒸发。</p><p>我清醒却又麻木地度过了一个风雨交加的夜晚。</p><p>我仿佛大病一场。</p><h3 id="浊酒春风"><a href="#浊酒春风" class="headerlink" title="浊酒春风"></a>浊酒春风</h3><p>直到这时我才知道，所谓的世界就是人与人之间的连接构成的。</p><p>“朝菌不知晦朔，蟪蛄不知春秋 ”，我曾以为这只是寓言，后知后觉这原来是对我自己的写照。</p><p>每个人都可以在自己的世界里看见荒原上有羊群，看见沙漠里绿草如茵飘飞雪雨，看见山峰的云飘入最深的海底，丰富又贫瘠。可叹宇宙宽广，历史深长，而人生不过天地方寸之间，岁月光阴长不过百载年华！能有多少时日，几个春秋去看破滚滚红尘！</p><p>天外一星焰闪，我的世界里不曾有过的景色，只此夜里流光中频频闪动。</p><p>面前的这个人的名声我倒是早有耳闻，但真正接触时才惊觉其造诣颇深远超于我。</p><p>昨日不识池中龙，今日方知天外天。</p><p>框架之奥妙，底层之玄机，知无不言，相谈甚欢，彻夜未眠。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/2023/02/20/websocket/"/>
      <url>/2023/02/20/websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>为了参与第二节字节跳动青训营前端项目比赛而学习，总的来说遇到了很多问题，但是好在最后还是拿了个第七名，从1000+人里面脱颖而出，很感谢我的队友的倾力付出<br><strong>（虽然说前端80%的代码是我写的…后端100%的代码是我写的…）</strong></p></blockquote><h3 id="更新日志-1"><a href="#更新日志-1" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote><p><strong>2022/03/上旬</strong><br>忘了什么时候写的<br><strong>2022/03/11</strong><br>补充一些基本信息，比如上面那个时间。更多内容，比如net包的使用以后再补充。</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h3><p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket</p><h3 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h3><p>WebSocket协议，是一种基于TCP的持久的网络协议，实现了浏览器与服务器的<strong>全双工通信</strong></p><h3 id="和AJAX的区别"><a href="#和AJAX的区别" class="headerlink" title="和AJAX的区别"></a>和AJAX的区别</h3><p>AJAX是基于HTTP请求的，是服务器端被动地响应浏览器的请求，数据的流向是<strong>单向的</strong></p><p>而在socket中，数据流向是双向的</p><blockquote><p>那么，在没有socket的年代，人们是如何用AJAX实现的全双工数据交互呢？</p><p>靠的是AJAX轮询….</p></blockquote><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa051684270499aabdb7fc12ec2b3ea77248c0e28c115bc9567b6683f/0.png"></p><h2 id="简单使用Socket"><a href="#简单使用Socket" class="headerlink" title="简单使用Socket"></a>简单使用Socket</h2><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa051684257db326720634990564b69b772d437737a8f1d35d18d93d9/0.png" alt="Socket通信"></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>H5更新中提供了WebSocket对象用于创建和管理WebSocket连接，以及可以通过连接发送和接收数据的API</p><p>非常容易，和AJAX类似的操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment">// 参数是ws地址，这里用一个官方的地址</span>    <span class="token comment">// 1. 创建websocket实例</span>    <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span> <span class="token punctuation">(</span><span class="token string">'ws://hostname:3000'</span><span class="token punctuation">)</span>    <span class="token comment">// 2. 建立连接的时候触发</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'连接成功了'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 3. 主动给websocket发送消息</span>    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> input<span class="token punctuation">.</span>value        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你好啊!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 4. 接收websocket服务器的数据</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> res<span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 5.关闭</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'服务断开连接'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>这里有非常多的模块来实现websocket，这里我们使用第三方包nodejs-websocket来实现</p><p>和http服务器非常像，所以上手也很快</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodejs-websocket'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token comment">// 每次有用户连接上来了，就执行一次，为这个用户创建一个conn对象</span><span class="token keyword">const</span> server <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">conn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"NEW CONNECTION!!!"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"RECEIVED USER'S DATA: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span><span class="token string">"HelloWebSocket!!!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"CONNECTION CLOSED"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户连接异常'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WEBSOCKET SERVER HAS STARTED!!!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2023/02/20/webpack/"/>
      <url>/2023/02/20/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h3><blockquote><p>说实话，我之前是没有系统学习过webpack的，对webpack技术的使用最多就是创建项目和打包文件</p><p>但是这样好吗，当然不好，所以我还是得找时间系统学一下<br>至于要学成什么样子，这里分几个阶段</p><ul><li>入门：灵活运用webpack</li><li>进阶：能够扩展webpack</li><li>大师：源码级理解打包编译过程</li></ul><p>这里我们先要做到入门，后面在不久后的学习实践中一步一步提升</p></blockquote><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote><p><strong>2022/01/28</strong><br>与JavaScript复习笔记一起，并发地更新！</p><p><strong>2022/02/07</strong><br>迂回前进，更新webpack基础使用部分</p><p><strong>2022/04/04</strong><br>迂回前进，更新webpack实战部分</p><p><strong>2022/04/10</strong><br>更新进阶部分</p><p><strong>2022/04/11</strong><br>继续更新进阶部分</p><p><strong>2022/04/12</strong><br>更新完进阶部分，以后如果能够成为webpack大师级程序员那么再继续补充了（大雾）</p><p><strong>2022/05/19</strong><br>补充babel单独使用的一些技巧</p><p><strong>2022/05/20</strong><br>这个日子，这是什么人间疾苦..<br>补充webpack实战部分的环境隔离相关内容，以及resolve字段的使用</p></blockquote><h2 id="webpack概述"><a href="#webpack概述" class="headerlink" title="webpack概述"></a>webpack概述</h2><h3 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h3><p>前端项目由什么构成——资源:</p><blockquote><p>PNG,    JPG,    GIF,    WEBP,    JS,    TS,<br>CSS,    Less， Vue，  JSX，    Sass ……</p></blockquote><p>webpack默认只处理js、json等文件，所以如果要处理图片、css、html等文件的话还需要进行一些配置</p><p><strong>历史背景</strong></p><p>但是在上个世代（2009以前），如果手动管理资源却发现这里有N个script标签，而且它们之间或者它们和部分代码有前驱后继关系，并且N非常大时，整个项目变得不易维护</p><p><strong>出现的问题</strong></p><blockquote><ul><li><p>浏览器不识别Sass、Less ==&gt; 需要预编译成css ==&gt; 浏览器正确识别</p></li><li><p>项目中的模块化以及互相之间引用依赖造成文件分散 ==&gt; 需要把各个分散的模块集中打包成大文件，减少HTTP的链接的请求次数</p></li><li><p>文件体积大 ==&gt; 代码压缩</p></li><li><p>部分ES6语法有兼容问题 =&gt; ES5 ==&gt;浏览器使用 </p></li></ul></blockquote><p><strong>前端工程化</strong></p><p>随着时代的发展，越来越多的工具出现，而其中一些工具——诸如webpack，Gulp、rollup.js，browserify，Vite等，而正是这部分工具的出现才有了前端工程化这种概念</p><p>我们将其中的webpack定义为</p><blockquote><p><strong>一种前端资源编译、打包工具</strong></p></blockquote><h3 id="webpack能做什么"><a href="#webpack能做什么" class="headerlink" title="webpack能做什么"></a>webpack能做什么</h3><p>编译、打包这个说法还是太笼统了，webpack的功能具体如下：</p><blockquote><ul><li>多份资源文件打包成一个Bundle</li><li>支持Babel、Eslint、TS、CoffeScript、Less、Sass</li><li>支持模块化处理css、图片等资源文件</li><li>支持HMR + 开发服务器</li><li>支持持续监听、持续构建</li><li>支持代码分离</li><li>支持Tree-shaking</li><li>支持Sourcemap</li><li>……..</li></ul></blockquote><p>总的来说，webpack具有三种基本能力：处理依赖、模块化、打包</p><blockquote><p><strong>处理依赖</strong><br>方便引用第三方模块，让模块共容易复用，避免全局注入导致冲突、避免重复加载或者加载不必要的模块</p><p><strong>合并代码</strong><br>把各个分散的模块集中打包成大文件，减少HTTP请求，优化代码体积</p><p><strong>各种插件</strong><br>内置的babel能把ES6+转化为ES5-</p></blockquote><h3 id="最小规模使用"><a href="#最小规模使用" class="headerlink" title="最小规模使用"></a>最小规模使用</h3><p><strong>第一步： 初始化项目</strong></p><p>首先先要<strong>将项目初始化为一个包</strong>，</p><blockquote><p>如何初始化为一个包？<br>如果不太懂的话，建议先学习前置知识：<strong>Node.JS基础</strong></p></blockquote><p><strong>第二步：安装依赖</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i -D webpack webpack-cli<span class="token comment"># 上述代码是同时安装多个包，等价于：</span><span class="token comment"># npm install webpack --save-dev</span><span class="token comment"># npm install webpack-cli --save-dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步：开始打包</strong></p><p>在终端，到项目根目录下使用：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webpack <span class="token punctuation">[</span>入口文件路径<span class="token punctuation">]</span> -o <span class="token punctuation">[</span>输出路径<span class="token punctuation">]</span> --mode<span class="token operator">=</span><span class="token punctuation">[</span>模式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webpack ./index.js -o ./dist/index.js --mode<span class="token operator">=</span>production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>效果</strong></p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa051684272c1e41c87bbf21c1eb276d1dae2755edde3f631f5c99157/0.png" alt="image.png"></p><h3 id="五个核心概念"><a href="#五个核心概念" class="headerlink" title="五个核心概念"></a>五个核心概念</h3><blockquote><p> <strong>入口entry</strong><br> 指示以哪个文件为入口起点开始打包，分析内部依赖图</p><p> <strong>出口output</strong><br> 指示打包后的资源输出到哪里，以及如何命名</p><p> <strong>加载器loader</strong><br> 让webpack能够去处理非JS文件（webpack自身只能理解JS，loader相当于翻译其他类型)</p><p> <strong>插件plugins</strong><br> 插件可以用于执行范围更广的任务，比如打包优化和压缩，一直到重新定义环境中的变量（loader可以看做负责翻译的plugin，功能扩展就需要plugins来做)</p><p> <strong>模式mode</strong><br> 模式指示webpack使用相应模式的配置，一般只用两种：development和production模式</p></blockquote><p>按照上面这个介绍，我们在项目文件根目录下写一个webpack.config.js:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        entry<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        output<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        module<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// loader的配置</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        mode<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础配置及其注意事项"><a href="#基础配置及其注意事项" class="headerlink" title="基础配置及其注意事项"></a>基础配置及其注意事项</h3><p>上述配置还只是一个空的架子，需要填充一些具体的内容</p><p>这里以打包js，css，less为例进行说明，需要补充说明的内容都放到了注释里面</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    所有的构建工具都是基于nodejs平台运行的，模块化默认采用commonjs*/</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// webpack配置</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 输出文件名</span>        filename<span class="token operator">:</span> <span class="token string">"built.js"</span><span class="token punctuation">,</span>        <span class="token comment">// 输出路径</span>        <span class="token comment">// __dirname是当前项目(这个包)的绝对路径</span>        <span class="token comment">// 这里必须采用绝对路径，否则报错</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// loader的配置</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 详细的loader配置</span>            <span class="token punctuation">{</span>                <span class="token comment">// 匹配要处理的文件,这里是以css结尾的文件</span>                test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token comment">// 使用哪些loader进行css的处理</span>                <span class="token comment">// loader有严格的先后关系，</span>                <span class="token comment">// ！执行顺序是从下往上 从右往左   </span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token comment">// 创建style标签，将js中的样式文件插入到其中，添加到head中生效</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token comment">// 将css文件变成commonjs模块加载到js中，内容以字符串形式显示</span>                    <span class="token string">'css-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'less-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// plugin配置</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 模式</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token comment">// 有development和production两种选择</span><span class="token comment">// 前者会保留注释，调试信息等，用于检测是否能够正确运行</span><span class="token comment">// 后者尽可能压缩代码，比如省去函数的运行过程而只保留结果，以及将全部代码压缩到一行</span><span class="token punctuation">}</span><span class="token comment">// 配置完毕之后，直接在要打包文件所在的目录层级下使用webpack命令就可以直接打包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack实战"><a href="#webpack实战" class="headerlink" title="webpack实战"></a>webpack实战</h2><p>初学者可以看做是练习题，一开始是题目要求，最后是答案</p><h3 id="打包JS和JSON文件"><a href="#打包JS和JSON文件" class="headerlink" title="打包JS和JSON文件"></a>打包JS和JSON文件</h3><p>webpack默认情况下是只支持打包JS和JSON文件的</p><p><strong>情景描述</strong></p><p>这里我们想把这个引用了JSON的JS文件打包到./build/built.js文件夹下面</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa051684272c1e41c87bbf21c050519cccd9c359bb832e091edd7d1a9/0.png" alt="image.png"></p><p><strong>答案</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webpack ./src/index.js -o ./build/built.js --mode<span class="token operator">=</span>development<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打包CSS和Less"><a href="#打包CSS和Less" class="headerlink" title="打包CSS和Less"></a>打包CSS和Less</h3><p>webpack不能直接识别CSS和Less，这里就需要loader来翻译一下，也需要创建一个webpack.config.js文件进行配置</p><p><strong>情景描述</strong></p><p>将CSS和Less打包到js中</p><p>（build中的html文件为打包后手动创建，此处无需在意）</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa051684272c1e41c87bbf21cbf520f77d2a6475c0ab85971091ebc3f/0.png" alt="image.png"></p><p><strong>方案</strong></p><p>这里在webpack.config.js中进行配置<br>这里需要用到loader，每一个loader都需要手动安装依赖</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"built.js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'less-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动生成html且自动引入"><a href="#自动生成html且自动引入" class="headerlink" title="自动生成html且自动引入"></a>自动生成html且自动引入</h3><p><strong>情景描述</strong></p><p>如题</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa05168421849ddca20346d4924bcdd0e6d8cf2fcab20d78c54da2a8b/0.png" alt="image.png"></p><p><strong>方案</strong><br>这里需要用到plugins，配置一个HtmlWebpackPlugin插件，和loader一样，都需要手动安装依赖，但是比loader多了一个用require引入的过程</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// loader: 下载 使用</span><span class="token comment">// plugins: 下载 引入 使用</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span>        <span class="token comment">// 必须使用绝对路径，不然webpack会报错</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// 复制template指定的html文件。并自动引入打包后输出的其他资源</span>        <span class="token comment">// 所以指定的html不能手动引入资源，不然会重复引入报错</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// 如果这个html文件里面什么都不写的话,那么打包后只有head标签和script标签</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">'index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><p>注意，这里的图片只包括了jpg，png，gif三种格式，至于webp等其他格式还需要别的loader，不过配置方式大同小异，具体方式读者自行查阅，此处不再赘述</p><p><strong>情景描述</strong><br>需要处理html中img标签和less中的图片url</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa05168421849ddca20346d49b905c3caa34ca1f1bd289b844484f93a/0.png" alt="image.png"></p><p><strong>方案</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">'js/built.js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'style-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    <span class="token string">'less-loader'</span>                <span class="token punctuation">]</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                               <span class="token comment">// 这里需要安装 url-loader 和 file-loader,</span>                <span class="token comment">// url-loader会讲图片编为base64</span>                <span class="token comment">// file-loader可以加载本地图片</span>                <span class="token comment">// 仅有一个loader则不需要使用use</span>                loader<span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">// 如果图片大小小于8kb，那么就会被处理为base64</span>                    limit<span class="token operator">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    <span class="token comment">// url-loader默认用es6模块去解析，</span>                    <span class="token comment">// html-loader引入图片是commonjs模块</span>                    <span class="token comment">// 为了防止冲突，这里统一用commonjs</span>                    esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token comment">// 随机生成的文件名太长了，下面是指定命名：</span>  <span class="token comment">// image文件夹下，hash值的前10位.扩展名</span>                    name<span class="token operator">:</span> <span class="token string">'image/[hash:10].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>               <span class="token comment">// 处理html中的img标签，</span><span class="token comment">//负责引入img从而能够被url-loader进行处理</span>                loader<span class="token operator">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">// webpack4 只需要在url-loader配置，</span>                    <span class="token comment">// webpack5还需要在这里配置</span>                    esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">"production"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剥离、合并、压缩及兼容处理CSS"><a href="#剥离、合并、压缩及兼容处理CSS" class="headerlink" title="剥离、合并、压缩及兼容处理CSS"></a>剥离、合并、压缩及兼容处理CSS</h3><p><strong>情景描述</strong><br>基于上一个情景，这里需要把less和css全部打包到一个单独的css文件中，并且这个css会自动兼容大部分浏览器（加上私有前缀等操作），最后被自动引入html中</p><p><strong>方案</strong><br>这里的配置有一点繁琐，首先需要在package.json中加上新的字段:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>      <span class="token string">"last 1 safari version"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"&gt;0.01%"</span><span class="token punctuation">,</span>      <span class="token string">"not dead"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是说，<br>开发环境下，需要兼容的浏览器及其版本(chrome,firefox,safari的最新版)；</p><p>生产环境下，需要兼容的浏览器及其范围(兼容99.9%以上的属性，没有停运的浏览器)</p><p>注意，<strong>这里的生产环境和开发环境不是webpack决定的，而是node决定的！</strong><br>意思是，它不取决于webpack的mode字段，而是由下面这条语句进行配置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">=</span> <span class="token string">'development'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>知道了这些之后，我们直接看看webpack.config.js该如何配置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span> <span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token comment">// 提取,合并css文件</span><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-minimizer-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">// 压缩css文件内容</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置node的环境变量，</span><span class="token comment">// 这样就会去package.json中找到browserlist中的development</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">=</span> <span class="token string">'development'</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">'js/built.js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token comment">// style-loader是从JS中插入到style标签，</span>                    <span class="token comment">// 这里我们把CSS单独提取出来所以不用它</span>                    <span class="token comment">// 'style-loader',</span>                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                     <span class="token punctuation">{</span>                        loader<span class="token operator">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                        options<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                      <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>                    <span class="token comment">// postcss会去package.json里面找browserslist，并据此调整css的兼容性样式（比如加上浏览器的私有前缀等等)</span>                    <span class="token punctuation">{</span>                        loader<span class="token operator">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>                        options<span class="token operator">:</span> <span class="token punctuation">{</span>                            postcssOptions<span class="token operator">:</span> <span class="token punctuation">{</span>                                plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token string">'less-loader'</span>                <span class="token punctuation">]</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                loader<span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    limit<span class="token operator">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    name<span class="token operator">:</span> <span class="token string">'image/[hash:10].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                loader<span class="token operator">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>                options<span class="token operator">:</span> <span class="token punctuation">{</span>                    esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">// 整合到一个CSS中，自动处理冲突</span>            filename<span class="token operator">:</span> <span class="token string">'./css/index.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 下面这个是为了把单独剥离出来的CSS文件压缩成一行</span>        <span class="token comment">// 如果不装这个的话，纵使是生产环境，也只有html和js是一行的状态</span>        <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">"production"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理Vue代码"><a href="#处理Vue代码" class="headerlink" title="处理Vue代码"></a>处理Vue代码</h3><p>注意不是处理Vue-Cli</p><blockquote><p>不再赘述具体代码</p><p><strong>loader</strong><br>vue2.x ===&gt; vue-loader<br>vue3.x ===&gt; vue-loader@nex</p><p><strong>plugins</strong><br>VueLoaderPlugin</p></blockquote><p>如上配置还不够，<strong>直接build会报错</strong>，不过根据报错内容补全缺失的包就好了</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p><strong>情景描述</strong></p><blockquote><p>我们知道有生产环境和开发环境，并且为了应对一些更加特殊的场景，还需要有其他的环境，这时候，只有一套webpack打包配置文件就显得力不从心的</p></blockquote><p><strong>方案</strong></p><p>通常会建立一个configs文件夹，然后在里面配置多个文件针对不同的场景</p><p>然后安装webpack-merge</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i webpack-merge -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行一个配置整合即可（具体使用方式还没尝试过，后面补上）</p><h2 id="webpack进阶"><a href="#webpack进阶" class="headerlink" title="webpack进阶"></a>webpack进阶</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><blockquote><p>HMR<br>resolve<br>optimization<br>dll<br>eslint<br>babel<br>pwa<br>loader<br>plugin<br>devtool<br>tree shaking<br>code split<br>caching<br>lazy loading<br>library（待补充）<br>shimming（待补充）</p></blockquote><h3 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>当我们修改一行代码，整个项目就得重新转译打包，效率十分低下，这时候就得考虑HMR了</p><blockquote><p><strong>Hot Module Replacement</strong>，即<strong>热模块替换</strong></p><p>这里需要知道，和五个核心字段平级的内容中有一个watch字段，可以通过设置<code>watch:true</code>自动重新打包，但是这样的自动更新依旧是打包整个项目，不能算是HMR（<code>watch:true</code>还有另一种写法就是在package.json中的scripts中配置<code>webpack (略) --watch </code>来达到同样的效果)</p><p><strong>永远不要再生产模式下启用HMR</strong></p></blockquote><h4 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h4><p>vscode插件live-server能够自动刷新页面实现类似的功能（热重载）</p><p>但是我们希望能够用webpack来实现，所以我们<strong>需要安装webpack-dev-server</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> webpack-dev-server -Dwebpack serve <span class="token comment"># 默认跑8080</span><span class="token comment"># 由于webpack的版本兼容问题，这里也可能不能运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个服务器是基于Node的express框架的</p><p>和直接使用webpack打包出的静态页面不同，这里不会生成任何文件，这是因为文件操作效率较低，所以webpack-dev-server选择将编译的结果放到内存中，再从内存中读取。</p><p>如果你想要基于其他的框架，那么可以这么做：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> webpack-dev-middleware express <span class="token comment"># 基于express</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在node的express后端文件中引入这个包，并使用<code>app.use()</code>来启用这个引入的包</p><p>此后便可以使用这个包来处理文件，返回express的中间件</p><blockquote><p>具体实现有一点繁琐，此处不再赘述</p></blockquote><p>另外，我们常在Vue项目中配置proxy，这个其实就是webpack的devServer的功能之一，解决跨域的原理是因为可以调用本地的服务器，绕开浏览器的安全限制</p><h4 id="使用HMR"><a href="#使用HMR" class="headerlink" title="使用HMR"></a>使用HMR</h4><blockquote><p>这里主要是学习webpack5，需要注意其HMR配置方式与旧版本有所冲突</p><p>之前说的live-server，watch，（直接使用）webpack-dev-server这些，都是刷新整个页面；</p><p>HRM是需要在<strong>webpack-dev-server</strong>上使用的</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>entry<span class="token operator">:</span> <span class="token string">''</span>    <span class="token comment">// 略</span>    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>    hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://ewr1.vultrobjects.com/imgur1/000/002/534/279_269_bef.JPEG" alt="HRM运行机制（图片来自网络）"></p><blockquote><p>1.webpack监听到文件的变化，进行新的编译和打包，而且以简单的js对象保存在内存中。web</p><p>2.webpack与devServer进行交互，告诉webpack要保存代码到内存中。json</p><p>3.devServer对文件的监控，而且经过配置来告诉devServer是刷新仍是进行热更新。浏览器</p><p>4.devServer经过sock.js和浏览器创建websock长连接，把webpack编译代码各阶段信息告诉浏览器(包括更新模块的hash)，就是经过这一个hash来进行更新的。服务器</p><p>5.webpack经过devServer的配置和传递给他的信息（也就是第二部监听的信息）来决定是否进行浏览器刷新或者热更新。</p><p>6.webpack的HotModuleReplacement经过JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了全部要更新的模块的hash值，获取到更新列表后，该模块再次经过jsonp请求，获取到最新的模块代码。这就是上图中 七、八、9 步骤。webpack-dev-server</p><p>10.HotModulePlugin将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。jsonp</p><p>11.当 HMR 失败后，回退到 live reload 操做，刷新浏览器。</p></blockquote><h3 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h3><blockquote><p>一种源代码到构建后代码映射技术</p><p>如果构建后的代码出错了，通过映射可以追踪到源代码的错误</p></blockquote><h4 id="使用source-map"><a href="#使用source-map" class="headerlink" title="使用source-map"></a>使用source-map</h4><p>配置方式很简单，就是参数有点多</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>entry<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment">// 略</span>    source<span class="token operator">-</span>map<span class="token operator">:</span> inline<span class="token operator">-</span>source<span class="token operator">-</span>map    <span class="token comment">// 参数的格式是[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>source-map是通过base64编码来映射的<br>下面是几种常见的参数:</p><blockquote><p><strong>source-mao</strong> 外部<br>包含 错误信息 和 错误在源代码的位置<br><strong>inline-source-map</strong> 内联<br>包含 错误信息 和 错误在源代码的位置<br>嵌入到构建后的js文件中<br><strong>hidden-source-map</strong> 外部<br>包含 错误信息<br>单独作为一个文件<br><strong>eval-source-map</strong> 内联<br>但是追加到相应的每个文件标识符后<br>包含 错误信息 和 错误在源代码的位置<br><strong>nosources-source-map</strong> 外部<br>包含错误代码准确信息<br><strong>cheap-source-map</strong> 外部<br>包含错误信息 和 错误在源代码的位置（只能精确到行）<br><strong>cheap-module-source-map</strong> 外部<br>包含错误信息 和 错误在源代码的位置（只能精确到行）</p></blockquote><h4 id="参数性能比较"><a href="#参数性能比较" class="headerlink" title="参数性能比较"></a>参数性能比较</h4><p><strong>速度</strong></p><blockquote><p>eval&gt;inline&gt;cheap&gt;…<br>eval-cheap-source-map<br>eval-source-map</p></blockquote><p><strong>调试友好</strong></p><blockquote><p>source-map<br>cheap-module-source-map<br>cheap-source-map</p></blockquote><p>所以结论是：</p><p>调试最友好：eval-source-map(脚手架默认)<br>速度最快：eval-cheap-module-source-map</p><h3 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h3><h4 id="使用oneOf"><a href="#使用oneOf" class="headerlink" title="使用oneOf"></a>使用oneOf</h4><p>正常打包流程，是所有loader都会被走一遍，这样其实没有必要，所以我们可以用oneOf来处理一下，<strong>最多执行一次loader</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 略</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>               oneOf<span class="token operator">:</span> <span class="token punctuation">[</span>               <span class="token comment">// 这里面的东西仅会执行一个，不能有两个配置处理同一个类型文件</span>                   <span class="token punctuation">{</span>                       test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                       enforce<span class="token operator">:</span> <span class="token string">'pre'</span> <span class="token comment">// 优先级更高</span>                       <span class="token comment">// 略   </span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token punctuation">{</span>                       test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                        <span class="token comment">// 略   </span>  <span class="token punctuation">}</span>               <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><blockquote><p>babel是将ES6+等代码转义为ES5代码的工具，相当于一个<strong>编译器</strong>，和Webpack通常配合使用</p><p>babel是能够单独使用的，并不能简单地被认为是webpack的一个内置工具</p><p><strong>babel负责转义，webpack负责处理文件</strong></p></blockquote><p>单独安装babel可以尝试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i @babel/core -D<span class="token comment"># babel的核心代码</span><span class="token function">npm</span> i @babel/cli -g<span class="token comment"># 可以在命令行中运行的依赖，就是说要脱离webpack独立使用的话必须安装的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>像这种以@开头的库，都是放在Monorepo中的</p></blockquote><p>之后使用如下两条语句之一进行转义输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 方式一</span>npx babel test.js --out-dir dist<span class="token comment"># 方式二</span> npx babel test.js -d dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.rmb.bdstatic.com/bjh/4443c2ea3063f53828d4d7a1e8967770.png" alt="babel原理图示意"></p><p>babel也是博大精深的，这里主要是学习webpack，不再赘述</p><p><strong>注意，之后说的都是webpack的内置babel，不是单独使用</strong></p><h4 id="使用babel缓存"><a href="#使用babel缓存" class="headerlink" title="使用babel缓存"></a>使用babel缓存</h4><p>和HMR有类似之处，比如100个模块，1个变了其他99个也得一起重新编译，<br>由于HMR是基于开发环境下的webpack-dev-server的，<br>所以生产环境下是用不了HMR的，这就得利用缓存来实现类似的功能</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 略</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>               <span class="token punctuation">{</span>                   test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                   cacheDirectory<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 开启babel缓存,下次构建就会读取缓存就更快了</span>                       <span class="token comment">// 略   </span>            <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里读取缓存可能会有些问题<br>浏览器缓存是只有响应头才能设置的，前端这里设置的是本地缓存。<br>本地缓存中更新的内容大概是被浏览器缓存缓存的旧内容覆盖而没有呈现，所以提出给文件名做一些处理：<code>文件名+id</code>，这样处理后浏览器缓存中就没有这个更新的文件，自然会从本地读取</p><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h4><p>基于<code>文件名+id</code>的可行性，我们需要思考如何找到一个唯一的id值</p><p><strong>hash</strong></p><blockquote><p>每次webpack构建时会生成一个唯一的hash值<br>因为js和css会同时使用一个hash值，所以会导致所有缓存失效</p></blockquote><p><strong>chunkhash</strong></p><blockquote><p>根据chunk生成的hash值，如果打包来源来源于同一个chunk，那么hash就是一样</p><p>chunk是代码块的意思，可以理解为模块的封装单元</p></blockquote><p><strong>contenthash</strong></p><blockquote><p>根据文件内容生成hash，不同文件hash值一定不同</p></blockquote><p>上述三种hash的使用方式都是类似的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">filename<span class="token operator">:</span> <span class="token string">'index.[hash:10].html'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>这个tree要怎么理解呢，可以看看webpack的logo图，再想想webpack的入口文件这些，一切似乎就有了一个轮廓了——入口文件的代码就是根节点，引入的其他文件就是子节点，如是递归，就形成了一棵树</p><p>那么shaking是什么呢，就是一个比喻，通过摇晃这个树，抖掉书上没用的枯叶——没用到的代码</p><blockquote><p>速成就是<strong>树摇</strong>，但似乎也没有更官方的翻译了..<br>主要是针对JS代码，通过import和export确定树的结构</p></blockquote><p>这个性质是默认启用的，所以直接打包即可</p><h4 id="代码的副作用"><a href="#代码的副作用" class="headerlink" title="代码的副作用"></a>代码的副作用</h4><blockquote><p>「副作用」的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。</p></blockquote><p>如果在package.json中配置<code>sideEffects:false</code>，那么将把所有代码都视为没有副作用，都将进行tree shaking过滤</p><p>也可以配置为形如<code>sideEffects:["*.css"]</code>来指定哪些文件可以视为没有副作用，限制tree shaking的过滤范围</p><h3 id="code-split"><a href="#code-split" class="headerlink" title="code split"></a>code split</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><blockquote><p>将打包输出的一个文件输出为多个文件（切片），加载时就可以实现<strong>按需加载、并行加载</strong>等等</p></blockquote><h4 id="使用code-split"><a href="#使用code-split" class="headerlink" title="使用code split"></a>使用code split</h4><blockquote><p>有三种常用的代码分离方法：</p><ul><li>入口起点：使用 <a href="https://webpack.html.cn/configuration/entry-context"><code>entry</code></a> 配置手动地分离代码。</li><li>防止重复：使用 <a href="https://webpack.html.cn/plugins/commons-chunk-plugin"><code>CommonsChunkPlugin</code></a> 去重和分离 chunk。</li><li>动态导入：通过模块的内联函数调用来分离代码。</li></ul></blockquote><p><strong>入口起点</strong></p><p>有几个入口就有几个打包的文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token punctuation">{</span>main<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    test<span class="token operator">:</span> <span class="token string">'./src/test.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>    filename<span class="token operator">:</span> <span class="token string">'js/[name].[contenthash:10].js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>防止重复</strong></p><p>这事基于多入口的，在此基础上做出了改进</p><p>如果a.js，b.js都引用了c.js，那么以ab为入口打包的话生成的两个包都会包含c.js，导致重复打包，这样就需要设置optimization</p><blockquote><ol><li>会将node_modules中的代码单独打包到一个chunk中，供其他文件引用</li><li>自动分析多入口chunk的公共文件，如果有则会提取出作为一个单独的chunk</li></ol></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token punctuation">{</span>        index<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    test<span class="token operator">:</span> <span class="token string">'./src/test.js'</span>    <span class="token punctuation">}</span>    <span class="token comment">// 略</span>    optimization<span class="token operator">:</span> <span class="token punctuation">{</span>splitChunks<span class="token operator">:</span> <span class="token punctuation">{</span>            chunks<span class="token operator">:</span> <span class="token string">'all'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态导入</strong></p><p>有猜测说这可能是用了ES11的新特性——但实际上并不是这样的，webpack5的这个写法比ES11更早出现</p><p>在JS文件中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">'./xxx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动态导入成功'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// es6的模块，导入成功后会被单独打包</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动态导入失败'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h3><p>懒加载就是要用的时候才加载，而预加载也并非直接加载——而是先等其他资源加载，在浏览器相对空闲的时候才进行加载</p><blockquote><p>预加载更多时候是根据需求决定是否加载，如果被调用了，那么就提前加载，而不是像直接引入那样不管三七二十一就加载</p></blockquote><h4 id="魔法注释"><a href="#魔法注释" class="headerlink" title="魔法注释"></a>魔法注释</h4><p>这里必须先要提一下这个前置的知识点</p><p>java有个东西叫注解…没错…魔法注释就是那个东西…</p><blockquote><p>我特么…魔法注释….谁翻译啊喂…这有点粉红少女心啊…</p></blockquote><h4 id="使用懒加载和预加载"><a href="#使用懒加载和预加载" class="headerlink" title="使用懒加载和预加载"></a>使用懒加载和预加载</h4><blockquote><p><strong>懒加载</strong></p><p>比如可以在点击事件的回调中写一个</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// import中的那个不是注释，而是</span><span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">'./xxx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token punctuation">{</span>someFunc<span class="token punctuation">}</span></span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'懒加载'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就和Vue路由懒加载是一个样子的</p></blockquote><p>这里就一定会有仔细思考的读者发问了——那这不是每点击一次都会加载吗，这样下来性能不会更低吗？</p><p>这个问题确实是存在的，但是如果是一个大型项目，首页加载的时间非常长的时候我们就可以考虑懒加载，其造成的额外开销与之相比可以是微不足道的。</p><blockquote><p>实际操作测试了一下，懒加载只有第一次引入的时候发起了http请求，不会发起第二次</p><p>猜测可能是放到了缓存中</p></blockquote><p>至于这如何使用魔法注释：</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa0516842671a867d72bfdb14fc9143e503a94b718718d0dfaf1a7c69/0.png" alt="魔法注释"></p><blockquote><p><strong>预加载</strong></p><p>开启预加载就更简单了,直接魔——法——注——释！！！</p></blockquote><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa0516842671a867d72bfdb140583eddb7974f01373466d8ceec659b7/0.png" alt="预加载"></p><blockquote><p>预加载的兼容性相对较差，在移动端使用可能与预期不符（当然IE就更不用说了）</p></blockquote><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><blockquote><p>Progressive Web App 渐进式网络开发应用程序<br>具体表现是，能够在离线状态下加载大部分资源</p><p>在一些侧重于展示的页面就可以考虑这个技术</p></blockquote><p>要使用PWA技术，我们通常通过<code>workbox</code>来实现，webpack中可以使用<code>work-webpack-plugin</code></p><h4 id="使用PWA"><a href="#使用PWA" class="headerlink" title="使用PWA"></a>使用PWA</h4><p>首先先要在这里配置一个插件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">WorkboxWebpackPlugin<span class="token punctuation">.</span>GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment">/*        生成一个serviceworker配置文件        1. 帮助serviceworker快速启动        2. 删除旧的serviceworker        */</span>clientClaim<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>skipWaiting<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再到需要做PWA处理的JS文件中：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这里是处理兼容性问题</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'serviceworker'</span> <span class="token keyword">in</span> navigator <span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span>serviceworker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'/service-work.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册失败'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意PWA仅在服务器环境下生效</p></blockquote><p>如果一切顺利，那么在页面的控制台的Application一栏中的Service Workers和Cache Storage中就能找到相关的数据了，</p><p>只要成功加载过，那么之后就算断线了也还能继续访问大部分内容</p><h3 id="多进程打包"><a href="#多进程打包" class="headerlink" title="多进程打包"></a>多进程打包</h3><h4 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h4><blockquote><p>利用thread-loader来做多——多什么？<br>thread难道不是线程吗？</p></blockquote><p>就当我以为是学习资料出错的时候，去官网考证了一下确实是多进程打包，但是每个进程又是单线程的</p><p>反正…就叫多进程打包吧..</p><h4 id="使用多进程打包"><a href="#使用多进程打包" class="headerlink" title="使用多进程打包"></a>使用多进程打包</h4><p>开启多进程的方式就是在use数组中的最前面一个位置填上thread-loader，和前面的其他loader的配置都差不多，这里唯一需要注意的就是，虽然开启多进程打包之后效率会提高，但是这个打开的过程是要开销大量资源的（据说开启一个就得耗费600ms左右——虽然数据可能并不准确，但是也足以反映其开销大了）</p><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><h4 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h4><blockquote><p>就是对于指定内容，不做打包处理</p></blockquote><h4 id="使用externals"><a href="#使用externals" class="headerlink" title="使用externals"></a>使用externals</h4><p>使用方式也非常简单，只需要在五个核心字段平级的位置加上<code>externals</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 略</span>    externals<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// [打包后的文件名] : [要打包的npm包名]</span>        jquery<span class="token operator">:</span> <span class="token string">'jquery'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>什么场景下不用打包呢？</p><p>没错就是CDN引入的时候，如果不配置<code>externals</code>那CDN引入的内容就会作为依赖而打包——但是这样就失去了CDN引入的意义</p><blockquote><p>这里才知道CDN是分布式静态网络的意思…分布式存储静态资源减少服务器的压力…高级啊（我是废物</p></blockquote><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="概念-7"><a href="#概念-7" class="headerlink" title="概念"></a>概念</h4><blockquote><p>个人理解是指定webpack字段相关文件的查找位置，并且能够辅助判断引入文件的路径是一个文件还是文件夹</p></blockquote><h4 id="使用resolve"><a href="#使用resolve" class="headerlink" title="使用resolve"></a>使用resolve</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>entry<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>   output<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定module中配置的内容优先去node_modules中找</span>        module<span class="token operator">:</span> <span class="token punctuation">[</span>node_modules<span class="token punctuation">]</span>，        <span class="token comment">// 指定将这些扩展名作为文件解析</span>        extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.html'</span>，<span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span>    <span class="token comment">// 设置宏</span>    alias<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"@"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><h4 id="概念-8"><a href="#概念-8" class="headerlink" title="概念"></a>概念</h4><blockquote><p>读作dio（手动狗头），动态链接库</p><p>对于多个库会打包成一个chunk——主要是针对于node_modules的打包，多个依赖打包成一个实在是太大了</p><p>使用dll会能够实现node_modules的单独打包</p></blockquote><h4 id="使用dll"><a href="#使用dll" class="headerlink" title="使用dll"></a>使用dll</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 最终打包生成的 [name] --&gt; jquery    </span>        <span class="token comment">// ['jquery']指的就是要打包的库是jquery</span>        jquery<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        library<span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span> <span class="token comment">// 打包的库里面向外暴露出去的内容的名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 略</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">// 会生成一个manifest.json，提供和jquery的映射</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           <span class="token comment">// name: '[name]_[hash]',</span>           <span class="token comment">// path: resolve(__dirname, 'dll/manifest.json') // 输出文件的路径</span>                    <span class="token comment">// 指定不参与打包的库，同时使用时的名称也得变</span>            manifest<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dll/manifest.json'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 将某个文件打包输出，并在html中自动引入</span>        <span class="token keyword">new</span> <span class="token class-name">AddAssetHtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="和externals的区别"><a href="#和externals的区别" class="headerlink" title="和externals的区别"></a>和externals的区别</h4><blockquote><p><strong>externals</strong><br>不用打包依赖，后面手动改为CDN引入</p><p><strong>dll</strong><br>先将依赖单独打包，后面直接引用就好了（不使用dll则是将js一股脑塞到一个文件)</p><p>可以配合code spilt将依赖拆分为任意个数的包</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="开发环境下"><a href="#开发环境下" class="headerlink" title="开发环境下"></a>开发环境下</h4><blockquote><p><strong>优化打包构建速度</strong></p><ul><li>HMR</li></ul><p><strong>优化代码调试</strong></p><ul><li>source-map</li></ul><p><strong>提升开发效率</strong></p><ul><li>resolve</li></ul></blockquote><h4 id="生产环境下"><a href="#生产环境下" class="headerlink" title="生产环境下"></a>生产环境下</h4><blockquote><p><strong>优化打包构建速度</strong></p><ul><li>oneOf</li><li>babel缓存</li><li>多进程打包</li><li>externals</li><li>dll</li></ul><p><strong>优化代码运行的性能</strong></p><ul><li><p>缓存（hash-chunkhash-contenthash）</p></li><li><p>tree shaking（默认启动）</p></li><li><p>code spilt</p></li><li><p>懒加载/预加载</p></li><li><p>PWA（service worker + cache）</p></li></ul></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>终于到了这里哈哈。</p><p>但是webpack的学习仍未结束，之后还要继续努力。</p><p>大师级的打包人不是一朝一夕就能练成的。</p><p>不过这周还是赶紧把项目完结，把JS的笔记写一写，剩下的时间用来复习吧。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transact-SQL</title>
      <link href="/2023/02/20/tsql/"/>
      <url>/2023/02/20/tsql/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于考试在即，本文只写一些与MySQL不太一样的内容，（也可能是一样的但是某佑根本不会的内容）</p><p>并且只是很粗略地过一遍，很多细致的地方还得进一步研究！</p></blockquote><blockquote><p>其他未提到的语法可参考本站的<strong>MySQL学习笔记</strong>。</p></blockquote><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>接下来涉及到的操作中，数据库名尽可能采用SelectCourse，DB等</p><h3 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> SelectCourse <span class="token comment">-- 创建数据库</span><span class="token keyword">ON</span> <span class="token keyword">PRIMARY</span> <span class="token punctuation">(</span>NAME <span class="token operator">=</span> <span class="token string">'data'</span><span class="token punctuation">,</span>               <span class="token comment">-- 主数据文件的逻辑名</span>FILENAME <span class="token operator">=</span> <span class="token string">'E：\data'</span><span class="token punctuation">,</span>    <span class="token comment">-- 主数据文件的物理名</span>SIZE <span class="token operator">=</span> <span class="token number">10</span>MB<span class="token punctuation">,</span>                  <span class="token comment">-- 初始大小</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span>             <span class="token comment">-- 增长率</span><span class="token punctuation">)</span>LOG <span class="token keyword">ON</span> <span class="token punctuation">(</span>NAME <span class="token operator">=</span> <span class="token string">'log'</span><span class="token punctuation">,</span>             <span class="token comment">-- 日志文件逻辑名</span>    FILENAME <span class="token operator">=</span> <span class="token string">'E:\log'</span><span class="token punctuation">,</span> <span class="token comment">-- 日志文件物理名</span>    SZIE <span class="token operator">=</span> <span class="token number">1</span>MB<span class="token punctuation">,</span>                    MAXSIZE <span class="token operator">=</span> <span class="token number">20</span>MB<span class="token punctuation">,</span>    FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BACKUP</span> <span class="token keyword">DATABASE</span> SelectCourse<span class="token keyword">TO</span> <span class="token string">'E:\bk_SelectCourse'</span> <span class="token keyword">WITH</span> DIFFERENTIAL<span class="token punctuation">,</span> <span class="token keyword">INT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中<strong>DIFFERENTIAL</strong>关键字是可以去掉的，其意义是保留设备上已有的内容，去掉的话则是覆盖</p><p>好吧，其实整个WITH都是可以省略的，INT参数意义不详（暂时也没找到参考资料）</p><h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><p>既然有备份，那自然有恢复啊</p><p>（诶，这个备份模式好像在哪里学过来着，究竟是哪里啊）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">RESTORE</span> <span class="token keyword">DATABASE</span> SelectCourse<span class="token keyword">FROM</span> <span class="token string">'E:\bk_SelectCourse'</span><span class="token keyword">WITH</span> <span class="token keyword">FILE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">REPLACE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只知道REPLACE大概是强制替换，FILE参数意义不详</p><p>同样，WITH整个都可以省略</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>当发现有变量这种东西的时候，我还是小为震惊了一下——这可太不得了了！</p><p>有了变量之后，意味着很多逻辑处理能够在数据库内部完成了！</p><p>这种其妙发现带来的兴奋毫不次于发现CSS中可以使用变量时的惊喜！</p><p>这种设定对于我来说还算比较新颖，所以这一章稍微详细一点，咱先来看看T-SQL的发展背景。</p><blockquote><p>Transact-SQL，即事务SQL，简称为T-SQL，是微软大爹开发的，是<strong>SQL的超集</strong>。</p></blockquote><p>好了，我们已经详细地了解了T-SQL的背景（MS的黑科技，知道牛逼就行了）</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>这里的变量也有<strong>局部和全局</strong>之分。</p><p>一开始我还挺迷惑的，SQL语句不是选中之后再执行的吗，那这个局部和全局是按我选中的区域来动态划分作用域的吗？</p><p>试了一下结果并不是我想的这样。</p><blockquote><p>由<strong>用户自定义的变量</strong>，可以存储数值，字符串等类型，作用范围仅在某个程序内部。</p><p>语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@name</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">-- 声明局部变量name，类型是变长数组，长度上限是10</span><span class="token keyword">set</span> <span class="token variable">@name</span> <span class="token operator">=</span> <span class="token string">'沈某人'</span>       <span class="token comment">-- 赋值</span><span class="token keyword">print</span> <span class="token variable">@name</span>  <span class="token comment">-- 打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是局部变量名称前面需要带有@字符</p></blockquote><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote><p>由系统提供的，用于存储一些系统信息，不能由用户定义。</p><p>全局变量的作用域并不局限于某个程序，而是任何程序随时可以调用。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">@<span class="token variable">@ERROR</span>  <span class="token comment">-- 最后一个T-SQL错误的错误号</span>@<span class="token variable">@IDENTITY</span> <span class="token comment">-- 最后一次插入的标记值</span>@<span class="token variable">@LANGUAGE</span> <span class="token comment">-- 当前使用语言的名称</span>@<span class="token variable">@MAX_CONNECTIONS</span> <span class="token comment">-- 可以创建同时连接的最大数目</span>@<span class="token variable">@ROWCOUNT</span> <span class="token comment">-- 受上一个SQL语言影响的行数</span>@<span class="token variable">@SERVERNAME</span> <span class="token comment">-- 本地服务器的名称</span>@<span class="token variable">@TRANSCOUT</span> <span class="token comment">-- 当前连接打开的事务数目</span>@<span class="token variable">@VERSION</span> <span class="token comment">-- SQL SERVER的版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没错，全局变量的标志是前置两个@字符</p></blockquote><p>tip:局部变量名称支持中文</p><h2 id="选择分支"><a href="#选择分支" class="headerlink" title="选择分支"></a>选择分支</h2><p>几乎所有语言的分支都长一个样</p><p>但是这里竟然不太一样！！！</p><h3 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> @院系 <span class="token operator">=</span> <span class="token string">'计科院'</span><span class="token keyword">BEGIN</span><span class="token keyword">PRINT</span> <span class="token string">'壮哉我计科院！'</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中BEGIN和END就是起到类似于{}花括号划定作用域的效果</p><p>当然，在其中只有一条语句时，依旧存在语法糖</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> @院系 <span class="token operator">=</span> <span class="token string">'计科院'</span><span class="token keyword">PRINT</span> <span class="token string">'壮哉我计科院'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样地，也有ELSE和ELSE IF语句，此处不再赘述</p><p>（应该有ELSE IF吧？没试过，不过我想应该是有的。有空试一试）</p><h3 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h3><p>什么，竟然不是switch，爷青结！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> Sname<span class="token punctuation">,</span> location <span class="token operator">=</span><span class="token keyword">CASE</span> Sdept <span class="token keyword">WHEN</span> <span class="token string">'计科院'</span> <span class="token keyword">THEN</span> <span class="token string">'明理楼'</span>，<span class="token keyword">WHEN</span> <span class="token string">'机电院'</span> <span class="token keyword">THEN</span> <span class="token string">'明志楼'</span><span class="token punctuation">,</span><span class="token keyword">WHEN</span> <span class="token string">'化工院'</span> <span class="token keyword">THEN</span> <span class="token string">'明德楼'</span><span class="token punctuation">,</span><span class="token keyword">WHEN</span> <span class="token string">'石工院'</span> <span class="token keyword">THEN</span> <span class="token string">'明德楼'</span><span class="token punctuation">,</span><span class="token keyword">ELSE</span> <span class="token string">'思学楼'</span><span class="token keyword">END</span><span class="token keyword">FROM</span> Student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>所有语言的循环都差不多</p><p>啊，什么？没有FOR循环？爷二度青结！</p><h3 id="WHILE语句"><a href="#WHILE语句" class="headerlink" title="WHILE语句"></a>WHILE语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">WHILE</span> <span class="token punctuation">(</span>SELCT <span class="token function">AVG</span><span class="token punctuation">(</span>Ccredit<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Course <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token comment">-- 注意这个括号不是WHILE语句的，只是为了改变SELECT语句和小于比较的运算优先级</span><span class="token keyword">BEGIN</span><span class="token keyword">UPDATE</span> Course <span class="token keyword">SET</span> Ccredit <span class="token operator">=</span> Credit <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">-- 没有 ++ 这样的一目运算符</span>    <span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>Ccredit<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Course<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token comment">-- 同样地， 这个括号也只是为了改变运算优先级</span>    <span class="token keyword">BREAK</span>   <span class="token comment">-- 是经典的BREAK语句</span>    <span class="token keyword">ELSE</span>    <span class="token keyword">CONTINUE</span> <span class="token comment">-- 应该不写也一样 </span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述WHILE中SELECT语句的执行过程并不是一步到位的，而是一个元组一个元组地查询，每次查询都会用AVG函数计算平均值，一旦这个平均值不再满足&lt;5这个条件，WHILE循环结束</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>一开始我还以为是什么理论性的东西（望文生义</p><p>结果这东西还挺实在的哈</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>存储过程（Strored Procedure）是<strong>一组</strong>为了完成特定功能的<strong>SQL语句集合</strong></p><p>用户通过制定存储过程的名字，并且给出参数（如果需要参数的话）即可执行它。</p></blockquote><p>看完上述概念想到什么啊？</p><p>这不就和C语言中的函数这一概念类似吗？</p><p>那么我们暂时吧存储过程看做函数吧（当然也注意区别，因为T-SQL中也有函数这一概念，这个我们后面再提）</p><p>那为什么要有这样一个设定呢？当然是为了懒啊！</p><h3 id="存储过程的简单操作"><a href="#存储过程的简单操作" class="headerlink" title="存储过程的简单操作"></a>存储过程的简单操作</h3><p><strong>创建存储过程</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> proc_name<span class="token keyword">AS</span><span class="token keyword">BEGIN</span> <span class="token comment">-- 里面写SELECT语句等各种T-SQL语句，此处不再赘述</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用存储过程</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXECUTE</span> proc_name <span class="token comment">-- 熟悉的语句，有了Minecraft的感觉了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改存储过程</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> proc_name<span class="token keyword">AS</span><span class="token keyword">BEGIN</span> <span class="token comment">-- 新的内容</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除存储过程</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> proc_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>我还以为触发器是单独的一章，结果和我说是<strong>一种特殊的存储过程</strong></p><p>也叫 <strong>自执行存储过程</strong>，在满足特定条件的时候执行，而不用EXECUTE执行</p><p>简单使用过程如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> tri_name<span class="token keyword">ON</span> Student <span class="token comment">-- 这是针对的表</span><span class="token keyword">AFTER</span> <span class="token keyword">UPDATE</span> <span class="token comment">-- 这是触发事件，可以有多个触发事件.此处为在更新之后.</span><span class="token keyword">AS</span>  <span class="token keyword">BEGIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<strong>AFTER可以替换为FOR或者INSTEAD OF</strong>，作用也就是顾名思义</p><p>另外<strong>UPDATE也可以替换为INSERT或者DELETE</strong>，作用依旧是顾名思义</p><h2 id="登录、用户、角色管理"><a href="#登录、用户、角色管理" class="headerlink" title="登录、用户、角色管理"></a>登录、用户、角色管理</h2><p><strong>登录名、用户、角色的区分</strong>：</p><ol><li>登录名：数据库访问者需要登录到数据库服务器中，因此需要有一个登录号来通过安全控制的SQL Server验证的过程。</li><li>用户：是指对某个数据库具有访问和操作权限的访问者，这个用户身份需要被授予给登录名。</li><li>角色：特指具有一系列权限的身份，这个角色身份可以赋予给用户，此时这个用户就具有了该角色所有的权限。</li></ol><p><strong>登录名管理</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> LOGIN login_name <span class="token keyword">WITH</span> PASSWORD <span class="token operator">=</span> <span class="token string">'...'</span><span class="token keyword">DROP</span> LOGIN login_name<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>用户管理</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> user_name <span class="token keyword">FOR</span> LOGIN login_name<span class="token punctuation">`</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> user_name<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>角色管理</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> ROLE role_name<span class="token keyword">CREATE</span> ROLE role_name <span class="token keyword">AUTHORIZATION</span> owner_name<span class="token keyword">EXEC</span> sp_addrolemember <span class="token string">'role_name'</span><span class="token punctuation">,</span> <span class="token string">'user_name'</span><span class="token keyword">EXEC</span> sp_droprolemember <span class="token string">'role_name'</span><span class="token punctuation">,</span> <span class="token string">'user_name'</span><span class="token keyword">DROP</span> ROLE role_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>总的来说T-SQL是相当的厉害啊，对于只有半吊子MySQL学习经验的我来说可谓是<strong>惊艳</strong>，</p><p>但是可惜我几门考试接踵而至也腾不出多余的时间来系统地学习这门技术了，不过我想总有一天我还会再学习更多数据库相关知识的。</p><p>当然了，如果我发现本篇疏漏的较大的知识点，我也会找个时间添加上的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pug</title>
      <link href="/2023/02/20/pug/"/>
      <url>/2023/02/20/pug/</url>
      
        <content type="html"><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>最近事情是真的多，目前情况是，还有三个项目，其中两个会在本月内某个时间结题，还有一个则是中期检测</p><p>之后考试、办算法比赛热身选拔赛活动、面试、团队队长换届这些一大堆事情都在这个月内接踵而至</p><p>所以我的上一篇关于JS的博文还没更完….</p><p>不过这里先写一个短篇吧</p></blockquote><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote><p><strong>2022/05/07</strong><br>一次偶然的机会认识到了Jade，结果发现它现在叫做Pug<br>学了一会儿之后发现它还是有点东西的</p><p><strong>2022/05/08</strong><br>基本更新完毕</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是Pug"><a href="#什么是Pug" class="headerlink" title="什么是Pug"></a>什么是Pug</h3><p>简单而言就是——<strong>一个模板引擎</strong></p><blockquote><p>如果不知道什么是模板引擎，可以想想php、jsp、ejs….<br>大概就是那种感觉</p><p>个人觉得，目前而言它相较于Jade来说更为常见</p><p>不过我们还是学一下jade吧——哦，它改名叫pug了</p></blockquote><h3 id="Pug的特点"><a href="#Pug的特点" class="headerlink" title="Pug的特点"></a>Pug的特点</h3><p>我们长话短说：</p><blockquote><p>容易读写，支持Emmet语法、部分JS语法，以及类似于继承、抽象、内联函数等书写形式</p><p><strong>总之就是能帮你偷懒</strong></p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>首先来直接看看如何生成一个基本的结构</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">html  head    title= title    link(rel='stylesheet', href='/stylesheets/style.css')  body    block content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很棒吧？不需要写闭合标签，就跟高效的Python一样，通过空格缩进就实现嵌套关系了</p><p>接下来让我们细说一下其中的内容</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">-var title='pug is so cute'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没错，可以直接在一堆类似于HTML的东西里面声明变量然后调用！</p><p>当然，更多时候是不会直接在模板里面声明变量的，而是写在后端的逻辑里面，根据不同的情况渲染不同的内容——这个大概也算是后端渲染了吧</p><h3 id="等号表示"><a href="#等号表示" class="headerlink" title="等号表示"></a>等号表示</h3><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">title=title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等号的左边是标签，右边是变量，如果这个变量的值是 pug is so cute</p><p>那么这一段将被解析为</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>pug is so cute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="井号表示"><a href="#井号表示" class="headerlink" title="井号表示"></a>井号表示</h3><p>如果标签包括的仅有常量，直接写成</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">div 123hhh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是如果出现变量和常量混杂的情况，我们就需要用到#</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">div wow!!!, #{pug}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="叹号表示"><a href="#叹号表示" class="headerlink" title="叹号表示"></a>叹号表示</h3><p>和等号基本一样，就看个人喜好决定使用哪个</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">div !=pug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="单个属性"><a href="#单个属性" class="headerlink" title="单个属性"></a>单个属性</h3><p>标签的属性用括号括起来就好了</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">link(rel='stylesheet', href='/stylesheets/style.css')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多个属性"><a href="#多个属性" class="headerlink" title="多个属性"></a>多个属性</h3><p>一个属性如果有多个值——比如style，对于这种情况，下面两种写法都是可取的：</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">p(style="color:#999999;font-size:18px")h2(style={color:"#666666","font-size":"20px"})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此外，之前也提到过，Pug是支持Emmet的，当然由于Pug对空格缩进比较敏感，加之其存在一些逻辑判断涉及到<code>&gt;</code>  、<code>&lt;</code>等符号，所以实现多级嵌套可能比较困难（当然我们可以用Pug的循环来达到减少代码量的目的）</p><p>不过我们依旧能够使用简单的Emmet为标签添加<code>id</code>、<code>class</code>等属性</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">div.class1.class2 没错,是EMMET语法div#id1.class1(class="class2") 非常棒！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class1 class2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    没错,是EMMET语法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class1 class2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    非常棒!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="行注释"><a href="#行注释" class="headerlink" title="行注释"></a>行注释</h3><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">// 我是一段行注释<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法就和原来的一样，不过行注释会被解析到HTML中:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 我是一段行注释 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h3><p>不是闭合的，是通过缩进来判断注释的范围</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">//- 我是块注释div 123div 456div END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注释的范围是div 123和div 456</p><p>块注释不会被解析，在对应的HTML部分中消失得无影无踪</p><blockquote><p>其实，<code>-</code>可以看做是声明在仅在服务端执行的代码</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="if系列"><a href="#if系列" class="headerlink" title="if系列"></a>if系列</h3><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><h3 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h3><p>相当于if取反——这可能是因为Pug为了避免对于感叹号的处理出现二义性</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">unless falsediv That is good!!! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>受到以前学的知识的影响，总是把这个叫做switch，但是实际上是case，并且不太一样的是，这里用的是when来表示每种情况</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">- var friends = 10case friends  when 0    p you have no friends  when 1    p you have a friend  default    p you have #{friends} friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，要是不换行的话，需要写成这样:</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">- var friends = 1case friends  when 0: p you have no friends  when 1: p you have a friend  default: p you have #{friends} friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  ul    <span class="token operator">-</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      li hello #<span class="token punctuation">{</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token operator">-</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，老规矩，如果只有一条语句，那么可以省略括号</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>和while类似</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">ul  while num&lt;5  li= num++ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><p>可以拿到下标，可以不写<code>-</code></p><p>是最常用的形式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ul  each val<span class="token punctuation">,</span> index <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'西瓜'</span><span class="token punctuation">,</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'梨子'</span><span class="token punctuation">]</span>    li<span class="token operator">=</span> index <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> val<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>通<code>extends</code>关键字进行模板继承</p><p>首先得有一个父级，而且这个父级一般是有抽象的内容需要实现:</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">doctype htmlhtml  head    title= title    link(rel='stylesheet', href='/stylesheets/style.css')  body    block content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意最后一行的block，这并不一个标签，而是抽象内容声明。</p><p>可以看做是一个插槽</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>之后我们需要一个子级:</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">extends layout //- layout是父级文件的名字block content  div 继承了layout,并实现了content部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h2><p>除了主动作为某个模板的子级（继承），也可以主动作为某个模板的父级（包含）</p><p>其实也就是将目标模板插入</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">doctype html html  head  include header //- 引入叫做header的模板文件 body  h1 pug模板 block content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>相当于函数，可以传参</p><blockquote><p>当然，也有叫做混入的，这取决于对mixin的翻译</p></blockquote><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><p>mixin进行声明，<code>+</code>调用</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">mixin show(time) h3= time +show('2017-11-11')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用其他语言"><a href="#调用其他语言" class="headerlink" title="调用其他语言"></a>调用其他语言</h2><p>令人难以置信！</p><p>真是太棒了！</p><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">:markdown  # Markdown 标题  这里使用的是 MarkDown 格式script  :coffee    console.log '这里是 coffee script'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/02/20/mysql/"/>
      <url>/2023/02/20/mysql/</url>
      
        <content type="html"><![CDATA[<p>这是大一下暑假的时候写的，以前放在csdn上，现在搬迁到自己的博客了</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来学过的，结果太久没用就忘了<br>由于是做前端的，所这个就学个大概,笔记相对基础一点</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><img src="https://img-blog.csdnimg.cn/20210717142400480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>变量名别太离谱就行，<strong>变量值是mysql的bin文件的上级目录</strong><br><img src="https://img-blog.csdnimg.cn/20210717142609272.png" alt="在这里插入图片描述"><br>接下来找到这个，点击编辑<br><img src="https://img-blog.csdnimg.cn/20210717142807884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后点击新建<br><img src="https://img-blog.csdnimg.cn/20210717142905202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后输入bin文件路径<br><img src="https://img-blog.csdnimg.cn/20210717143204158.png" alt="在这里插入图片描述"></p><h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><p>win + r进入cmd窗口，进行如图所示操作<img src="https://img-blog.csdnimg.cn/20210717143808589.png" alt="在这里插入图片描述"><br>其中-u后紧跟的是用户名，-p紧跟的是密码，这些在mysql下载安装时有配置，我这里设置的是root和root<br><img src="https://img-blog.csdnimg.cn/20210717144018209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看到这一幕，说明MySQL的变量配置成功了，可以正常运行了</p><p><strong>另外，你可以这样输入密码</strong><br><img src="https://img-blog.csdnimg.cn/20210717144130558.png" alt="在这里插入图片描述"></p><p><strong>退出是exit指令</strong><br><img src="https://img-blog.csdnimg.cn/20210717144210447.png" alt="在这里插入图片描述"></p><h2 id="MySQL核心文件"><a href="#MySQL核心文件" class="headerlink" title="MySQL核心文件"></a>MySQL核心文件</h2><p>bin文件：存储命令文件<br>lib文件：存储库文件<br>include文件：存储头文件<br>Share文件：存储字符集、语言等信息<br>mysql.ini文件（隐藏文件）：mysql的配置文件</p><p><strong>了解即可，配置那些后面用可视化工具操作方便得多</strong></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>这一部分，可以暂时先跳过</p><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p><img src="https://img-blog.csdnimg.cn/20210718111810150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><p><img src="https://img-blog.csdnimg.cn/20210718111903906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><img src="https://img-blog.csdnimg.cn/2021071811205639.png" alt="在这里插入图片描述"></p><h2 id="DDl-数据定义语言"><a href="#DDl-数据定义语言" class="headerlink" title="DDl:数据定义语言"></a>DDl:数据定义语言</h2><p>（当然这个标题并不是很严谨，只是大部分都是DDI的内容）</p><p>SQL是Structured Query Language结构化查询语言<br>而DDL是Data Definition Language，能对数据库进行操作</p><p>（<strong>注意:</strong><br>1.使用SQL语句时，记得结尾加；<br>2.使用SQL命令之前确保数据库已经开启<br><strong>3.mysql几乎不区分大小写，大部分内容最后都会统一转为小写</strong><br>）</p><h4 id="显示所有数据库SHOW-DATABASES"><a href="#显示所有数据库SHOW-DATABASES" class="headerlink" title="显示所有数据库SHOW DATABASES"></a>显示所有数据库<code>SHOW DATABASES</code></h4><p> 显示所有的数据库<br><img src="https://img-blog.csdnimg.cn/20210717145905852.png" alt="在这里插入图片描述"><br> 这几个是系统自带的数据库，具体情况由安装的版本决定，但无论如何，不要随便去动这几个</p><h4 id="创建数据库CREATE-DATABASE"><a href="#创建数据库CREATE-DATABASE" class="headerlink" title="创建数据库CREATE DATABASE"></a>创建数据库<code>CREATE DATABASE</code></h4><p>创建数据库，规范是这里要大写名字,但是实际上<strong>mysql会把名字统一转化为小写</strong><br>（毕竟命令都是大写，名称又都是大写实在是不方便阅读）<br><img src="https://img-blog.csdnimg.cn/20210717150832388.png" alt="在这里插入图片描述"><br>这里创建了一个名字叫myDataBase1的数据库，并且设置它的字符集是国标码 gbk<br><strong>（当然后面的CHARACTER SET gbk可以省略）</strong></p><p>再用SHOW DATABASES查询一下<br>（<em>这里我漏加了;不过会提示让你补上的</em>）<br><img src="https://img-blog.csdnimg.cn/20210717151215494.png" alt="在这里插入图片描述"><br>另外，如果你不确定某个数据库是否已经存在，可以这样写<br><img src="https://img-blog.csdnimg.cn/20210717152939962.png" alt="在这里插入图片描述"></p><h4 id="显示数据库的创建信息SHOW-CREATE-DATABASE"><a href="#显示数据库的创建信息SHOW-CREATE-DATABASE" class="headerlink" title="显示数据库的创建信息SHOW CREATE DATABASE"></a>显示数据库的创建信息<code>SHOW CREATE DATABASE</code></h4><p> 展示创建某个数据库时的相关信息<br> <img src="https://img-blog.csdnimg.cn/20210717152120378.png" alt="在这里插入图片描述"></p><h4 id="修改数据库ALTER-DATABASE"><a href="#修改数据库ALTER-DATABASE" class="headerlink" title="修改数据库ALTER DATABASE"></a>修改数据库<code>ALTER DATABASE</code></h4><p>修改某个数据库的某个信息<br><img src="https://img-blog.csdnimg.cn/20210717152455547.png" alt="在这里插入图片描述"><br>修改mydatabase1的字符集为utf8<br><strong>注意mysql中是utf8而不是utf-8</strong></p><h4 id="删除数据库DROP-DATABASE"><a href="#删除数据库DROP-DATABASE" class="headerlink" title="删除数据库DROP DATABASE"></a>删除数据库<code>DROP DATABASE</code></h4><p>删除某个数据库<br><img src="https://img-blog.csdnimg.cn/20210717153138676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="使用数据库USE"><a href="#使用数据库USE" class="headerlink" title="使用数据库USE"></a>使用数据库USE</h4><p>使用某个数据库<br>数据都在数据库里面，我们之前一直都在外面对众多数据库进行增删改查，还没有进去访问过<br><img src="https://img-blog.csdnimg.cn/20210717153436927.png" alt="在这里插入图片描述"></p><h4 id="查看当前数据库SELECT-DATABASE"><a href="#查看当前数据库SELECT-DATABASE" class="headerlink" title="查看当前数据库SELECT DATABASE()"></a>查看当前数据库SELECT DATABASE()</h4><p>假如你不知道你正在使用哪个数据库，你就可以这么写<br><img src="https://img-blog.csdnimg.cn/20210717153611248.png" alt="在这里插入图片描述"><br>正在使用mydatabase1<br><strong>如果没有使用任何数据库，那么结果是NULL</strong><br><img src="https://img-blog.csdnimg.cn/2021071715385160.png" alt="在这里插入图片描述"></p><p>那么这里我就突发奇想，数据库名字能叫NULL吗<br><img src="https://img-blog.csdnimg.cn/2021071715402028.png" alt="在这里插入图片描述"><br>果然不行。而且哪怕可以如此，数据库名字统一为小写，null仍能与NULL区分</p><p>==========================================================<br><strong>接下来的DDI语句内容可以先暂时跳过，后面看完了可视化数据库工具再折回来看</strong></p><h4 id="创建表CREATE-TABLE"><a href="#创建表CREATE-TABLE" class="headerlink" title="创建表CREATE TABLE"></a>创建表CREATE TABLE</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span><span class="token punctuation">(</span>subjectId <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>课序号<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>subjectName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>subjectHours <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行的创建结果如图所示<br><img src="https://img-blog.csdnimg.cn/20210718200232542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="修改表ALERT-TABLE"><a href="#修改表ALERT-TABLE" class="headerlink" title="修改表ALERT TABLE"></a>修改表<code>ALERT TABLE</code></h4><h6 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a><code>ADD</code></h6><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">ADD</span> gradeID <span class="token keyword">INT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718200743443.png" alt="在这里插入图片描述"></p><h6 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a><code>DROP</code></h6><p>每次只能删除一列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">DROP</span>  gradeID<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718201530660.png" alt="在这里插入图片描述"></p><h6 id="MODIFY"><a href="#MODIFY" class="headerlink" title="MODIFY"></a><code>MODIFY</code></h6><p>修改该列的属性（不包括名称）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>subject<span class="token punctuation">`</span> <span class="token keyword">MODIFY</span> subjectName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改前:<br><img src="https://img-blog.csdnimg.cn/20210718201917332.png" alt="在这里插入图片描述"><br>修改后：<br><img src="https://img-blog.csdnimg.cn/20210718202041410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="CHANGE"><a href="#CHANGE" class="headerlink" title="CHANGE"></a><code>CHANGE</code></h6><p>修改列的名称<br><img src="https://img-blog.csdnimg.cn/20210718203331714.png" alt="在这里插入图片描述"></p><h6 id="RENAME"><a href="#RENAME" class="headerlink" title="RENAME"></a><code>RENAME</code></h6><p>表重命名<br><img src="https://img-blog.csdnimg.cn/20210718205133463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="可视化数据库工具"><a href="#可视化数据库工具" class="headerlink" title="可视化数据库工具"></a>可视化数据库工具</h2><p>cmd <del>太丑了</del> 数据显示不是那么直观<br>所以诞生了许多可视化数据库工具</p><p>比如Navicate，SQLyog，SQL_Front，HeidiSQL，DBite for SQLite等等，根据自身情况随便选一个就行</p><p>我们这里采用SQL_yog<br>首先新建一个链接，名字随意取<br><img src="https://img-blog.csdnimg.cn/20210717155616692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后输入 用户名 和 密码 进入<br><img src="https://img-blog.csdnimg.cn/20210717160341399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好耶，这可不比cmd香得多？<br><del>而且更棒的是还支持鼠标操作</del><br><img src="https://img-blog.csdnimg.cn/20210717160624108.png" alt="在这里插入图片描述"><br>有了大小写自动转化，而且还有了TAB补全！<br>甚至只执行单条语句都不用加分号</p><p>选中一条语句，然后按下F9，就可以在下方的区域看到执行结果<br><img src="https://img-blog.csdnimg.cn/20210717160811539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210717161006952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(注意创建新的库之后要刷新一下才能显示）</p><p>并且现在可以通过#创建注释了<br><img src="https://img-blog.csdnimg.cn/20210717161338216.png" alt="在这里插入图片描述"></p><h2 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL:数据查询语言"></a>DQL:数据查询语言</h2><p>hmmmmm查数据至少得先有数据吧….<br>那这里先用鼠标手动添加数据，或者也可以直接先去看后面的<strong>DML数据操作语言的内容</strong></p><h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><p>操作数据之前我们先做一点前置准备:<br><strong>鼠标创建一张表</strong><br>名字是t_persons<br><img src="https://img-blog.csdnimg.cn/20210717162852313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>然后打开表继续鼠标添加数据</strong><br><img src="https://img-blog.csdnimg.cn/20210717163449725.png" alt="在这里插入图片描述"></p><h4 id="查询SELECT-FROM"><a href="#查询SELECT-FROM" class="headerlink" title="查询SELECT FROM"></a>查询<code>SELECT FROM</code></h4><p>最简单的查询<br><img src="https://img-blog.csdnimg.cn/20210717164146419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">注意name是一个关键字，这里需要使用反引号（就是tab上面那个）屏蔽一下</p><p>另外，* 是所有的意思，这样写也可以<br>(不过这样写的话，底层还有一个展开的过程，所以执行速度会相对减慢)<br><img src="https://img-blog.csdnimg.cn/20210717164540901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><em>诶等等，之前不是录入了四组数据吗，某本伟怎么不见了！<br>看了看才发现我没保存….不过不影响…</em></p><p>另外，查询语句是可以进行运算的<br><img src="https://img-blog.csdnimg.cn/20210717165448925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里就要提到一个概念：<strong>虚拟表</strong><br>通过查询手段得到的新表是一个 <strong>处理过的</strong> <strong>节选的</strong> 原表 <strong>副本</strong>,即虚拟表<br>所以在查询的时候对数据进行操作并不会影响到原表</p><h4 id="重命名AS"><a href="#重命名AS" class="headerlink" title="重命名AS"></a>重命名<code>AS</code></h4><p>用来给出别称的</p><p><img src="https://img-blog.csdnimg.cn/20210717215129640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="有序查询ORDER-BY"><a href="#有序查询ORDER-BY" class="headerlink" title="有序查询ORDER BY"></a>有序查询<code>ORDER BY</code></h4><p>给查询结果排个序</p><p><strong>ASC</strong>（可省略，默认值）升序<br><img src="https://img-blog.csdnimg.cn/20210717221208990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>DESC</strong>降序<br><img src="https://img-blog.csdnimg.cn/20210717221306726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="条件查询WHERE"><a href="#条件查询WHERE" class="headerlink" title="条件查询WHERE"></a>条件查询<code>WHERE</code></h4><p>条件筛选<br><img src="https://img-blog.csdnimg.cn/20210717225828576.png" alt="在这里插入图片描述"></p><h4 id="逻辑AND和OR和NOT"><a href="#逻辑AND和OR和NOT" class="headerlink" title="逻辑AND和OR和NOT"></a>逻辑<code>AND和OR和NOT</code></h4><p>逻辑 且 或 非<br>(这里就演示一下OR，其他依葫芦画瓢)<br><img src="https://img-blog.csdnimg.cn/20210717230924632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="不等式"><a href="#不等式" class="headerlink" title="不等式"></a>不等式</h4><p>&lt;，&gt; ， &lt;，  &gt;=，  &lt;=，  !=， <strong>&lt;&gt;</strong></p><p> 最后一个&lt;&gt;<br> 也是不等于的意思，和!=一样<img src="https://img-blog.csdnimg.cn/20210717232133252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另外还需要提一下的就只有<br>区间依旧需要分开写，然后用逻辑连接词链接<br><img src="https://img-blog.csdnimg.cn/20210717233048859.png" alt="在这里插入图片描述"></p><h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a><code>NULL</code></h4><p>空值<br>对于NULL值，判定不能用=或者！=以及&lt;&gt;<br>而需要用到</p><h4 id="IS"><a href="#IS" class="headerlink" title="IS"></a><code>IS</code></h4><p><img src="https://img-blog.csdnimg.cn/20210717234020106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="枚举IN"><a href="#枚举IN" class="headerlink" title="枚举IN"></a>枚举<code>IN</code></h4><p>枚举<br>选出id为1或2的<br><img src="https://img-blog.csdnimg.cn/20210717234721554.png" alt="在这里插入图片描述"></p><h4 id="模糊查询LIKE"><a href="#模糊查询LIKE" class="headerlink" title="模糊查询LIKE"></a>模糊查询<code>LIKE</code></h4><p>模糊查询<br>第一种是<strong>有限个数字符</strong>模糊，比如一个 张某<br><strong>每模糊一个字符，都要在相应的位置加上一个 _</strong><br><img src="https://img-blog.csdnimg.cn/20210717235948247.png" alt="在这里插入图片描述"></p><p>第二种是<strong>任意个数字符</strong>模糊<br><img src="https://img-blog.csdnimg.cn/20210718000234522.png" alt="在这里插入图片描述"></p><h4 id="CASE-END"><a href="#CASE-END" class="headerlink" title="CASE END"></a><code>CASE END</code></h4><p>就是一个分支结构，when这里翻译为   <strong>当…时</strong><br>注意别漏掉CASE前面的逗号<br><img src="https://img-blog.csdnimg.cn/20210718001904277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="时间类函数"><a href="#时间类函数" class="headerlink" title="时间类函数"></a>时间类函数</h2><p>这部分内容比较多，就不一一用代码演示了<br>以下几张图片都来自于视频截图<br><a href="https://www.bilibili.com/video/BV1BZ4y1H7LZ?p=13">图片来源</a><br><img src="https://img-blog.csdnimg.cn/2021071802393026.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="字符类函数"><a href="#字符类函数" class="headerlink" title="字符类函数"></a>字符类函数</h2><p>同上<br><img src="https://img-blog.csdnimg.cn/20210718023945753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>同上<br><img src="https://img-blog.csdnimg.cn/20210718024005382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="分组查询GROUP-BY"><a href="#分组查询GROUP-BY" class="headerlink" title="分组查询GROUP BY"></a>分组查询<code>GROUP BY</code></h2><p>首先给表增加一点东西<br><img src="https://img-blog.csdnimg.cn/20210718025704334.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token keyword">FROM</span> t_persons <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下表中的1，2代表1男2女<br><img src="https://img-blog.csdnimg.cn/20210718030404342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="限定查询LIMIT"><a href="#限定查询LIMIT" class="headerlink" title="限定查询LIMIT"></a>限定查询<code>LIMIT</code></h2><p>0,2代表是<strong>从0行开始   查询2行数据</strong>（下标从0开始）<br><img src="https://img-blog.csdnimg.cn/202107180316225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>其实也就是套娃<br>需要注意的就是注意 子查询结果 参与比较的时候 的数据类型<br>别用int和char比，不然只能稀里糊涂地改半天bug<br>1.子查询的结果是单行单列<br><img src="https://img-blog.csdnimg.cn/20210718032905509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.子查询的结果是单行多列<br>记得开枚举，不然你怎么用单个数据去和整个返回内容比较呢<br><img src="https://img-blog.csdnimg.cn/20210718034055805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.如果结果是多行单列</p><h2 id="任意与存在：ALL与ANY"><a href="#任意与存在：ALL与ANY" class="headerlink" title="任意与存在：ALL与ANY"></a>任意与存在：<code>ALL</code>与<code>ANY</code></h2><p>其实就是字面意思</p><p>另外，这里的sex用0,1表示的<br><img src="https://img-blog.csdnimg.cn/20210718034612437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.子查询的结果是多行多列（一张表）</p><p>注意as的作用是将整个临时的子查询结果（一张表里的数据）看做一个整体（一张表），不能少<br><img src="https://img-blog.csdnimg.cn/20210718035539294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="合并查询UNION-ALL"><a href="#合并查询UNION-ALL" class="headerlink" title="合并查询UNION (ALL)"></a>合并查询<code>UNION (ALL)</code></h2><p><strong>合并指的是把 查询结果 合并，并不合并原表</strong></p><p>再改一点数据<br><img src="https://img-blog.csdnimg.cn/20210718041237144.png" alt="在这里插入图片描述"><br><strong>合并的前提是，列数得相同</strong><br>说白了就是把后者硬塞进前者<br>这是UNION<br>完全重复的内容直接没了<br><img src="https://img-blog.csdnimg.cn/20210718041422957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是UNION ALL<br>哪怕完全一样都还是保留<br><img src="https://img-blog.csdnimg.cn/20210718041444230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="表连接查询JOIN-ON"><a href="#表连接查询JOIN-ON" class="headerlink" title="表连接查询JOIN ON"></a>表连接查询<code>JOIN ON</code></h2><p>合并查询 是 合并 查询的结果，是个动宾短语<br>但是表连接查询中的“表连接”是一个定语后置的倒装，<br>作为一个偏正短语的定语修饰省略的中心词查询（结果）….啊吧啊吧<br>好吧扯远了….<br>表连接查询是指的，<strong>先把表（暂时）合并再查询</strong></p><p>先新建一个表叫做t_myfriends<br><del>叔叔我啊，最喜欢交朋友了</del><br><img src="https://img-blog.csdnimg.cn/20210718063425818.png" alt="在这里插入图片描述"></p><h3 id="1-内连接"><a href="#1-内连接" class="headerlink" title="1.内连接"></a>1.内连接</h3><p>我们先来观察一下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_persons <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_myfriends<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718064413446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><code>SELECT * FROM t_myfriends INNER JOIN t_persons</code><br><img src="https://img-blog.csdnimg.cn/20210718064652326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>唔，在不加ON的情况下，表的行数变成了2 * 3 = 6（布尔积）行，我们可以发觉，两张表合并的时候的一些规律了，</p><p>那就是取二者行数的最小公倍数作为新的行数，并且均匀复制数据到新的表中</p><p>另外，INNER JOIN 语句左边的表，就是新合成的表的左部分，语句右边的便是新表的右部分。</p><p>我们再来观察一下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_persons <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_myfriends <span class="token keyword">ON</span> t_persons<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t_myfriends<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_myfriends <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_persons <span class="token keyword">ON</span> t_persons<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t_myfriends<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718065402806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以ON其实就是加上了一个条件<br>只有两个表的id相等的数据才被放入新表，并且按照id相匹配<br>而且左右分布依旧遵循上文所述规则</p><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_persons<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_myfriends<span class="token keyword">ON</span> t_persons<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t_myfriends<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>以左边的t_persons为主表，即t_persons的左外连接</strong><br><img src="https://img-blog.csdnimg.cn/20210718072515546.png" alt="在这里插入图片描述"><br>可以看出，右边的表会适应左边的表，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_persons<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_myfriends<span class="token keyword">ON</span> t_persons<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t_myfriends<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_myfriends<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_persons<span class="token keyword">ON</span> t_persons<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t_Myfriends<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以右边的表为主表，即右外连接<br>（在左/右 还是由 在right join的左/右决定）<br><img src="https://img-blog.csdnimg.cn/20210718101559269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="DML-数据操纵语言"><a href="#DML-数据操纵语言" class="headerlink" title="DML:数据操纵语言"></a>DML:数据操纵语言</h2><p>鼠标操作虽好，但总不能只会鼠标操作吧</p><h4 id="增INSERT-INTO-VALUES"><a href="#增INSERT-INTO-VALUES" class="headerlink" title="增INSERT INTO VALUES"></a>增<code>INSERT INTO VALUES</code></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_persons<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">`</span>名字<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>性别<span class="token punctuation">`</span><span class="token punctuation">,</span>sex<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'杨掉坑'</span><span class="token punctuation">,</span><span class="token string">'Yang Diodio'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021071810301517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>也就是类似于形参实参的写法</p><h4 id="删DELETE"><a href="#删DELETE" class="headerlink" title="删DELETE"></a>删<code>DELETE</code></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_myfriends<span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718105317910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="改UPDATE"><a href="#改UPDATE" class="headerlink" title="改UPDATE"></a>改<code>UPDATE</code></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> t_persons <span class="token keyword">SET</span> age <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Yang Diodio'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718105105733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="清空TRUNCATE"><a href="#清空TRUNCATE" class="headerlink" title="清空TRUNCATE"></a>清空<code>TRUNCATE</code></h4><p>清空整张表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> t_myfriends<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210718105848317.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> t_myfriends<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以达到类似的效果，<br>不过truncate是销毁整张表之后重新创建一个同样格式的空表<br>DELETE是清空表的数据</p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>这里只介绍三种常用的约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>全国人民身份信息<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>身份证号<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>名字<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>驾照证件号<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span><span class="token punctuation">`</span>年龄<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210719200609953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="主键约束PRIMARY-KEY"><a href="#主键约束PRIMARY-KEY" class="headerlink" title="主键约束PRIMARY KEY"></a>主键约束PRIMARY KEY</h4><p>举个例子，当你要在全国范围内找到具体的某个人，用哪条信息找最准确呢？<br>如果是名字，那么重名的有很多，这样一来查询结果就不唯一。<br>如果用身份证号查找，那么就是唯一的。<br>这其实和一维数组类似，这里所说的<strong>主键类似于数组的下标。</strong><br><img src="https://img-blog.csdnimg.cn/20210719200859421.png" alt="在这里插入图片描述"><br>主键约束不能为空，也不能重复，<br>可以联想数组下标，不能重复也不能为空</p><h6 id="自增AUTO-INCREMENT"><a href="#自增AUTO-INCREMENT" class="headerlink" title="自增AUTO_INCREMENT"></a>自增AUTO_INCREMENT</h6><p>这个是<strong>主键约束的附属物</strong><br>只能用于主键约束<br><img src="https://img-blog.csdnimg.cn/20210719202418428.png" alt="在这里插入图片描述"><br>其实也是数组下标的模式，自动地依次递增</p><h4 id="唯一约束UNIQUE"><a href="#唯一约束UNIQUE" class="headerlink" title="唯一约束UNIQUE"></a>唯一约束UNIQUE</h4><p>就是不能重复<br>比如驾驶证号，这个重复了那还得了？<br><img src="https://img-blog.csdnimg.cn/20210719202906857.png" alt="在这里插入图片描述"><br>当然也不是每个人都有驾驶证，<strong>所以可以为NULL</strong></p><h4 id="非空约束NOT-NULL"><a href="#非空约束NOT-NULL" class="headerlink" title="非空约束NOT NULL"></a>非空约束NOT NULL</h4><p>一个人总有年龄和名字吧<br><img src="https://img-blog.csdnimg.cn/20210719203025790.png" alt="在这里插入图片描述"></p><h4 id="默认约束DEFAULT"><a href="#默认约束DEFAULT" class="headerlink" title="默认约束DEFAULT"></a>默认约束DEFAULT</h4><p>这里多加一条<br>…过亿这种毕竟是少数，如果给你十三亿的数据量，给个默认值肯定会减少工作量<br>（但是不知道为什么感觉有点悲伤….）<br><img src="https://img-blog.csdnimg.cn/2021071921004135.png" alt="在这里插入图片描述"></p><h4 id="引用约束CONSTRAINT-FOREIN-KEY-REFERENCES"><a href="#引用约束CONSTRAINT-FOREIN-KEY-REFERENCES" class="headerlink" title="引用约束CONSTRAINT FOREIN KEY REFERENCES"></a>引用约束CONSTRAINT FOREIN KEY REFERENCES</h4><p>直接用其他表里有的数据，不用手动重复地执行添加操作<br><img src="https://img-blog.csdnimg.cn/20210719215033790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CONSTRAINT</span> fk_t_persons_sex <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>性别<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> t_persons<span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是当前表的里 <strong>性别 这个数据<br>是从t_persons这张表的sex里面引用来的</strong>，而这个<strong>引用关系我们命名为fk_t_persons_sex</strong></p><p>其余的约束相对来说不是特别常用，所以这里就不介绍了</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务就是“整体化”，就是如果其中有一条语句失败，事务内所有语句失效</p><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#开启事务</span><span class="token comment">#事务就是“整体化”，就是如果其中有一条语句失败，事务内所有语句失效</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">#模拟借钱</span><span class="token comment">#(更新id = 1的用户的账户</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money  <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">#（更新id = 2的用户的账户</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">#全部成功就提交(COMMIT)</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">#出现失败就取消,</span><span class="token comment">#然后重置到执行前的状态，</span><span class="token comment">#这就叫回滚（ROLLBACK）</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户1借1000块钱给用户2<br>第一步：用户1的账户上先减少1000<br>第二步：用户2的账户上再增加1000</p><p>如果第一步成功，第二步失败，用户1就会凭空少1000块，这合理吗？？？</p><p>但好在我们开始了事务，这使得这个事件是一个整体，一步失败则回滚事件开始之前</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p><strong>原子性：</strong><br>即不可分割，是一个整体，要么全部成功，要么全部失败<br><strong>一致性：</strong><br>一旦失败，操作涉及到的所有数据回会回滚到与操作前一致<br><strong>隔离性：</strong><br>事务开始前的状态和完成后的状态相隔离，不存在中间状态<br><strong>持久性：</strong><br>持久性事务完成之后，它对整个系统的影响是永久的</p><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><h4 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h4><p>就是谁能用这个数据库，并且能用哪些操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token punctuation">`</span>Serio<span class="token punctuation">`</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment">#授权</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> companydb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token punctuation">`</span>Serio<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#撤销权限（和授权一样，在账户重新连接客户端后生效）</span>REMOVE <span class="token keyword">ALL</span> <span class="token keyword">ON</span> companydb<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>Serio<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">#删除用户</span><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token punctuation">`</span>Serio<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，撤销权限后，需要重启一次客户端才可以生效</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图就是一种可以保存下来的虚拟表，说白了就有点像你把某张节选某张表的数据形成一张新的表再打印下来，打印下来这个就是视图.</p><p>可以运用在保存查询结果等方面，<br>然后达到简化查询的目的</p><h4 id="创建视图CREATE-VIEW"><a href="#创建视图CREATE-VIEW" class="headerlink" title="创建视图CREATE VIEW"></a>创建视图CREATE VIEW</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> t_personsInfo<span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> age <span class="token keyword">FROM</span> t_persons<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有了这个视图，当下次你要查询name和age的时候，就不需要select写那么多字了<br>直接一句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_personsInfo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改视图CREATE-OR-REPLACE-VIEW"><a href="#修改视图CREATE-OR-REPLACE-VIEW" class="headerlink" title="修改视图CREATE OR REPLACE VIEW"></a>修改视图CREATE OR REPLACE VIEW</h4><p>顾名思义是创建或者修改视图，总结就是 覆盖</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">VIEW</span> t_personsInfo<span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>名字<span class="token punctuation">`</span> age <span class="token keyword">FROM</span> t_persons<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然这也还有其他修改方式</p><h4 id="修改视图ALTER-VIEW"><a href="#修改视图ALTER-VIEW" class="headerlink" title="修改视图ALTER VIEW"></a>修改视图ALTER VIEW</h4><p>这个依旧是覆盖</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#修改视图2</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> t_personsInfo<span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>名字<span class="token punctuation">`</span> age <span class="token keyword">FROM</span> t_persons<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除视图DROP-VIEW"><a href="#删除视图DROP-VIEW" class="headerlink" title="删除视图DROP VIEW"></a>删除视图DROP VIEW</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> t_personsInfo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除也没什么好说的</p><h4 id="视图的性质总结"><a href="#视图的性质总结" class="headerlink" title="视图的性质总结"></a>视图的性质总结</h4><p>形式上与表一样，主要区别在于 <strong>增 删 改</strong>，<br>表的增删改比较自由，<strong>但是视图只能通过整体覆盖的形式来进行增删改</strong><br>视图常作为表的节选内容的副本存在，方便用户<strong>查</strong>找数据<br>但是并不会从查询速率上优化，<strong>只是单纯地减少代码量</strong></p><p>另外，如果视图包含有 由 聚合函数、DISTINCT、GROUP BY、HAVIG UNION等语句处理过 的结果，那么视图不可更新</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/02/20/linux/"/>
      <url>/2023/02/20/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天下班回来至少都是十点过了，但是还是想给自己充充电。</p><p>但是为什么是学Linux呢？一方面是觉得作为一个程序员嘛，多少还是得接触一下计算机三大浪漫之一——我想知道为什么大家说他是浪漫的；另一方面是想做一个牛逼哄哄的项目，将所有技术整合到其中，不得不从Linux开始学习，为服务器的相关操作打下基础。</p><p>这期间也读到了一些历史事迹，真的很有意思，从肯·汤姆森、丹尼斯·里奇的Unix，到理查德·斯托曼的自由软件基金会，再到李纳斯·托瓦兹的Linux——这一段历史真是相当震撼人心，我们阅读这些伟人的故事后，就像是灵魂得到了洗涤，一时间薪资、内卷等等现实的问题就被抛到一边了，只留下一种激动的心情难以平复——我想Linux的浪漫至少得有一半来自于这个传奇作者的个人魅力。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Linux发展史"><a href="#Linux发展史" class="headerlink" title="Linux发展史"></a>Linux发展史</h3><blockquote><p><strong>Unics时代（1965）</strong></p><p>1965年，贝尔实验室、麻省理工、奇异公司等联合发起<strong>Multics计划（Multiplexed Information and Computing System）</strong>,期望让一个主机能支持几百个终端。后来由于资金等缘故失败告终。</p><p>当时的其中一名研究人员就是<strong>Ken Thompson（肯·汤姆森）</strong>。<br>Thompson非常喜欢自己基于<code>Mutilcs</code>实现的游戏<code>star travel</code>，(为了能继续玩这款游戏)，1969年，他利用妻子外出度假的四周，用B语言实现了一个由<code>Mutilcs</code>计划的系统简化而来的操作系统核心程序（包括内核，文件系统，编辑器，编译器等），但最终也只能支持两个终端，因此被戏称为**Unics(Uniplexed Information and Computing System)**。 </p></blockquote><blockquote><p><strong>Unix时代（1973）</strong></p><p>Unics被广泛流传，后来经过贝尔实验室多次改进——特别是<strong>Dennis Ritchie（丹尼斯·里奇，C语言之父）和Thompson的合作</strong>，最终用C语言实现了真正实现了支持多个终端的操作系统，即<strong>Unix</strong>。</p></blockquote><blockquote><p><strong>GNU时代（1983）</strong></p><p>后来Unix又被广泛传播，出现了许多分支版本，比如<strong>Richard Stallman（理查德·斯托曼，自由软件基金会创始人）</strong>组织研发的——<strong>GNU</strong>。</p><p>GNU是<strong>GNU’s Not Unix</strong>的递归缩写（GNU-NU-U），发音被人为约定为/‘gnu:/，并且其目的是建立一个<strong>完全自由并且开源</strong>的操作系统，所以有人将其翻译为<strong>革奴计划</strong>。</p><p>GNU有着极为深远的影响，推动了操作系统发展的同时，还推动了开源协议<strong>GPL（General Public License）</strong>的发展，该协议规定：<strong>基于GPL项目的二次开发必须开源</strong>——<strong>允许交易、允许改动，但是必须传递自由</strong>。</p></blockquote><blockquote><p><strong>Linux时代（1991）</strong></p><p>芬兰赫尔辛基大学的大学生<strong>Linus Torvalds（李纳斯·托纳斯）</strong>，用bash和gcc就造出了<strong>Linux内核</strong>，并在GNU的感召下，将Linux以GPL协议开源，以一己之力推动了整个计算机事业的发展。</p><p>关于他，请一定要去读一下这一篇文章<a href="https://zhuanlan.zhihu.com/p/446937900">知乎上看到的一篇关于李纳斯的文章</a>，有机会还可以看看他的自传<strong>《乐者为王》</strong></p><p>开源的<strong>LInux内核</strong>逐步被各大社区、组织机构甚至个人根据不同的需求改进，最终出现了如今无数版本百花齐放的局面，常见的版本有：Centos、Ubuntu、Deepin、RedHat、Debian、Kali Linux等等</p></blockquote><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><blockquote><p>ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p></blockquote><p>参数：<br>-l : 展示详细信息;<br>-h : 人性化的显示详细信息;<br>-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br>ll 等价于ls -la</p><blockquote><p>pwd: 显示当前位置;</p></blockquote><blockquote><p>cd: cd + 路径;</p></blockquote><p>cd 默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录;</p><blockquote><p>cp: cp 路径1 路径2;</p></blockquote><p>(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);<br>eg:<br>cp a/tmp.txt b (复制一份到粘贴到b里面)；<br>cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)<br>如果复制文件夹后面加-r<br>eg: cp a b -r; (将a复制一份粘贴到b里面)</p><ul><li>表示本文件夹里所有文件</li></ul><blockquote><p>mkdir a :创建文件夹a</p></blockquote><p>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)</p><p>eg:<br>mkdir /home/acs/a/b (在根目录下创建文件)<br>mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</p><blockquote><p>history: 显示历史用过的指令;</p></blockquote><blockquote><p>rm: 删除,</p></blockquote><p>rm xxx: 删除某一文件;<br>rm xxx -r: 删除某文件夹;(支持正则表达式);</p><p>eg:<br>rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)<br>rm .txt (删除所有txt文件)<br>rm a/ (删除a里面所有东西)<br>rm /* -rf (删除所有文件)</p><p>windows彻底删除文件:Shift + Delete;</p><blockquote><p>mv: mv xxx yyy (剪切+ 粘贴)</p></blockquote><p>eg:<br>mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)<br>mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)<br>mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</p><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p><blockquote><p>cat: cat xxx(查看xxx文件);</p></blockquote><p>eg:<br>cat a/tmp.cpp(查看tmp.cpp文件)</p><h3 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h3><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><p>个人更喜欢vim…所以这个先跳过吧</p><blockquote><p>作用<br>1.分屏：可以在一个开发框里分屏<br>2.允许terminal在连接断开之后可以继续运行，让进程不会因为断开连接而中断</p><p>一个tmux可以有一堆session<br>每个sesion可开很多的window<br>每个window可以开很多pane<br>每个pane可以打开一个shell交互</p></blockquote><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>命令行模式下的文本编辑器，根据扩展名判别编程语言，实现代码缩进、代码高亮</p><p><strong>基本操作</strong></p><blockquote><p>1.i：进入编辑模式</p><p>2.esc：进入一般命令模式</p><p>3.小键盘可以操作前后左右<br>注：在命令模式下：vim会卡在最后一个字符前面，编辑模式会卡在最后一个字符，不像win，移动到最后会直接换行<br>同样的，无论是什么模式，往左移动到开头就会停下</p><p>4.光标的移动操作：n<space> n是数字，光标会自动右移n个字符<br>一般命令模式下：0/home 将光标移动到本行开头<br>$/End 将光标移动到本行结尾<br>G:光标移动到最后一行</space></p><p>5.具体到哪一行的操作：<br>1).n/nG:表示想去具体到哪一行（n是到某一行的下面，nG是直达）<br>2).gg:到达第一行<br>3).n<enter> 向下跳n行</enter></p><p>6.查找与修改字符串的操作：<br>1)./word:在命令行模式下，光标之下寻找第一个值为word的字符串<br>2).?word:在光标之上第一个值为word的字符串<br>3).n:重复前一个查找操作<br>4).N:反向查找，也就是说前一个命令向前找，此命令下向后找<br>5).:n1,n2s/word1/word2/g:n1,n2为数字，在第n1与n2之间找word1，并替换为word2<br>:1,$s/word1/word2/g: 将全文的word1换成word2<br>:1,$s/word1/word2/gc:在每一次替换的时候都会让用户进行确认</p><p>7.:noh 关闭所查找的关键词的高亮</p><p>8.选中与删除<br>v:选中文本,按两下esc取消<br>d:删除选中文本(其实有剪切的特性)<br>dd:删除整行</p><p>9.复制与粘贴：<br>y:复制(文本)<br>p:在光标所处位置的下一行或下一个位置(通常当光标在两边时)粘贴<br>yy:复制当前行</p><p>10.撤销:u:撤销<br>ctrl+r:取消撤销<br>注:在windows里，ctrl+z撤销，ctrl+shift+z取消撤销</p><p>11.&gt; 将选中的文本整体向右移动<br>&lt; 将选中的文本整体向左移动</p><p>12.保存与退出：<br>:w保存<br>:w! 强制保存<br>一般命令模式下:按下ESC，按q退出<br>:q! 强制退出（不保存）<br>:wq 保存并退出<br>:wq! 强制保存退出</p><p>13.行号的显示与隐藏:<br>:set nonu 隐藏行号<br>:set nu 显示行号</p><p>14.paste模式:<br>为什么:当要粘贴过来的代码很长时，命令可能会失效，占用很大带宽，导致出现多重缩进<br>:set paste取消代码缩进，设置成粘贴模式<br>:set nopaste开启代码缩进</p><p>15.全选<br>ggdG 删除全部内容<br>gg=G 将全文格式化<br>ggyG 复制全部内容</p><p>16.vim的卡死处理<br>ctrl+q:当vim卡死时，可取消当前正在执行的命令</p><p>17.异常处理:当前进程出现冲突时，会出现异常<br>解决方法：1).找到正在多个打开的文件程序，并关掉，保证同一个进程只有同一个文件能打开<br>2).问题：当一个进程不小心被其他进程杀掉，当再打开main.cpp时，此时如果出现一个.swp缓存文件时会报错<br>解决：在没有任何一个进程打开该文件时，将.swp文件删掉即可</p></blockquote><h2 id="基础shell"><a href="#基础shell" class="headerlink" title="基础shell"></a>基础shell</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="shell的定义"><a href="#shell的定义" class="headerlink" title="shell的定义"></a>shell的定义</h4><blockquote><p>我们有很多方式与计算机交互，这些交互的实现得益于接口——能够使外部操作内部的抽象结构，比如鼠标点击，这就是计算机留给用户操作自身的一种接口。</p><p><strong>Shell，是一种文本接口，是一种编程环境，也是命令语言、命令解释程序及程序设计语言的统称，更是我们通过命令行与操作系统沟通的语言</strong>，常说的CMD其实是指的<code>Command Shell</code>，而GitBash中的Bash是指的<code>Bourne Again Shell</code>，当然还有<code>zsh</code>、<code>K Shell</code>、<code>C Shell</code>和<code>Bourne Shell</code>等等。Shell可</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p></blockquote><p>这里需要着重强调一下<strong>Shell</strong>和<strong>Linux命令</strong>的关系:</p><blockquote><p>有了一定的逻辑和过程，而命令行只是单一的操作。<br>并且shell是面向过程的，可以说是Linux命令集的概称。<br>也可以从Shell作为一种编程环境的角度出发，将其理解为一个<strong>命令处理器</strong>和命令解释器，读入用户输入的Linux命令再进行解释后才交给操作系统执行。</p></blockquote><h4 id="终端的定义"><a href="#终端的定义" class="headerlink" title="终端的定义"></a>终端的定义</h4><p>而我们平时提到的<strong>终端</strong><code>terminal</code>，在几十年前是一种物理实体——我理解的是发挥着今天的显示屏的作用，而如今常见的形式就是一个没有实体的黑窗口，其和shell及linux的关系是：</p><blockquote><p><strong>通过terminal来书写shell，然后操作linux</strong></p></blockquote><p>接下来我们以最为常见的<code>bash</code>为例，<code>bash</code>文件扩展名是<code>sh</code>，且第一行为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（但是好像不写这个也没什么问题）</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><blockquote><p>使用<code>#</code>符号进行单行注释</p></blockquote><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><blockquote><p>使用<code>:&lt;&lt;EOF</code>和<code>EOF</code>进行多行注释（有时不加前面的冒号也行），<br>其中<code>EOF</code>可以替换成其他任何字符</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><blockquote><p>表示字符串时，<strong>单双引号都可以，甚至不写引号也可以</strong></p><p>其他情况需要使用<code>$</code>或<code>${}</code>，根据字符串拼接情况选择性使用</p></blockquote><h4 id="修饰词"><a href="#修饰词" class="headerlink" title="修饰词"></a>修饰词</h4><p>直接看看实际脚本，并回忆一下之前我们提到的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">123</span> <span class="token comment"># 注意不能随便加空格，会报错</span><span class="token builtin class-name">readonly</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">456</span><span class="token builtin class-name">echo</span> 这是a:<span class="token variable">$a</span><span class="token builtin class-name">unset</span> b<span class="token comment"># 删除变量，可以看做是置为空串</span><span class="token builtin class-name">echo</span> 这是b:<span class="token variable">$b</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">789</span> :<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>全局变量，也叫环境变量，子进程可访问相反，普通的变量则叫做自定义变量 或 局部变量<span class="token operator">!</span><span class="token builtin class-name">declare</span> -x c <span class="token comment"># 将全局变量设置为局部变量</span><span class="token builtin class-name">echo</span> 这是c的长度<span class="token variable">${<span class="token operator">#</span>c}</span>, 这是c的前两个字符<span class="token variable">${c<span class="token operator">:</span>0<span class="token operator">:</span>2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果是什么？</p><blockquote><p>这是a:123<br>./test2.sh: line 5: unset: b: cannot unset: readonly variable<br>这是b:456<br>这是c的长度3,这是c的前两个字符78</p></blockquote><p>因为bash是逐行解释的脚本语言，这里报错了也没有影响到后续的执行</p><h4 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h4><p>默认变量大概就是一种约定式语法——并未声明过却可以使用的变量：</p><p>执行shell脚本的时候，可以向该脚本传递参数，这些参数使用如下形式的占位符表示其将被使用的位置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> 这是文件名: <span class="token variable">$0</span><span class="token builtin class-name">echo</span> 这是第一个参数: <span class="token variable">$1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们用下述语句执行这个脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 没错这个文件的名字是test3.sh</span>./test3.sh <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果:</p><blockquote><p>这是文件名: ./test3.sh<br>这是第一个参数: 1</p></blockquote><p>没错，可以传不定参数（如果不传，则参数值默认为空串）</p><p>其他默认变量:</p><blockquote><p><strong>$#</strong><br><code>#</code>符号总是长度的意思，所以这里也是传参个数的意思</p><p><em><em>$</em> 或 $@</em>*<br><code>*</code>符号总是通配符，所以这个是列出所有传参，<br>至于后者，作用一样，只是格式不太一样，列出的参数带有双引号</p><p><strong>$$</strong><br>当前脚本进程的PID</p><p><strong>$?</strong><br>上一条脚本的退出状态（exit code，为0则是正常）</p><p><strong>$(cmd) 或 `cmd`</strong><br>返回cmd的stdout，区别是前者可嵌套，后者不可</p><p><strong>$PATH</strong><br>环境变量</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>直接看代码和注释吧:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> three<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${arr}</span> <span class="token comment"># 1 和c语言规则一样，首地址</span><span class="token builtin class-name">echo</span> <span class="token variable">${arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span> <span class="token comment"># 1 2 three</span>arr<span class="token punctuation">[</span>-1<span class="token punctuation">]</span><span class="token operator">=</span>-1 <span class="token comment"># 访问末尾最后一个</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span> <span class="token comment"># 可以动态添加，但是会压缩中间未使用的空间</span><span class="token builtin class-name">echo</span> <span class="token variable">${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token comment"># 0 2 -1 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><h4 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h4><p>可以类比MC指令中的<code>excute</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello World"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length $str<span class="token variable">`</span></span>  <span class="token comment"># 报错，这样的表达是不正确的，双引号表示expr命令的参数</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">${str}</span>"</span><span class="token variable">`</span></span> <span class="token comment"># length求长度，输出11 </span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">${str}</span>"</span> abc<span class="token variable">`</span></span> <span class="token comment"># index 求 abc三个字符中单个字符最早出现的下标，输出7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">${str}</span>"</span> <span class="token number">1</span> <span class="token number">5</span><span class="token variable">`</span></span> <span class="token comment"># substr切割，类比js的splice，输出Hell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>之前就注意到了，变量直接初始化是自动处理为字符串，要进行运算的话就需要像下面这样</p><p>注意，shell中的很多符号都已经有了定义，所以需要加上<code>\</code>来定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> a + b <span class="token comment"># 输出字符串 a + b</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> a + b<span class="token variable">`</span></span> <span class="token comment"># 报错，没有数字参数</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span> <span class="token comment"># 输出 7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a * $b<span class="token variable">`</span></span> <span class="token comment"># 报错，语法错误（因为*需要转义）</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span>$a + $b<span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token number">20</span> % <span class="token number">6</span><span class="token variable">`</span></span> <span class="token comment"># 报错，没有数字参数</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> $a + $b <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token number">20</span> % <span class="token number">6</span><span class="token variable">`</span></span> <span class="token comment"># 输出2，运算符两边都</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">3</span> <span class="token punctuation">\</span><span class="token operator">&lt;</span> <span class="token number">4</span><span class="token variable">`</span></span> <span class="token comment"># 输出1（竟然不是输出True）</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">3</span> <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token variable">`</span></span> <span class="token comment"># 报错，这里应该写作 \&gt;\= </span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">0</span> <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token number">5</span><span class="token variable">`</span></span> <span class="token comment"># 输出5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span><span class="token operator">&amp;</span> <span class="token number">3</span><span class="token variable">`</span></span> <span class="token comment"># 输出2， &amp;运算是两个都为非0则输出第一个</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">1</span> <span class="token punctuation">\</span><span class="token operator">=</span> True<span class="token variable">`</span></span> <span class="token comment"># 输出0，=和==同义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">1</span> <span class="token punctuation">\</span><span class="token operator">=</span><span class="token punctuation">\</span><span class="token operator">=</span> <span class="token number">1</span><span class="token variable">`</span></span> <span class="token comment"># 输出1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h3><p>就是从stdin读入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">read</span> a <span class="token comment"># 等待输入a</span><span class="token builtin class-name">echo</span> 这是输入的内容a:<span class="token variable">$a</span><span class="token builtin class-name">read</span> -p <span class="token string">"请在5秒内输入b"</span> -t <span class="token number">5</span> b <span class="token comment"># 基于一个提示信息，并且只等待5秒</span><span class="token builtin class-name">echo</span> <span class="token variable">$b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有在5s之内进行输入，结束等待，继续往后执行，这样b就会输出空值</p><p>还有其他参数:</p><blockquote><p>-n 5<br>限定只能输入5个字符</p><p>-d 字符<br>读取到指定字符时结束输入</p></blockquote><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>除了直接输出内容之外，也可以使用转义字符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"I'm Carbon, <span class="token entity" title="\n">\n</span>"</span> <span class="token comment"># -e表示使用转义字符</span><span class="token builtin class-name">echo</span> -e <span class="token string">"Hello <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># \c表示，不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><blockquote><p>I’m Carbon,</p><p>Hello World</p></blockquote><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>最简单的使用方式是像下面这样:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'hello '</span> <span class="token operator">&gt;</span> sayhi.txt<span class="token builtin class-name">echo</span> <span class="token string">'world'</span> <span class="token operator">&gt;&gt;</span> sayhi.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><blockquote><p>其中<code>&gt;</code>是覆盖写入，<code>&gt;&gt;</code>是追加写入</p></blockquote><h3 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h3><p>和C/C++的格式化输出是一个意思</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">"there should be something waiting for %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"you"</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span><span class="token builtin class-name">printf</span> <span class="token string">"everything should have a result like: %d * %d = %d"</span> <span class="token variable">$a</span> <span class="token variable">$b</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span> <span class="token builtin class-name">printf</span> <span class="token string">"%10.2f."</span> <span class="token variable">$a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><blockquote><p>there should be something waiting for you<br>everything should have a result like: 2 * 3 = 6<br>      2.00.</p></blockquote><p>唯一需要注意的是，进行小数点和空格对齐的时候，末尾要加一个点</p><h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3><h4 id="判断逻辑"><a href="#判断逻辑" class="headerlink" title="判断逻辑"></a>判断逻辑</h4><p>这里指的是<code>&amp;&amp;</code>和<code>||</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">echo</span> a <span class="token operator">&amp;&amp;</span> b<span class="token builtin class-name">echo</span> a <span class="token operator">||</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二者都具有<strong>短路原则</strong>，<code>&amp;&amp;</code>前一个值为假时，直接忽略</p><p>但是有个非常需要重视的点是：</p><blockquote><p>这里<strong>0代表真，非0代表假</strong></p></blockquote><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> -lt <span class="token number">6</span> <span class="token comment"># \&lt; 也可以写作 -lt</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span>The result of the last command:<span class="token variable">$?</span>"</span> <span class="token comment"># $?表示上一个命令的结果或者exit code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2小于6为真，所以输出结果是0:</p><blockquote><p>The result of the last command:0</p></blockquote><p>除此之外，还可以：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> 变量1 -eq 变量2 <span class="token comment"># 判断是否相等</span><span class="token builtin class-name">test</span> 变量1 -ne 变量2 <span class="token comment"># 判断是否不等</span><span class="token builtin class-name">test</span> 变量1 -ge 变量2 <span class="token comment"># 判断是否大于等于</span><span class="token builtin class-name">test</span> -e 文件名 <span class="token comment"># 判断文件是否存在</span><span class="token builtin class-name">test</span> -f 文件名 <span class="token comment"># 判断是否为文件</span><span class="token builtin class-name">test</span> -d 文件名 <span class="token comment"># 判断是否为目录</span><span class="token builtin class-name">test</span> -r 文件名 <span class="token comment"># 判断文件是否可读</span><span class="token builtin class-name">test</span> -w 文件名 <span class="token comment"># 判断文件是否可写</span><span class="token builtin class-name">test</span> -s 文件名 <span class="token comment"># 判断文件是否非空</span><span class="token builtin class-name">test</span> -x 文件名 <span class="token comment"># 判断文件是否可执行</span><span class="token builtin class-name">test</span> -z 字符串 <span class="token comment"># 如果为空则返回真</span><span class="token builtin class-name">test</span> -n 字符串 <span class="token comment"># 如果为非空则返回真</span><span class="token builtin class-name">test</span> 字符串 <span class="token operator">==</span> 字符串 <span class="token comment"># 判断是否相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要判断多个逻辑是否同时成立或者至少成立一个，那么不应该使用<code>&amp;&amp;</code>和<code>||</code>，因为这里的意义并不和我们过去所熟知的那样一致——这里我们应该是使用;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -r test.txt -a -w test.txt <span class="token comment"># -a 就是 and</span><span class="token builtin class-name">test</span> -r test.txt -o -w test.txt <span class="token comment"># -o 就是 or</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><p><code>test</code>可以简写为<code>[]</code>，注意<code>[]</code>中的每一项都要空格隔开，并且变量和常量都最好用引号包裹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">[</span> <span class="token string">"张三"</span> <span class="token operator">==</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外还有<code>[[]]</code>可以支持更多特性</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if式"><a href="#if式" class="headerlink" title="if式"></a>if式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">66</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">60</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -gt <span class="token number">50</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>在范围内<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token number">66</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -gt <span class="token number">66</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>不是66<span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>就是66<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><blockquote><p>66就是66</p></blockquote><h4 id="switch式"><a href="#switch式" class="headerlink" title="switch式"></a>switch式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">233</span><span class="token keyword">case</span> <span class="token variable">$c</span> <span class="token keyword">in</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token variable">${c}</span>等于100<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${c}</span>等于233<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${c}</span>是其他值<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><blockquote><p>233等于233</p></blockquote><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for式"><a href="#for式" class="headerlink" title="for式"></a>for式</h4><p>基本语法大概是像下面这样的，写法很多，推荐是写法4，能适应大部分情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment"># for式1</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span>-&gt;<span class="token entity" title="\c">\c</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token comment"># for式2</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">15</span><span class="token variable">)</span></span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span>-&gt;<span class="token entity" title="\c">\c</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span><span class="token comment"># for式3</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span>-&gt;<span class="token entity" title="\c">\c</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span><span class="token comment"># for式4</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span>-&gt;<span class="token entity" title="\c">\c</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><blockquote><p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;<br>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10-&gt;11-&gt;12-&gt;13-&gt;14-&gt;15-&gt;<br>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10-&gt;<br>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10-&gt;</p></blockquote><h4 id="while式"><a href="#while式" class="headerlink" title="while式"></a>while式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> -p <span class="token string">"输入一个值吧:"</span> someNumber<span class="token keyword">do</span><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> someNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">`</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span> <span class="token entity" title="\c">\c</span>"</span><span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们输入10和20：</p><blockquote><p>输入一个值吧:10<br>2 4 6 8 10<br>输入一个值吧:20<br>2 4 6 8 10 12 14 16 18 20</p></blockquote><h4 id="util式"><a href="#util式" class="headerlink" title="util式"></a>util式</h4><p>下面这样就是直到用户输入OK才会停止</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">until</span> <span class="token punctuation">[</span> “<span class="token variable">$isOK</span>” <span class="token operator">==</span> <span class="token string">"OK"</span> <span class="token punctuation">]</span><span class="token keyword">do</span><span class="token builtin class-name">read</span> -p <span class="token string">"R U OK?"</span> -t <span class="token number">5</span> isOK<span class="token builtin class-name">echo</span> -e “status: <span class="token variable">$isOK</span><span class="token punctuation">\</span>n”<span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"U R <span class="token variable">$isOK</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然，个人发现输入总会带上一个换行符….所以这里总是匹配不上，至于到底怎么取消这个换行符，暂时还没去试过</p></blockquote><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>大体和C/C++相同，略有区别地是<code>break</code>是在<code>switch</code>式中并没有作用</p><h4 id="死循环处理"><a href="#死循环处理" class="headerlink" title="死循环处理"></a>死循环处理</h4><p>使用<code>top</code>找到进程PID，然后<code>kill -9 PID</code>结束进程即可</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment"># 关键字function是可省的</span><span class="token keyword">function</span> <span class="token function-name function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span>fun1 <span class="token comment"># 这是调用函数</span><span class="token builtin class-name">echo</span> <span class="token string">"output: <span class="token variable"><span class="token variable">$(</span>fun1<span class="token variable">)</span></span>"</span> <span class="token comment"># 这是拿到函数在stdout的输出</span><span class="token builtin class-name">echo</span> <span class="token string">"return: <span class="token variable">$?</span>"</span> <span class="token comment"># 拿到exit code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bash的函数返回值很有特点，它的返回值是上文经常提到的<code>exit code</code>，取值范围是[0, 255]，其中0表示正常返回</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>在函数同一行输入其他内容，将作为参数传递，在其内部使用<code>$0</code>,<code>$1</code>,<code>$2</code>等分别访问到</p><p>注意，递归不是使用<code>$0</code>——这只是个字符串</p><p>直接书写函数名后面跟上参数即可实现递归</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>使用关键字<code>local</code>声明的变量即为函数局部变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">123</span><span class="token builtin class-name">echo</span> a<span class="token punctuation">}</span>fun1<span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token comment"># 输出空串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两者都是返回<code>exit code</code>，但是<code>exit</code>是结束整个进程，return仅结束当前函数</p><h3 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h4><p>一个进程默认会打开三个文件描述符: </p><blockquote><p><strong>stdin</strong><br>标准输入</p><p><strong>stdout</strong><br>标准输出</p><p><strong>stderr</strong><br>标准错误输出</p></blockquote><p>可以将这三个重定向到其他文件中，大概长这样:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"hi"</span> <span class="token operator">&gt;</span> text.txt<span class="token builtin class-name">echo</span> <span class="token string">" world"</span> <span class="token operator">&gt;&gt;</span> text.txt<span class="token builtin class-name">read</span> text <span class="token operator">&lt;</span> text.txt<span class="token builtin class-name">echo</span> <span class="token variable">$text</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以组合一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test14.sh <span class="token operator">&lt;</span> text.txt <span class="token comment"># test14.sh内部的read语句会接受其中的内容</span>text.txt <span class="token operator">&gt;</span> res.txt <span class="token comment"># 上述两个合起来，简写为:</span>./test14.sh <span class="token operator">&lt;</span> text.txt <span class="token operator">&gt;</span> res.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h4><p>其实就是类似于import其他代码动态执行，两种写法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> 文件名<span class="token builtin class-name">source</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="简单木马实战"><a href="#简单木马实战" class="headerlink" title="简单木马实战"></a>简单木马实战</h4><p>正好这两天在上信息安全课，学习了一点勒索病毒的原理后深受启发——让我们实践一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">deadTextDir</span><span class="token operator">=</span><span class="token string">"TextsKilledByCarbonSerio'sBashScript"</span><span class="token function-name function">killer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">mkdir</span> <span class="token variable">$deadTextDir</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> *.txt<span class="token keyword">do</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$i</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token function">cp</span> <span class="token variable">$i</span> <span class="token string">"<span class="token variable">$deadTextDir</span>/<span class="token variable">$i</span>"</span><span class="token function">mv</span> <span class="token variable">$i</span> <span class="token variable">${i<span class="token operator">%</span>.txt}</span>.CarbonSerio<span class="token comment"># rm $i</span><span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$*</span><span class="token keyword">do</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$i</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">!=</span> <span class="token variable">$deadTextDir</span> <span class="token punctuation">]</span>  <span class="token keyword">then</span><span class="token builtin class-name">cd</span> <span class="token variable">$i</span>killer <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token keyword">fi</span><span class="token keyword">done</span><span class="token punctuation">}</span>killer <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面写了很多多余的代码，主要是为了熟悉语法….</p><p>当然这个没有什么破坏性，主要是递归改变文件的扩展名会比较烦人——当然，为了便于恢复，这里把每一级目录下修改前的文件都放到了一个文件夹中</p><blockquote><p>有了这个思路，我们还可以用echo覆盖掉文件原本的内容</p><p>甚至还可以更进一步….</p></blockquote><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><blockquote><p>CommandLine Uniform Resource Locator，其实就是CommandLine URL，用命令行来操作统一资源定位符，<br>通常用于文件的传输，支持FTP(S) HTTP(S)等协议</p></blockquote><h4 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a><strong>发送GET请求</strong></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> http://www.baidu.com/s?wd<span class="token operator">=</span><span class="token number">1024</span><span class="token comment"># 不出意外的话,你会收到一堆html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a><strong>发送POST请求</strong></h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -X POST -d <span class="token string">'wd=1024'</span> http://www.baidu.com/s<span class="token comment"># 虽然这个不会得到什么实际的结果，但是至少跑得通</span><span class="token comment"># 主要是一时之间我也有什么可以POST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-X</code>或者<code>--request</code>代表请求方法（默认是GET，所以GET请求可以省略这个）， <code>-d</code>和<code>--data</code>代表请求体</p><h4 id="配置请求头"><a href="#配置请求头" class="headerlink" title="配置请求头"></a><strong>配置请求头</strong></h4><p><code>-h</code>或者<code>--header</code>当然是请求头啦</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -H <span class="token string">"Content-Type: application/json"</span> -H <span class="token string">"Accept: */*"</span> -X POST -d<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有意思的是，写成键值对是添加请求头；<br>但如果只写一个键，那么代表移除这个请求头</p><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a><strong>配置参数</strong></h4><p>一般是输出到一个文件内</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -o res.html http://www.baidu.com/s?wd<span class="token operator">=</span><span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-o</code>就是<code>output</code>代表输出位置<br>大写的<code>-O</code>则是直接把文件写入到当前目录下同名的文件中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -O res.html http://www.baidu.com/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有<code>-s</code>安静模式不显示报错和进度，<code>-#</code>显示进度条，以及上传文件和断点重传等操作，不过这些就留给大家自行学习了</p><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><p>除了<code>curl</code>,我们还有<code>wget</code>等命令，但是它们本质上是一样的，所以此处不再做详细介绍</p><h4 id="勒索木马实战"><a href="#勒索木马实战" class="headerlink" title="勒索木马实战"></a>勒索木马实战</h4><p>如果有网络请求了，那么我们就可以在服务器上运行自己的代码，然后潜入的木马运行时向该服务器发起请求——这样里应外合就能达到一些更加绝妙的效果：</p><p>我在服务器上部署了一个Node服务器，写了一个简单的加密算法：</p><blockquote><p><strong>加密前</strong><br>泗水亭长笑尽万般随意，却是半生酒气金戈铁骑<br><strong>加密后</strong><br>洗簵仭��筑氾乇鈭雏焐ｌ捵景捋畟ꅓ汔ꇒ扈꓂髑</p></blockquote><h4 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h4><p>严格来说，这个部分和shell或者linux关系不大，因为这里主要是依赖于第三方工具的</p><p>但是还是把它们单独列出来，目的是为了提醒我自己——别忘了命令行有多么强大：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m http.server <span class="token number">8000</span>npx http-server -p <span class="token number">8001</span>php -S localhost:8002systemctl start apache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果（如果系统已经提前配置好了环境的话）</p><blockquote><p>Serving HTTP on :: port 8000 (http://[::]:8000/) …<br>…<br>(略)</p></blockquote><p>没错！这样就开启了本地服务器（路径是终端当前所处的目录下），真是太棒了对吧</p><h3 id="ssh协议"><a href="#ssh协议" class="headerlink" title="ssh协议"></a>ssh协议</h3><p>这一部分本想放到网络请求章节内，但奈何要素过多，内容异常丰富，所以单独提炼作为一章</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>我们又迎来了一位重量级选手，它就是<code>ssh</code>——不过那是什么？</p><blockquote><p><code>ssh</code>，即<code>Secure Shell</code>，专为远程登录会话和其他网络服务提供安全的协议</p><p>相较于传统(比如FTP)明文传输的方式，建立在应用层的SSH通过对网络数据进行加密和验证，使得数据传输更安全</p></blockquote><h4 id="登录远程服务器"><a href="#登录远程服务器" class="headerlink" title="登录远程服务器"></a>登录远程服务器</h4><p>带上服务器的公网IP，还有你的服务器用户名，马上就要启程了:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一切顺利，那么我的勇士，你将看到这样一段话：</p><blockquote><p>The authenticity of host ‘xxx.xxx.xxx.xxx (yyy.yyy.yyy.yyy)’ can’t be established.<br>ECDSA key fingerprint is SHA256:zzzzzzzzzzzzz<br>Are you sure you want to continue connecting (yes/no/[fingerprint])?</p></blockquote><p>当然是选择<code>yes</code>啊——此时，该服务器的信息将被存入你主机<code>ssh</code>文件夹下的<code>known_hosts</code>文件中，下次访问就不会再出现这段文字了</p><p>然后就是紧张刺激的输入密码环节了，linux下的密码输入过程都是不会显示输入内容的：</p><blockquote><p>[username]@[ip]’s password:(这是一段看不见的密码)</p></blockquote><p>如果登录成功，你将会看到:</p><blockquote><p>[[username]@[systemName] ~]#</p></blockquote><p>注意了，这里可是<code>#</code>——也就是至高无上的root用户！<br>一般用户则是用<code>$</code>表示的</p><p>另外，要断开连接的话，使用<code>ctrl+d</code>即可</p><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><p>哎呀，服务器IP好难记哦，所以我们在<strong>本地</strong>的<code>~/.ssh/config</code>配置一下</p><blockquote><p>啥？你没有这个文件？那直接touch一个就好了</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Host DeepDreamHostName xxx.xxx.xxx.xxxUser yyy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后，再让我们连接一次服务器:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> DeepDream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单多了吧~</p><h4 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h4><p>先来点基础概念：</p><blockquote><p><strong>密钥</strong><br>也有写作<strong>秘钥</strong>的，反正意思就是<strong>秘密的钥匙</strong>，怎么写好像都有道理；更无语的是，钥可以读作“月”，所以读作“蜜月”也是正确的….</p><p><strong>私钥</strong><br>没有公开的秘钥</p><p><strong>公钥</strong><br>公开的秘钥</p></blockquote><p>估计大家都知道一些基础，那直接开快车上高速了——<strong>双钥密码体系</strong>，解决了<strong>单钥密码体系</strong>中安全信道建立成本太高的问题</p><blockquote><p>安全信道的作用是<strong>抗窃听</strong>，并且保证<strong>交互两方身份可信</strong></p></blockquote><p>双钥密码体制中常见的一种加密算法就是<strong>RSA算法</strong>：</p><blockquote><p><strong>加密: secStr = oriStr ^ E % N</strong></p><p>secStr表示密文，oriStr表示原文, E和N是两个较大的常数,<br>其中<strong>E将作为秘钥，此处用于加密(encode)</strong></p><p><strong>解密: oriStr = secStr ^ D % N</strong><br>这里的N和加密时使用的是同一个值，而<strong>D将作为公钥，此处用于解密(decode)</strong></p><p>通常，我们把这样的秘钥、公钥完整的表达为**(E，N)<strong>和</strong>(D，N)<strong>，密钥对则写作</strong>(E，D，N)**</p><p>这里通常使E和D的值非常大，以便于对N取模板能得到相同的结果（这样一手操作，除了穷举法之外，我个人是想不到任何破解方法了——但是这里也说了，值非常大，这样使破解所需的算力开销非常大）</p></blockquote><p>那么问题来了，我们加密的时候怎么去确定E和D的值，总不能也是穷举吧？计算方式大致如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token constant">N</span> <span class="token operator">=</span> 大质数p <span class="token operator">*</span> 大质数q<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">lcmFunc</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lcmFunc 求最小公倍数</span><span class="token keyword">let</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token operator">?</span> <span class="token comment">// 秘钥，1&lt;E&lt;L</span><span class="token function">gcdFunc</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">,</span> <span class="token constant">L</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// gcdFunc求最大公约数</span><span class="token keyword">let</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token operator">?</span> <span class="token comment">// 公钥</span><span class="token constant">E</span> <span class="token operator">*</span> <span class="token constant">D</span> <span class="token operator">%</span> <span class="token constant">L</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，双钥密码体系，可以根据需求选择两种套路:</p><blockquote><p><strong>套路一：加密秘钥保密，解密秘钥公开</strong><br>主要目的是保障信息的 <strong>可鉴别性（知道是谁发的）</strong>、 <strong>完整性（防止被篡改）</strong>、<strong>抗抵赖性（别说不是你发的）</strong>，优点是提供了抗抵赖的证据，有效识别身份. 应用场景式, 官方发布消息, 大众访问消息.</p><p><strong>套路二：加密秘钥公开，解密秘钥保密</strong><br>主要是为了保障信息的 <strong>机密性（只有我知道写的什么）</strong>,优点是能大幅降低对安全信道的依赖. 机密信息传输.</p></blockquote><p>基于套路一，我们进一步聊聊<strong>签名</strong></p><blockquote><p><strong>物理签名</strong><br>基于物理载体不可伪造，也可以理解为一种“<strong>加密秘钥保密</strong>”</p><p><strong>数字签名</strong><br>基于数据内容不可伪造，比如经过<strong>CA用自己的私钥签名过的 张三的公钥信息</strong>——没错这玩意儿就是<strong>CA证书</strong>，之后李四要是拿着<strong>CA的公钥能解密开张三的CA证书</strong>，那么就视为张三这个身份是可信的（当然这建立在CA是足够权威的基础上——野鸡CA就算了吧…）</p></blockquote><h4 id="秘钥配置免登录"><a href="#秘钥配置免登录" class="headerlink" title="秘钥配置免登录"></a>秘钥配置免登录</h4><p>经过之前的一波分析，我们这里就该将<strong>解密秘钥作为公钥，加密秘钥作为私钥</strong>（这不是废话吗，你是数据的发送者，你拿解密的秘钥干嘛…）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen <span class="token comment"># 生成秘钥对</span><span class="token comment"># 之后的任何操作都可以直接enter跳过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后去<code>~/.ssh</code>找找看，私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>在等着你！</p><p>先想想看，登录密码这种设定是为了干嘛——认证身份对吧，也就是起到秘钥的作用。</p><p>那么我们给服务器配置一下我们的解密公钥，就可以达到验证身份的效果了~具体操作流程如下：</p><blockquote><p>复制<code>id_rsa.pub</code>，然后前往<code>~/.ssh/authorized_keys</code>（如果没有，那就直接创建），粘贴即可</p><p>没错，<strong>keys</strong> 就是指 <strong>秘钥</strong>。如果有多个秘钥，那么空格给开就行了。</p></blockquote><p>当然，有时候这个过程会因为疏忽大意而出错，所以这里还有一种简便的等效操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token comment"># 举个例子</span>ssh-copy-id DeapDream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果一切顺利，就能像我一样看到这句话：</p><blockquote><p>Now try logging into the machine, with:   “ssh ‘DeepDream’”<br>and check to make sure that only the key(s) you wanted were added.</p></blockquote><h4 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h4><p>快控制你的服务器执行一下之前学过的shell操作！</p><blockquote><p>抓不到肉鸡，就只能拿自己的服务器开刀，太下头了（）</p></blockquote><p>语法大概是这样的，具体操作就自行探索了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ssh</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span>@<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token comment"># 举个例子:</span><span class="token function">ssh</span> DeapDream <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可能就有读者会问了——这个和登录之后再执行命令有什么区别？</p><p>其实没啥区别，只是这里没有和服务器保持连接（相当于你登录服务器执行了命令又退出来了）</p><h4 id="scp文件传输"><a href="#scp文件传输" class="headerlink" title="scp文件传输"></a>scp文件传输</h4><blockquote><p><code>scp</code>即<code>secure copy</code>，基于ssh进行远程文件拷贝</p></blockquote><p>基本用法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">scp</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token comment"># 将文件复制到target</span><span class="token function">scp</span> <span class="token punctuation">[</span>src1<span class="token punctuation">]</span> <span class="token punctuation">[</span>src2<span class="token punctuation">]</span> <span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token comment"># 批量操作</span><span class="token function">scp</span> -r <span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token comment"># 复制文件夹</span><span class="token comment"># 也可以反过来从服务器上下载内容到本机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">scp</span> 拼多多电商经验.md DeepDream:/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ssh连接服务器然后cd到根目录再ls一手，就可以看到我的电商副业经验之谈<br><font style="font-size: 22px;font-weight:900;">《从零基础入门到暴亏上万》</font></p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><h3 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h3><p>Linux命令很多，而且还有不同的实现版本，我们很难记住所有指令，所以我们可以像这样得到帮助</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> 命令 <span class="token comment"># 查看某个命令的用法;（但是我的bash不支持这个命令）</span><span class="token function">apropos</span> 字符串 <span class="token comment"># 通过搜索某个关键词来找到可能相关的命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础</title>
      <link href="/2023/02/20/javabasic/"/>
      <url>/2023/02/20/javabasic/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h3><blockquote><p>本来以前是学过Java的（指2021年1月左右）…但是..但是主要是使用前端的知识，久了没碰Java就快忘完了…<br>这也不是第一次把本就没学多少的Java知识忘得一干二净了，<br>这边正好赶上学校要开Java课程了，所以这次痛定思痛决定写个学习笔记，希望能帮助自己的同时也能帮助到大家。<br>本来想用IDEA的（毕竟方便又好看）,但是为了适应学校的安排，还是用上了eclipse..</p><p>因为是前端的，这篇笔记主要是为了速通，所以很多知识点不会说太细<br><del>学什么前端，爷要全栈！</del> </p></blockquote><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote><p><strong>2022/01/07</strong></p><p>这篇博文是我在2021/08/23日在CSDN上发布的</p><p><a href="https://blog.csdn.net/Serio_gugugu/article/details/119833436?spm=1001.2014.3001.5501"><font color="aa6633">点击这里跳转</font></a></p><p>现在做了一些小的调整后，将其搬至当前位置</p></blockquote><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><h3 id="选择Java版本"><a href="#选择Java版本" class="headerlink" title="选择Java版本"></a>选择Java版本</h3><p>先要熟悉版本<br>三大版本：<br>JavaSE： 标准版<br>JavaME：嵌入式开发<br>JavaEE：企业级开发</p><p>我们这里使用JavaSE</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>java development kit <strong>java开发工具包</strong>，安装完成之后配置环境变量即可<br><strong>JDK包括了JRE（java运行环境），而JRE又包括了JVM（java虚拟机，java虚拟机的存在使得程序能够忽略系统的差异）</strong><br>（具体操作自行查阅，不再赘述)</p><h3 id="安装编译器"><a href="#安装编译器" class="headerlink" title="安装编译器"></a>安装编译器</h3><p>Eclipse，intelligent IDEA等都可以（记事本也行）</p><h2 id="正式操作"><a href="#正式操作" class="headerlink" title="正式操作"></a>正式操作</h2><h3 id="新建内容"><a href="#新建内容" class="headerlink" title="新建内容"></a>新建内容</h3><p>第一步：先新建一个项目<br><img src="https://img-blog.csdnimg.cn/805e84fdaec7499d901c4a20eead4135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>随便给个名字，这里叫EclipseNewbee（意思是Eclipse新手，不是牛逼..）<br><img src="https://img-blog.csdnimg.cn/7b8e608381794bdc97904a4986f63584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>弹出一个窗口，内容不用修改。<br>不用细究，直接Create<br><img src="https://img-blog.csdnimg.cn/a894c845065e4f03b8fb2a75535210d4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二步：新建一个包（可省略）<br>然后右键src新建一个Package，<br><strong>Package相当于一个文件夹</strong>，不用想太多<br><strong>（如果不建包的话也可以直接建一个Class然后写代码）</strong><br><img src="https://img-blog.csdnimg.cn/95cc831353ce4a14ae125479a7c27e5d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>随便给一个名字，这里叫JavaLearner好了<br><img src="https://img-blog.csdnimg.cn/cb3df5148e5d426689e808c4eadc6927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第三步：新建一个类<br><img src="https://img-blog.csdnimg.cn/f940bc1a982a4385ad31780ec2352bc3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里要做的依旧是给个名字，其余的不用管<br><img src="https://img-blog.csdnimg.cn/d0bc3551f33945c98d8d3e927f6e24ee.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Finish后得到一个这样的</p><p><img src="https://img-blog.csdnimg.cn/708537c8dde2415dadf819c840df3331.png" alt="在这里插入图片描述"><br>右边的两个对应左边的两个，不相同的话会报错，所以不要去修改</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>这里默认为有 C语言 和 面向对象 语言的基础<br>（初学的话压力可能有点大)</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//别问，问就是 “这么写就对了”</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>后面默认给出代码和图片两种格式，分别方便 复制粘贴 和 阅读 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//两种写法都可以</span><span class="token comment">//Scanner scanner = new Scanner(System.in);</span><span class="token comment">//String s = scanner.next();</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入Scanner对象，然后实例化，<strong>next()是获取下一次输入的字符串</strong>并返回给 s<br>然后在输出的时候进行一个字符串拼接<br><img src="https://img-blog.csdnimg.cn/c7d2b1b14fe4439786e2c293b25da751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行效果：<br><img src="https://img-blog.csdnimg.cn/18b0a9ce97fe476b90720f75d8e9e6b5.png" alt="在这里插入图片描述"></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>其实还是if和switch那些<br>基本上所有语言都差不多，大概看看就行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分支</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没错，这是我了"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hhh\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>依旧是差不多，所有语言基本一个样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>增强for循环</strong><br>也就是迭代器，遍历数组或许看不出来什么区别，但是遍历其他数据结构或者对象就很好用了<br><strong>注意i取的是内容，不是下标</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr1 <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"增强for循环(迭代器):%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//浅拷贝</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token comment">//深拷贝</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2333</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>深拷贝就是复制一个和原来一模一样的；<br>浅拷贝就是直接指向原来那个；</strong></p><p>上述代码在遍历之后的结果是：<br><img src="https://img-blog.csdnimg.cn/2a7fdb4954fa43709f20fa81d94d6866.png" alt="在这里插入图片描述"><br>注意，我们只修改过arr2和arr3，但是修改arr2的时候arr1也发生了同步变化，这是因为arr1和arr2本来就是一个东西的两个名字罢了</p><p>但是修改arr3却不会对另外两个有影响，因为它是完全独立的复制品</p><p><strong>增强for循环遍历二维数组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//int[][] arr4 = new int[3][];</span><span class="token comment">//上述写法也可以，注意至少要明确行数</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">:</span> arr4 <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>其实可以近似地理解为函数<br>和函数的区别大概是：<br><strong>函数是相对独立的，方法是附在对象上的</strong><br>所以c只有函数，java只有方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个写在class里面，main外面（如果有main的话）</p><h2 id="面向对象进行开发"><a href="#面向对象进行开发" class="headerlink" title="面向对象进行开发"></a>面向对象进行开发</h2><p>什么是面向对象？<br>首先就得说一下什么是面向过程。<br>C语言就是面向过程的，它的每一步操作都要自己做，包括内存的分配释放等等；<br>Java等就是面向对象的，它的许多操作是已经被封装好了，我们使用的时候直接调用就好了；</p><p><strong>比喻一下就是：<br>面向过程（POP）：自己买菜一步一步做菜<br>面向对象（OOP）：直接点个外卖</strong></p><h3 id="初识类与对象"><a href="#初识类与对象" class="headerlink" title="初识类与对象"></a>初识类与对象</h3><p>class本意就是类<br>这里新建一个类，内容如图<br><img src="https://img-blog.csdnimg.cn/421e33720c0c48988e58655960690592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token class-name">String</span> type<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来到之前的文件内<br><img src="https://img-blog.csdnimg.cn/965bd943eaf74b8da669b12696a18579.png" alt="在这里插入图片描述"><br>在main中运行以下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> lion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> tigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lion<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/57c25c14a9794ae88512684a20b55eb1.png" alt="在这里插入图片描述"><br><strong>其中，Animal就是一个类，lion和tigger是对象</strong><br>世界上的任何东西都可以作为一个类，<br>对象就是具体化的类（准确地说叫<strong>实例化</strong>）</p><p><strong>比如我们常说的人类就是一个类，<br>我们可以将其不同程度地实体化为年轻人、工程师、张三李四</strong></p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>在刚才，你会发现，type和name这两个值没有赋值，这时候他们的值默认null<br>如果我们再去主函数里面赋值，那感觉好low逼啊<br>所以这里出现了构造器</p><hr><p>也叫构造方法（C++里面叫构造函数）<br>满足以下两个特点：<br><strong>1.名称与所在类的名称相同<br>2.不写任何返回类型，包括void<br>3.在new实例化对象的时候触发</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"被初始化了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> type<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里涉及到了this指针，this指针就是字面意思，指代当前所处的类或对象；<br>this.name指的是类或对象的属性；<br>name这里指的是参数；</strong><br>’<br><img src="https://img-blog.csdnimg.cn/d07f0fd3a9104ae59541982c39998b2f.png" alt="在这里插入图片描述"><br>main里面运行结果<br><img src="https://img-blog.csdnimg.cn/b90ab87c07ee44ed9308bbb499d1dba5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另外，如果是一个没有写入构造方法的类，那么默认自动生成一个空的构造方法</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>问题来了，加了构造器之后可是要传递参数的，那假如用户不穿怎么办？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token comment">//第一种情况，两个参数</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"被初始化了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第二种情况，一个参数</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"莫得名字"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//第三种情况，没有参数</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"莫得名字"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"某种动物"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> type<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这样一来就能根据用户传入的参数来自动选择执行哪个构造方法<br>（注意，重载方法是根据参数的个数和类型来区分的，不是参数名称！）</strong></p><p>重载不仅可以用于构造方法，只要是方法，那么都可以重载。</p><p>接下来说面向对象三大特征</p><hr><h3 id="面向对象三大特征：-封装"><a href="#面向对象三大特征：-封装" class="headerlink" title="面向对象三大特征： 封装"></a>面向对象三大特征： 封装</h3><p>就是把对象包裹起来，并且控制对象内容的访问权限<br>大概就是为了所谓的高内聚低耦合<br><strong>高内聚：类的内部数据操作细节不由外部干涉<br>低耦合：仅暴露少量的方法给外部使用</strong></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p><img src="https://img-blog.csdnimg.cn/9512a8c669aa4af88ffc4b1994ae1b9f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>内容访问权限的控制是通过修饰符来完成的<br>类的属性通常用private修饰，这样可以避免误操作修改，避免了不可预测得混乱</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过getName()和setName()操作，保证了 <strong>访问的时候不会被误操作修改</strong> 和 <strong>修改的内容一定是字符串</strong><br>并且你还可以通过if判断等方式进一步地规避误操作</p><p>这样一来安全性高多了</p><h3 id="面向对象三大特征：-继承"><a href="#面向对象三大特征：-继承" class="headerlink" title="面向对象三大特征： 继承"></a>面向对象三大特征： 继承</h3><p>继承就是将已有的类进行<strong>修改和拓展</strong>形成的新的类<br>（其实就是字面意思</p><p>先新建一个Pet类，使用extends关键字继承Animal类<br><img src="https://img-blog.csdnimg.cn/2aee83e94bf74c15a4e1e0b6e54aa91c.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token class-name">String</span> toy<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toy <span class="token operator">=</span> toy<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"他喜欢玩"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> toy<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main里实例化一下，<br><strong>调用自身构造函数之外，还会调用父类的无参构造</strong><br><img src="https://img-blog.csdnimg.cn/1554b715876b4f50b927eb809b92bc91.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果父级的属性是public修饰的，那么子级就会直接继承并且可以直接访问；如果不能直接访问，那么可以用封装里面提到过的方法来给子级传递数据；</p><p>这里我们用protected修饰，给父类Animal添加一个属性:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">String</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在子类Pet里面用<strong>super关键字</strong>向上访问父类：<br>（父级，也可以叫超级，超类，就是因为其关键字是super，<br>super会向上查找，直到查找到符合条件的父类）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token class-name">String</span> toy<span class="token punctuation">,</span> <span class="token class-name">String</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toy <span class="token operator">=</span> toy<span class="token punctuation">;</span><span class="token comment">//访问到父级的size属性</span><span class="token comment">//由于继承的存在，这个属性在实例化后将变成自己的</span><span class="token keyword">super</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他喜欢玩"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> toy<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到main函数里面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pet</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">"锤子"</span><span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pet</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">"球"</span><span class="token punctuation">,</span><span class="token string">"huge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是继承的父类的属性: "</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是继承的父类的属性: "</span> <span class="token operator">+</span> cat<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0627e0f2f16843339e3b26959fe2b24e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以发现，这里我们先实例化cat对象，后实例化dog对象，<br>但是先输出dog对象，后输出cat对象<br>我们发现，虽然是一个父类的两个子类，但是<strong>继承一般数据类型（非引用类型）属性是通过深拷贝实现的</strong>，他们的属性没有发生覆盖，不会相互干扰</p><p>另外，super和this，可以通过形如super()或this()的操作调用构造函数，但是注意两点：<br><strong>1.super只能出现在子类的方法中<br>2.super()或this()需要放在构造函数的第一行（由于这个性质，他们两个不能同时存在）</strong></p><p><strong>继承的其他注意事项</strong><br>注意java只有单继承，意思是一个子类只能有一个直接父级，<br>可以<strong>多重（单）继承（子类–父类–爷爷类（间接父级）–）</strong><br><strong>不是多继承（多个直接父级）<br>不是多继承！！！<br>不是多继承！！！</strong></p><p><strong>所有类的最终父级是Object类，这种终极父类被称为“基类”（基岩基石那个意思，别多想啊）</strong></p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写全称是方法重写，为了更好地和重载区分，我们先分析一下两者地字面意思<br>重载：多重挂载<br>重写：重新写一遍<br>比如在父类Animal中有一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捕猎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>子类中也有一个同名的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"吃饭喝水睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就构成了重写，<br>不过这还不够规范，为了提醒代码的阅读者，我们还会在重写的方法上加上@Override</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"吃饭喝水睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实也就是一个从自身出发向上寻找指定内容的过程，优先使用最先找到的指定内容（也就是JavaScript中的作用域链）<br><img src="https://img-blog.csdnimg.cn/0c804ad13e384374af1939db0a20c17e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然，如果不希望一个方法被重写，可以给它加上<strong>final</strong>关键字进行修饰，有了final修饰的类，不能被继承</p><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>什么是抽象？就是没有具体内容<br>比如一个抽象类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> xxx<span class="token punctuation">{</span><span class="token comment">//.....(当然也可以什么都不写)</span><span class="token comment">//要写的话可以写抽象方法等</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不能直接实例化一个抽象的对象，因为其没有具体内容！<br>它存在的目的就是为了适应不同情况，举个例子，<br>生物这个类里面有个方法是输出生物的日常活动，<br>但是生物很多，要执行这个方法的话，固定的代码可能不能很好地适应每一种情况<br>所以就需要被重写——既然会被重写，那一开始我们就没必要给它具体内容，只需要在这里放一个名称提醒我们还有这个方法就好了。<br>注意事项：</p><p><strong>1.抽象类不能创建对象（不能new）,并且有抽象方法的类一定要是抽象类。<br>2.抽象类只能通过儿子继承然后覆盖重写所有的抽象类方法进行使用。抽象类可以有构造方法，是供子类创建对象时，初始化父类成员使用的。<br>3.抽象类中不一定有抽象方法，但有抽象方法一定是抽象类。<br>4.抽象类的子类除非也是抽象类，否则就要重写所有父类方法。<br>(如果子类也是抽象类，那么可以选择不重写或重写一部分)<br>5….中的抽象方法，没有方法体！！！</strong><br> <strong>父类的引用指向子类</strong><br>新建两个类，分别是A，B</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数内：</p><p><img src="https://img-blog.csdnimg.cn/b20a8940987a4fee9dfefd939383416c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至于为什么执行A的方法，是因为，优先在自身寻找，自身没有才找父类。<br>这里自身有test()方法，所以调用A的test方法</p><p><strong>其实上面的内容就是多态</strong></p><h3 id="面向对象三大特征：-多态"><a href="#面向对象三大特征：-多态" class="headerlink" title="面向对象三大特征： 多态"></a>面向对象三大特征： 多态</h3><p>一个对象的多种形态，比如Kitty是cat类也是animal类。<br>或者说，一个人的父亲，必定也是一个人的儿子。<br>这就是多态的字面意思。</p><p><strong>概括为父类引用指向子类对象。</strong><br>比如原来是Zi zi = new Zi(),<br><strong>多态的写法就是 Fu zi = new Zi();</strong><br>（即“左父右子”。同时，这种操作叫做<strong>向上转型</strong>，这种操作一定是安全的）<br>说明：<br>1.直接通过对象名称访问成员变量，优先访问<strong>等号左边</strong>，没有就向上找<br>（<strong>编译看左边，运行也看左边</strong>）<br>2.间接通过成员方法访问（调用方法的话），优先访问<strong>等号右边</strong>（new的对象），没有就向上找。<br>（<strong>编译看左边，运行看右边</strong>）</p><p>第二种说明：<br>（如果前一种不是那么好理解的话）<br>记住编译看等号左边就行，别管右边new的是什么，左边怎么声明的就是声明。</p><p><strong>解释：<br>编译看左，运行看右。<br>假设Fu中有方法A,B子类有方法A,C，<br>现在我们Fu zi = new Zi();那么：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Fu</span> zi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">zi<span class="token punctuation">.</span></span>A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父子都有，优先用子</span><span class="token class-name"><span class="token namespace">zi<span class="token punctuation">.</span></span>B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子没有，向上找到父</span><span class="token class-name"><span class="token namespace">zi<span class="token punctuation">.</span></span>C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错，编译看左(Fu)，Fu是没有C的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么使用多态<br>比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CAT</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CAT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DOG</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DOG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DUCK</span> duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DUCK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>…….<br>这样一来东西一多，就很难知道他们的继承关系了</p><p>所以我们可以：<br>ANIMAL cat = new CAT();<br>…….<br>继承关系一目了然！</p><h4 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h4><p>还是用比喻来说吧..<br><strong>向上转型：</strong><br>比如猫转为动物，即左父右子的多态（FU zi = new Zi），一定是安全的<br><strong>向下转型：</strong><br>比如动物转为猫，类似强制类型转换，如（Fu zi = (Zi)fu）<br>这样是有风险的，可能导致未知错误发生。所以动物向下转为猫的前提是原先是从猫向上转来的，这个例子可以推广到一般情况。</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof关键字：<br>由于存在多态这种操作，有时候我们难免会忘记ANIMAL到底是DOG，CAT还是PIG什么的…所以我们就有了instanceof！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断 一个对象 是不是 一个类的 子类 的实例</span><span class="token comment">//A是B的子类，a是A的实例</span><span class="token class-name">B</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于返回值是布尔类型，还可以利用这个关键字做很多事情！（不在话下）</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>从public static void main开始就在用了<br>static修饰的变量和普通变量区别在于，<del>进厂时机不同</del><br>好吧，是分配内存空间的时机和位置不同<br><strong>有static修饰的内容，在写下之后就分配进了方法区，而且还是多线程的<br>没有static的内容，要等到类加载之后才会存在（这个学到代理和反射再说）</strong></p><p>所以对于static修饰的内容，可以直接这么访问而不需要实例化：<br>类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">233</span><span class="token punctuation">;</span><span class="token comment">//静态变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主函数中：</p><p><img src="https://img-blog.csdnimg.cn/599540b0db0b425995dab02c69fb8061.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面的内容再口语一点就是，static约束的内容会“直接出生”，早于其他非static的内容</p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>在类里写一个：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是Animal的一个静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主函数里：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> pig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> frog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> seal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果是:<br><img src="https://img-blog.csdnimg.cn/1d13e39418a24619a83df9d3422ed7ff.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可见，执行了一次静态代码块的函数，三次构造函数<br>这说明，静态的优先执行，并且一个类的静态内容只会执行一次</p><p>那么这和静态方法有什么关系呢？<br>静态方法写法上的区别就是多个名字之类的嘛…..</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hhh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是Animal的一个静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，静态方法需要自己调用才会执行。</p><h4 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h4><p>导入包在输入输出就提过了<br>不过静态地导入包是什么鬼？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//常规导包</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">;</span><span class="token comment">//静态导包（只能导入包内的一个方法）</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span>random<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一般的操作</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//静态导包后直接用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大概就是这样，当做语法糖看看就好</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>接口是为了使约束和实现相分离：“面向接口进行编程”<br>接口是建立在抽象上的，说白了就是一个<strong>抽象的集合</strong>（意思是里面不能有具体的方法）。<br>另外，<strong>接口是可以多继承的，弥补了类的不足</strong></p><p>接口创建是建立一个interface<br><img src="https://img-blog.csdnimg.cn/b7335b4d65af4632b72c1f4894065c85.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMethods</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不写约束的话，默认为public abstract</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口是抽象的集合，那么我们就需要一个类来实现这些抽象</p><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>新建一个类来重写接口中的抽象方法，这个类就叫做<strong>接口的实现类</strong>，其命名规范是 <strong>人类看得懂的名字 + Impl</strong></p><p>这里要使用<strong>关键字implements</strong>进行实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">JavaLearner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMethodsImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserMethods</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> newName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于接口可以多继承（准确地说是“多实现”，但是这样说很奇怪不是吗）<br>所以允许存在以下写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Impl</span> <span class="token keyword">implements</span> <span class="token class-name">In1</span>，<span class="token class-name">In2</span><span class="token punctuation">,</span><span class="token class-name">In3</span><span class="token punctuation">{</span><span class="token comment">//当然还是需要重写，不然会报错</span><span class="token comment">//三个接口的内容直接在这里重写就行</span><span class="token comment">//不过这里我就不写了，大家懂这个意思就行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>啥是异常就不多解释了吧，就是用户或者程序员或者系统造成的各种未知的bug</p><p>Java把异常当成对象进行处理，<br>并且定义了一个基类<strong>java.lang.Throwable</strong>作为所有异常的终极父类，其下有两个直接子类，分别是Error和Exception</p><p>Error是JVM抛出的，大多数时候和代码语法关系不大（比如内存溢出，这只能怪内存太小了？），但是导致的错误往往是致命的，JVM往往会因此终止线程；</p><p>Exception则一般是有程序本身的逻辑引起的，可以被程序处理；</p><h4 id="抛出和捕获异常"><a href="#抛出和捕获异常" class="headerlink" title="抛出和捕获异常"></a>抛出和捕获异常</h4><p>try是指要检测的部分<br>catch参数要写错误的类型对象（这个得去查一下有哪些，实在不行Throwable吧）<br>如果触发了这个类型的错误，那么就会执行其中的代码<br>finally是检测完毕时执行（无论如何都会执行，可以不写这一部分）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"太强了这就是抛出和捕获异常吗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"检测完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如，0作为除数<br><img src="https://img-blog.csdnimg.cn/a0183bb4620940999d619f472825cd54.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意事项：</strong><br>如果要捕获多种异常的话，可以用使用多个if else那种格式来书写多个catch达到目的<br>catch中的参数是一个对象，其中内置了很多处理错误的方法可以了解一下</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>JavaSE基础部分大概到这里就结束了，如果内容上还有不足或疏漏之处，欢迎指正。<br>后面我会继续做JavaWeb相关的学习笔记（Vue-Cli的就先缓一缓吧….东西太多了学不过来…）</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对齐方式与幽灵节点</title>
      <link href="/2023/02/20/ghostnode/"/>
      <url>/2023/02/20/ghostnode/</url>
      
        <content type="html"><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left img</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><p><img src="https://img-blog.csdnimg.cn/c9358de6756540d9bda2ce2f874e2a35.png" alt="在这里插入图片描述"></p><h3 id="问题一：为什么出现了换行"><a href="#问题一：为什么出现了换行" class="headerlink" title="问题一：为什么出现了换行"></a>问题一：为什么出现了换行</h3><p><img src="https://img-blog.csdnimg.cn/9654e3ddaa4748d297e9a94c698f187a.png" alt="在这里插入图片描述"></p><p>照理来说，这个应该是恰好占满一行才对，但是从结果来看并没有。</p><p>经过和大佬的交流才知道，这是因为inline-block会产生空白间隙，所以需要再额外增加一些才能并列</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 210px<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="问题二：添加图片导致左右两部分错位"><a href="#问题二：添加图片导致左右两部分错位" class="headerlink" title="问题二：添加图片导致左右两部分错位"></a>问题二：添加图片导致左右两部分错位</h3><p><img src="https://img-blog.csdnimg.cn/2d47e4a414e642088ed4bcca6325e433.png" alt="在这里插入图片描述"></p><p>在解决了问题一之后，还有如上图所示的问题二</p><p><img src="https://img-blog.csdnimg.cn/504bfd394c384b49a129e668bd9597cb.png" alt="在这里插入图片描述"></p><p>我们先指明宽高，再看看结果</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left img</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/59b9d1ad2f1442e783b5e5f59657fd05.png" alt="在这里插入图片描述"></p><p>不断修改宽高（这里主要考虑高度对布局的影响）观察结果</p><p><img src="https://img-blog.csdnimg.cn/f0a412ae9a08467fa089d10f4cbe643e.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f4eca0ec90e2470fbc40d32ecf6be793.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/63581c07c4354134bcdcfd964510899d.png" alt="在这里插入图片描述"></p><p>我们观察上图规律，可以看到图片放大，蓝色块反而偏移更少，而当height正好等于蓝色块高度时，偏移量刚好消失</p><p><img src="https://img-blog.csdnimg.cn/21f70ad1106642aea83d7b3f2e40138c.png" alt="在这里插入图片描述"></p><p>而超出这个值时，紫色块发生偏移</p><p>(经过和大佬的有效交流讨论后)</p><p>我们发现上述几个样例都有一个共同点，那就是图片底部始终和紫色块<strong>底部对齐</strong></p><p>这我们就联想到了对齐方式方面的因素，这可能是图片默认对齐方式为底部对齐导致的</p><p>所以我们给蓝色块添加如下样式:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/198af3fc6b464c3a8a39615d16faf602.png" alt="在这里插入图片描述"></p><p>果然，效果就很棒</p><p>经过大佬的推理和测试，上述情况不仅会由img标签产生，<strong>也会对文字生效</strong>，</p><p>因为文字也是有类似的对齐特性</p><p>（这也大概就是为什么vertical-align和text-align既对图片生效，又对文字生效的缘故了吧)</p><p>通过以上问题，我们应该更进一步地了解到一些东西：</p><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我们常用的几种对齐方式有</p><blockquote><p>1.顶线对齐 top</p><p>2.中线对齐 middle</p><p>3.基线对齐 baseline</p><p>4.底线对齐 bottom</p></blockquote><p>顶线中线这个还好理解，那么基线和底线又有什么区别呢？</p><p>还记得中学写英语作文的时候那个四线格吗？不记得也没关系，看看下图应该就知道了：</p><p><img src="https://img-blog.csdnimg.cn/d4cf1d0c6472440491ca93ef3e91be92.png" alt="在这里插入图片描述"></p><p>没错，我们可以认为，上述的四根线和图上的四线格由上自下一一对应</p><p><img src="https://img-blog.csdnimg.cn/3be31e8b7c5c4a3683996beb9e4d75d4.png"></p><p>需要复习的是，英文大多以基线（baseline）为底书写，</p><p>这就意味着我们在选择对齐方式的时候也要用这样的标准进行参考</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>基线对齐</strong></p><p>这是文字的默认对齐方式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>                        <span class="token property">font-size</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 230px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>140<span class="token punctuation">,</span> 58<span class="token punctuation">,</span> 211<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            哇偶fg        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            哇偶fg        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c906c3e678964dd09c9099dab58b8a92.png" alt="image-20211212150936358"></p><p>而且是对齐最后一行</p><p><img src="https://img-blog.csdnimg.cn/33934b3c3e1e4601b35986d6ada23a0e.png" alt="在这里插入图片描述"></p><h3 id="其他对齐方式"><a href="#其他对齐方式" class="headerlink" title="其他对齐方式"></a>其他对齐方式</h3><p><img src="https://img-blog.csdnimg.cn/1689e553d96f4b9bb44ddd193c30614f.png" alt="在这里插入图片描述"></p><h2 id="幽灵节点"><a href="#幽灵节点" class="headerlink" title="幽灵节点"></a>幽灵节点</h2><p>一开始我都以为问题解决了，结果龚老师又抛出这个概念叫我去学…</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这里可没有给span和div任何高度啊</p><p><img src="https://img-blog.csdnimg.cn/159d9bf51e1c449f93b2fbe4daddc1c6.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/7fbb79966f8b4524a167add6485a0040.png" alt="在这里插入图片描述"></p><p>span宽高为0，这没有问题，那么这div是怎么回事，它的高度从何而来？</p><p>我们就将撑开div高的这个“看不见的节点”称为 <strong>幽灵节点</strong></p><blockquote><p>此处是是因为行级块（这里的span设置成了inline-block）渲染时，先会在这个行级块前面生成一个空白节点，宽度为0，并且 <strong>继承font-size，line-height属性，这里的font-size是16px，line-height是font-size + 行距，也就是此处的20.667px</strong></p></blockquote><p><strong>注意，这里的20.667px会因缩放而发生变化，所以对以下内容的数值计算不构成参考</strong></p><h3 id="分析一"><a href="#分析一" class="headerlink" title="分析一"></a>分析一</h3><p>我们进行如下修改，观察结果</p><p><strong>设置line-height为0</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a5b3c53df4d04ada8d6aa7a73f324bde.png" alt="在这里插入图片描述"></p><p><strong>设置font-size为0</strong></p><p>这里我的理解是，如果一行字的高度为0，那么行与行之间的距离也是0，</p><p>由于line-height = font-size + 行距，那么line-height也为0</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b8fd975364f24a06b6fc237040829795.png" alt="在这里插入图片描述"></p><h3 id="分析二"><a href="#分析二" class="headerlink" title="分析二"></a>分析二</h3><p>当然，幽灵节点还有其他体现形式，比如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">img</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://xxx.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ca801f364d0349e09c946ee99feba544.png" alt="在这里插入图片描述"></p><p>下方又出现了奇怪的空隙，这也是 <strong>幽灵节点的体现</strong>（因为img是内联块，所以也存在这种现象）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ff3700<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0c1f7635a4584ee5a715a6e676cbd5e6.png" alt="在这里插入图片描述"></p><blockquote><p>上一个例子中，还没有考虑vertical-align的影响，这里则是因为vertical-align和line-height一起作用的结果，</p><p>添加一点文字后我们发现，图片的默认对齐方式是基线对齐，所以和底部的间距其实是和底线的距离</p><p>（这里没有padding，文字的背景色大小是line-height决定的，这里</p></blockquote><p>让我们试着修改一下vertical-align</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/99429cceccb2455e8826f82a2652cd3d.png" alt="在这里插入图片描述"></p><p>简直妙不可言</p><p>根据龚老师的提示，还可以修改dispaly，因为只有inline-block或者inline才会出现这种现象</p><p>我们只需要将其修改为block就可以了</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确实管用</p><p><img src="https://img-blog.csdnimg.cn/5212b9736ac84a6fb3d5bf70d8a7878c.png" alt="在这里插入图片描述"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>查资料的过程中，也是发现了大量重复的文段，感觉应该都是出自一位叫做 <strong>张鑫旭</strong>的大佬之手，下面这篇文章提供了相当全面的分析，甚至让我重新审视HTML和CSS——<a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">大佬的博文</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022实习日记</title>
      <link href="/2023/02/20/diariesofbytedancer/"/>
      <url>/2023/02/20/diariesofbytedancer/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>5月末。</p><p>“Carbon，我了解了你的情况——其实我还是挺想留你的，这样吧，一个月850…决定权在于你。”</p><p>“那如果我留下的话，有实习证明吧？”</p><p>“这个当然。”</p><p>“这样的话，我再考虑考虑。”</p><p>挂掉经理的电话，我看了下我投出去的十几份简历，像是石沉大海。望着茫茫夜色中三期实训中心的几点灯光，我感到一阵脆弱无力。</p><p>“很抱歉，经理…”</p><p>我在钉钉上发出了这么一条消息。</p><p>听说那个男人已经找到了月薪3k的工作，我真是羡慕不已。</p><p>我又投出几十份简历，纵使是被标记为“感兴趣”，也再也没有了下文。</p><p>“没关系，我也很想休息一段时间，休息够了还可以抽空把自己手里的项目做完。大二也不用急着找实习的。”</p><p>我对自己这样说，虽然说的都不假，但是我也有很大安慰自己的成分。</p><p>就这样吧，是时候休息一段时间了。</p></blockquote><h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><blockquote><p>“这边缺前端，有谁想来吗”</p></blockquote><p>这一切都要感谢那位19级学姐，因为她的缘故我才有机会得到字节的面试机会。</p><p>轮滑球课上，我被大佬们带着打期末考试比赛，下课后我发现了一通未接来电。</p><p>我滑到体育场的角落，试探着拨过去——就这样约好了面试时间。</p><blockquote><p><strong>一面</strong></p><ol><li>介绍一下项目经历</li><li>webpack性能优化（懒加载、按需引入、首屏加载）</li><li>浏览器缓存机制</li><li>超大文件分片上传 及 断点续传</li><li>算法题</li><li>函数柯里化</li></ol><p><strong>二面</strong></p><ol><li>TCP和UDP的区别</li><li>TCP为什么可靠</li><li>拥塞控制怎么实现的</li><li>为什么要区分堆栈内存</li><li>VueX实现局部数据共享</li><li>事件轮询机制</li><li>函数柯里化（难度陡增）</li><li>算法题</li></ol><p><strong>三面</strong></p><ol><li>项目遇到过的难点</li><li>继承模式</li><li>算法题</li><li>简单说说虚拟DOM</li><li>能实习多久</li></ol><p><strong>HR面</strong></p><ol><li>团队合作相关问题</li><li>遇到过的困难</li><li>对行业未来的思考认识和规划</li><li>读研</li><li>上一份实习的情况</li><li>什么时候能入职，能实习多久</li></ol></blockquote><p>七百日元婴铸气，于一朝飞升渡劫</p><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><p>6月23日，飞到深圳，然后又是乘车，又是带着行李箱乘中介的小电驴看房，晚上又是到处转悠熟悉环境。</p><p>刚过来的感受就是——热得**（文明），房租非常真实，1500合租只能租到80年代的房子——说实话，若仅是老旧一点我是不介意的，但是刚一进门就看到一大箱过期食品和厨余垃圾的混合物在桌子边上发酵堆肥，那浓郁的味道只让我想起停电半年的冰箱里生驱的烂菜，但是出于礼貌我还是要草率地看一下房间，象征性地拍一下照片做记录，不过还是装不出有意向的样子。</p><p>由于这前后的对比，还是花了1900租了一个6、7平米的单间——然而竟然还有押金！最后各种费用算下来，一口气交了4000大洋出去…</p><p>我真的心疼坏了，我突然觉得一切不值得，突然好想回家躺着玩一个暑假，真的，太累了。</p><p>人在江湖，身不由己。还是得出去转转，熟悉一下环境。</p><p>本来打算去看看公司，但是在小区内迷路的时间太久了，导致走到半路的时候天色已经是有些许昏暗了，就索性不去了，找了家饺子店吃晚饭。</p><p>我点的是饺子，给的是馄饨，吃的是烧麦。那是真的妙。一切都很陌生，我开始感到有点水土不服。</p><p>后来跟着导航走，在小区里面又迷路了半小时，终于是回到了住处，一边写着博客，一边期待明天会好起来。</p><blockquote><p>本文也记录一下每天的计划安排等等</p><p><strong>6.23</strong><br>7点起床，打理好之后，吃个早饭去公司做入职流程</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>空调还开着，是26度；微光透过窗帘，室内昏暗朦胧。</p><p>所以现在应该是几点了呢？</p><p>“卧槽，要上班。诶我手机呢？？？哦，才六点啊，继续睡吧。”</p><p>…</p><p>“卧槽，要上班。几点了？？？哦，七点啊，七点半就起来，继续睡。”</p><p>“卧槽，要上班。七点二十九？？？哦，再躺一分钟。”</p><p>最后终于是在七点五十出了门，这得益于我没有买洗漱用品，所以也没有花时间洗漱。</p><p>一路上我还是觉得非常从容，毕竟九点半才开始入职流程，一个半小时慌什么呢？我看着沿途的街景，和来往的行人和单车擦身而过，我便意识到，这就是早高峰。想到这里，我突然又有了骑车的想法——深圳的街道在我看来非常有特色，因为许多单车、电瓶车之类的都在上面行驶，我也花一块五加入这个行列，只是单纯想融入罢了。</p><p>不过仅仅是骑了三四分钟我就发现需要过天桥，又只能把车锁上还了。心底突然多了一道价值一块五的伤口。</p><p>八点三十分左右，跟随导航到达A地。</p><p>突然之间，我脑海里有一个声音在问：</p><p>“为什么要来这里啊？”</p><p>我打开offer邮件，差点让我想原地躺平放弃奋斗去隔壁香港求个富婆低价包养我四个月——好像从来就没说过是在A地这边上班诶。嗯，真好。我心底真是在微笑着流泪，因为这真是好笑，但是小丑竟是我自己。</p><p>只好原地打车去B地，一看价格区间：23~25——是我这种穷困的家庭能够负担得起的价位。好了车来了，28，抢钱啊？这么贵谁坐啊？下一个，29？开玩笑呢，28都不成我能要你这29的？</p><p>在此次拒绝之后的十分钟内，竟然再也没有司机师傅接单。</p><p>时间也是一点一点流逝，眼见着马上就要八点四五了，终于是又有司机师傅接单了，一看价格，32。我还能说什么嘛，我和这个司机缘分不浅，多给点怎么了嘛。</p><p>但是司机师傅这时候又在半路堵车了…我和他就成了一场双向奔赴，看着导航上它一动不动的样子，我就心急，我越是心急，我就跑得越快。地图上说的预计它还得堵上一分钟，我寻思我这都过了四五分钟了咋还堵着呢。</p><p>直到司机给我打一通电话，我才知道是我网速2G了，人家到地方了问我在哪呢。</p><p>看着自己刚跑过的几百米，又得跑回去…</p><p>九点，终于上车了。</p><p>HR还是很贴心的，怕我找不到地方，offer邮件里面还有图文视频寻路指引的附件。但是啊，万万没有想到啊，我2G了啊，邮件靠着缓存还能打开，但是这个在线的附件加载不出来啊…只能是把链接给朋友们帮忙看看打字发给我，至少文字还是勉强能加载的——我qq发个文本消息，只需要等待三秒就可以发出去呢…</p><p>九点二十，到了写字楼所在地，根据用了二十分钟勉强加载出来的一部分图片，再反复比对确认加上询问附近的工作人员，终于是摸索进了字节的大楼，然后慌慌张张地跟着指引到了六楼。</p><p>好，总算是没有迟到。</p><p>这里有工作人员负责接应我们办理入职，但是需要扫码进行一个签到确认，关键是——我2G啊，扫码打不开啊！进度条在那里加载了足足一分钟后，我向工作人员询问起这里的wifi密码——好家伙！还没工作呢倒是先蹭起网来了！好在另外一个办理入职的同学也是2G了——我甚至怀疑他是相当善解人意，为了照顾我的颜面才给出这么一个理由，然后请求工作人员开一下热点给我们两个用一下，当然不管是怎么样，我都应该感谢对于我这种大聪明行为的善意。</p><blockquote><p>至于为什么会突然2G了?我看着我网速挺正常的，经过我专业的分析，猜测可能是这边的DNS都没有缓存，所以我访问资源速度比较慢。</p><p> 这也能解释为什么过了一段时间在下午的时候就正常了。</p></blockquote><p>好了，总算是拿到了工牌开始办理入职手续。开始递交材料了，看到我前面几位的学籍材料，我就有理由怀疑我的学历是这里最低的了。</p><p>不过呢，我也早有心理准备了，所以还是比较淡定。但是让我绷不住的就是，领取办公笔记本的时候，告诉我由于上海疫情，mac供货不足，就只能用windows替代一下了——我看到那个thinkpad啊，我都怀疑这个价格有没有1500…更让我心态爆炸的是，看着旁边的一位朋友领到了mac，一问才知道他是做后端的——我不明白啊，人与人之间的差距怎么能够比人与狗之间的差距还要大啊，我做前端的色彩和分辨率对我很重要的，你做后端的你用mac干嘛啊，你用linux啊！</p><p>但是我哪敢说什么啊，还是去26楼去找我的工位了。</p><p>迎接我的是我的mentor，一看吓一跳啊，这个不是我的一面面试官吗，想想自己面试答得狗屁不通我就心有余悸，因为我自己回忆一下我的作答，我都嫌弃我自己啊。</p><p>但是mentor人很好啊。</p><p>开局我是真的很懵逼，新人培训直接丢给我一个图形的结构的文档，超链接那是四通八达啊，主题也是五花八门，从公司内如何应对性骚扰到代码规范再到一堆看不懂的技术文档啥都有，搞得我是找不着北。mentor就和我说该干嘛干嘛，我也才有了点头绪，然后中午也是mentor带着我和另外一个同事去食堂吃饭，我也才知道这边吃饭的一些流程。</p><p>字节的饮食还是可以的，这里的食堂让我想起学校的一食堂二楼的自选，除此之外，还有下午茶！！！我靠，今天的牛奶西米露丸子和红枣豆沙丸子二选一！！！突然之间觉得一切都好起来了！！！</p><p>之后看培训资料看得无聊也借着做核酸的机会去四处逛了逛，发现这里是有54楼的，真的挺大的，然后5楼还有小邮局，可以去领取 <strong>字节10周年礼包</strong> 和 <strong>新人入职礼包</strong>——好！然后好像是34、35楼还有按摩和健身房！虽然我没有进去，但是想想就很棒啊！另外，大概是每个办公区楼层的走廊上都有咖啡厅，但是由于我不清楚是不是免费的所以暂时还没试过——但是下周一定会喝的，因为今天看文档差点睡着两次…</p><p>后面晚饭也是和mentor以及另外一个同事一起吃的，交流了一下，那个同事是某知名985硕士，虽然早有预料，但是还是觉得非常佩服。然后他和mentor就开始交流周末的计划：</p><p>“这周打极地大乱斗不？”</p><p>“打排位不？”</p><p>我当时心里只有——“?”</p><p>最后是摸鱼一直到下班，本来骑车回去主要二十分钟，但是我还是花了两小时，因为在外面迷路了…</p><p>总的来说，今天感觉还不错，感觉自己又行了，一切都好起来了！</p><h2 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h2><p>6月27日，一如既往艳阳高照</p><p>九点半到了公司，赶上了早饭——纯牛奶加酱肉包，以及黑芝麻糊…</p><p>然后一直摸鱼摸到了中午，然后和几个同事一起去吃午饭，这个过程中我们友好交流，直到有人问起：</p><p>“Carbon，你以前是在哪个学校读书呢？”</p><p>我愣了一下，但是很快还是给出一个自然的微笑并说出了一个生僻词汇</p><p>这位同事也愣了一下</p><p>“那是在X省吗？”</p><p>“不，是在Y省a市”</p><p>他转过头和另外一位同事相互看了看对方，又转过来和我说，他们当初也是在Y省a市读研——自然是某985，说得很自然，没有炫耀的意思</p><p>因为在离开这自此沉默无言的餐桌后，电梯间内又有人讨论：</p><p>“那个xxx，以前本科只是个211…后面竟然保研上清华了”</p><p>哎呀我的妈呀，我吓得简直是瑟瑟发抖啊，这又一次提醒我周围的都是什么神仙了…</p><p>总之就是，还需要继续努力，还有很长的路要走！</p><h2 id="稳定迭代"><a href="#稳定迭代" class="headerlink" title="稳定迭代"></a>稳定迭代</h2><p>别的不说，字节的早饭我真的爱了</p><p>我拿了一碗纯牛奶，一个酱肉包，五片培根，一根像是来自KFC的油条，一片煎蛋，一份炒面还有一个淋了糖和芝麻的甜馅面包——我当时也怀疑，我真的能吃这么多吗，不过事实证明人类能够通过努力成就伟大的事业</p><p>然后我寻思吃了饭买瓶水吧——好家伙，每日补贴五瓶水，外面卖5元的这边直接1.7元，感觉赚翻了！更厉害的是外面的贩卖机，圆珠笔，记事贴，鼠标免费拿！</p><p>怎么办，我好像有点喜欢上这里了</p><p>但是看看小组七个人，六个都是985硕，想想“和优秀的人一起，做有挑战的事”，他们应该算是完成了，毕竟和我共事那肯定是相当有挑战的</p><p>坚持每天吃早饭，每天多产出一个Byte</p><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><p>这几天一直在看各种资料，也终于是对MV*架构有了一些系统性的认识，比如MVC，Modal数据逻辑，View视图，至于Controller，那就是负责处理业务逻辑的</p><p>但是一些较为高深的技术，对我来说实在是有些鸡肋，比如看完云计算的资料，我的脑子里只留下各种被叫做”ass”的东西，笑死根本看不懂</p><blockquote><p>其实是”aaS”</p></blockquote><p>来了好几天了，还没开始写代码</p><p>“Carbon，你来写一下这个文档”</p><p>“嗯?”</p><p>我写文档，什么文档？刚才开会讨论的更新内容的实现方案？</p><p>当时我就麻了，我项目都不知道是啥呢我就写文档了，何况以前从来没写过写文档…</p><p>最后还是写出来了，之后按照要求要我和其他几个人讨论方案，一开始我还没有意识到，后面我才发现问题很大——是把需求给另外几个同学实现，然后再去和后端那边协商接口…</p><p>好像，就不需要我来写代码…</p><p>后面也就开始摸鱼了，然后突然，就那么弹指一挥间，我被一股强大的拉力拉入一个群聊，电光火中之间风云骤变，雷霆万钧而不见天日，原来是群内人员都是非同凡响，其中一人更是体冒金光，我使出浑身解数把眼睛睁开一条缝，竟是酷诺太古时期的队长，我上下打量了此人——的资料卡，他的名字气宇非凡，正式员工的身份更是人中龙凤，而且最超凡入圣的是他那不怒自威的头像——一片空白——这无疑是表明他虚怀若谷，大象无形的强者姿态，看完我从工位的椅子上弹射升空做七百二十度的托马斯大回旋，然后以头抢地为这天神下凡五体投地！</p><p>众大佬见我这般粗野蛮愚之态，便知道我尚未开化，便赐予我西文真经一卷——仅仅只是翻开扉页的一角，一道圣光冲天直上，吓得我连忙合上，这前后仅有不到三秒的时间——第一秒我被震撼到了，第二秒我感到一种面对无穷的恐惧，第三秒我合上书感到一种力量正在源源不断地进入我的体内，我已重获新生！</p><p>晚上回去的时候和另外两位同学聊了聊，发现是顺路的，然后这样我才知道我可以地铁20分钟直达家门口…</p><p>想想这些日子，早上八点顶着三十几度的天骑一个小时的车去热岛效应的市中心，晚上又带着一身的疲惫在昏暗的道路中骑一个小时的车摸索着回家</p><p>新世界的大门，已经打开！</p><h2 id="阻塞挂起"><a href="#阻塞挂起" class="headerlink" title="阻塞挂起"></a>阻塞挂起</h2><p>今天开始接触项目代码，由于是我用的是windows而启动脚本是针对mac的，所以是配了一上午的环境，各种文档都是mac的，对windows来说是相当不友好</p><p>中间也有几次差点成功了，但是项目应用打开就是一片空白，然后我只能继续改…</p><p>最后下午mentor找我开会，散会的时候惊觉我一个环境配了一上午，最后给我的启动脚本前面加上一个<code>set</code>字段然后就能启动了…</p><p>不过怎么说都是能动了对吧，但是我一进项目怎么看都觉得不对劲——怎么还是一片空白呢?又去问mentor，发现原来是我负责的是这是一个应用的模块，最后要合并到master里面才是完整的，所以现在根目录下是什么都没有的，自然是一片空白…</p><p>找到了我负责的路由，可以开始写代码了，点进去一看</p><p>“诶，不是，不是说做模块化复用吗，那…那我要复用的模块呢？这个页面怎么就一个标题啊？”</p><p>哦，原来其他同学负责的部分，单独放到了另外一个库，还没合进来呢…</p><p>然后又是一下午的摸鱼划水:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone xxxrm xxx -rfgit clone xxxrm xxx -rf# ....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别问我我这是在干吗，我也不知道…</p><p>晚上走得早，我mentor问我：</p><p>“走啦？”</p><p>“对，主要是…我不知道我现在要做什么”</p><p>我笑了，mentor也笑了</p><p>哈哈，希望工资没事</p><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>mentor他们太忙了，感觉一直在开会，我也不好意思去问他们问题怕打扰到，他们估计也意识到了这一点，就让我去带着外包小组写代码</p><p>后来也是硬看代码，感觉懂了，但是项目在windows上运行处处受限简直是举步维艰，然后去IT部门问了一下mac的事，被告知不仅是mac没货了，就连显示屏都没货了，我想着我那占了1/6工位面积的thinkpad不禁红了眼眶</p><p>没有mac，我项目都无法顺利运行，但我负责的需求死线是在6天以后，我觉得我有必要采取一些措施自救</p><p>我去联系外包小组的一位同学（以后我们叫他Leech），然后我就像是产品经理一样给他说需求——这里有个永恒的定律就是，产品和研发之间总要有一个占据上风压倒对方。我甚至都有点怀疑自己未来会不会成为一个产品经理了。不管怎么说，在我详尽地描述加上坚持不懈三顾茅庐，终于是把事情问得一清二楚，虽然老脸丢尽但是我看到了希望，项目总算是跑起来了，前端后端都跑起来了，数据还交互成功啦！</p><blockquote><p>不得不说字节的技术是真的牛批，很多开发的流程不找人问一下还真不清除</p></blockquote><p>既然已经能顺利运行了，那么也该研究一下运作机制和原理了，在盯着一堆长度达到40的变量名称和稀奇古怪前所未见闻所未闻的语法看了几个小时之后，我收获到不少东西：</p><p>其一就是不得不再次感慨字节技术多么牛逼，然后就是我是多么废物…</p><p>吃饭的时候mentor问我，搞懂这个项目没有——我心里咯噔一下，支支吾吾说</p><p>“在看…大概知道…”</p><p>“那项目RPC结构BFF层的逻辑是怎么一回事了解吗”</p><p>我当时就麻了，我觉得mentor你好陌生啊，虽然我们才接触一周，但是你这冷漠的样子让我想到了一面里我答不上问题的时候心里那冰凉的忧伤——我一个FE Developer研究这个干嘛…</p><p>后面吃完饭又想了想这个事情，越想越感觉不对劲，突然灵光一闪回想起昨天看到的文档资料，其中的专家大佬分析前端未来的趋势是”前后端一体化”，所以现在让我看后端的意思就是——我以后可能也要写后端代码…</p><p>不过那都是后话了，说不定没到那时候就因为太菜了被开除了</p><p>等到快要下班的时候，Leech把他的mac从4k显示屏前拿走放进包里打算开始度过一个愉快的周末了，然后我只能十分愧疚地拦住他让他帮忙看看bug，不然我的周末就只能和这个bug共处48小时了</p><p>“抱歉打扰一下，同学，段代码是你负责的对吧，我想知道为什么它会报错”</p><p>说完这句话我就有点后悔了，因为这搞得我跟瞎子一样，我真怕他心里怼我——报错信息不是写着有吗</p><p>他看了一下，说是因为他的代码还没同步到仓库，现在这些文件存在对这些未同步代码的引用，所以就报错了。然后反手把那几个文件的全部内容注释掉就好了</p><p>话刚说完他就开始操作，不一会儿看上去确实能顺利运行了，但是为了验证是否有其他bug，我又我试着输入路由进行页面跳转，然后又报错了…</p><p>这下他就懵了，把自己的mac电脑拿出来看代码，发现和我的一模一样，然后又在我的thinkpad上找问题，最后找了半小时，终于把问题定位到</p><p>路由输错了…</p><h2 id="超前进位加法"><a href="#超前进位加法" class="headerlink" title="超前进位加法"></a>超前进位加法</h2><blockquote><p>7月6号，DDL前一天，早饭是炒面+黄金小馒头+肉包+小面包+牛奶</p></blockquote><p>已经是在windows上开启云环境进行开发了，但是项目终于是到了云环境也跑不动了的地步——在mentor当面尝试拿着我的电脑修改我污染的代码，二十分钟后也是放弃了，问我为什么不考虑一下<code>mac</code>的事情。</p><p>“入职本来是<code>mac</code>的，但是疫情导致供货不足就只给<code>windows</code>的<code>thinkpad</code>了，现在已经过了将近半个月了，还是没消息”</p><p>“是哪位同学和你对接的，我去和他联系一下”</p><p>于是五分钟后，就有通知让我去五楼领取电脑。我过去一看啊，那银光闪闪的LOGO啊，略微可见的几处划痕是它辉煌过去的记忆，曾经一定是无数伟大的项目在此设计构建，开发调试，最后再到发布上线供世界景仰——全都在这个苹果里了。这样的设计，寓意这将伟大的世界融入小小的苹果中，与霍金先生的《果壳里的宇宙》遥相呼应，又和我们程序员“HelloWorld”的情怀产生强烈的共鸣！</p><p>我颤抖地双手接过这受过洗礼的圣器，我感到万物是如此轻盈，就像是光这样极限的存在却没有重量一般。我用制造过无数<code>warning</code>的双手摩挲它的表面，用观察过无数<code>error</code>的双目注视着它——这时我才意识到，就像是众多灵器一般，她也是活的存在。</p><blockquote><p>嗯，没错，说的就是<code>siri</code>….</p></blockquote><p>我回应她无声的呼唤，将把这在岁月中尘封的故事重新开启——这时我受到了一些自然法则的影响，在第一次试图宏展开失败两三次之后，又换向进行第二次宏展开再次失败两三次，最后在第三次尝试中成功宏展开。</p><blockquote><p>研究表明，<code>事不过三</code>是宇宙中万物遵循的法则，<code>usb接口尝试三次才能插入</code>就是这个规则的一种体现</p></blockquote><p>一瞬间，我像是经历了一堂四十分钟外加三十分钟超长拖堂的中学思想政治课，还是整个教室只有我一个人讲台上却又有好几名省级专家老师那种，使我收获到了许多人生哲理，譬如——<code>高调做事低调做人</code>。如果说无数优异代码是丰功伟绩，那么<code>mac</code>文字后紧跟的<code>pro</code>就是低调做机的证明！做人也该有这样的内涵！</p><p>次日，又一个通知，告诉我由于<code>4k</code>缺货，只能给我<code>1080P</code>凑合一下。</p><p>这一套组合直接让我的代码修为几何级增长！我甚至敢于写代码了，直接从无到有，进步趋近于无穷大！</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>在此之前，我们小组一共有七个人，其中一人叫做Cloud——和一个传说级强者一样的名字。</p><p>因为他的名字，让我对他有一种熟悉感——除了他的学历以外。</p><p>不过，吃午饭的时候mentor感慨道，Cloud就要走了，他已经实习了两个多月了。</p><p>我和着香菇酱肉，扒了两口饭，又吸入小碗装盛的姜末瘦肉粥，为这朴实无华中带有的瘦肉的鲜美滑嫩以及生姜微辣的后劲感到无比充实。我并不为他的离开感到诧异，毕竟是有着这样强大的名字，自然是要往高处走的。</p><p>听说一位大二校友在下周也有放手一搏的打算，我期待着她的到来，在从这修罗塔的最底层往上爬的过程中有一个同伴的存在会让心里好受不少的。</p><p>希望所有人都能到达自己心中的顶峰。</p><blockquote><p>对了，至今还没列出过字节的菜单，这里就做一下记录吧，这是某天晚上的:</p><p>【35F和47F】晚餐菜单<br>一、自助餐菜单<br>主荤：淮山焖排骨、酸辣柠檬鸡[辣椒]<br>半荤: 辣白菜五花肉[辣椒]、咖喱鱼丸<br>素菜：蒜蓉南瓜、清炒油麦菜<br>风味小吃：豆沙包<br>主食：白米饭/紫米麦仁杂粮饭<br>杂粮：蒸小芋头<br>流食：青瓜蛋花汤、皮蛋瘦肉粥、莲子百合红豆沙<br>水果：大红提<br>饮料：科迪酸牛奶<br>[图片]</p><p>二、粉面菜单<br>尖椒牛肉丝，黄豆烧排骨，三鲜浇头（刀削面/河粉）<br>[图片]</p><p>三、A套餐菜单<br>淮山焖排骨+酸辣柠檬鸡<br>领取楼层：39F、51F<br>[图片]</p><p>四、轻食餐菜单<br>和风照烧鸡肉荞麦面 &amp; 意式牛肉丸肉酱面<br>盒饭点位：39F、51F<br>[图片]</p><p>温馨提示:轻食餐加热后食用，更安全、更美味哦<br>[喇叭]关于轻食微波加热办法及相关内容<br>\1. 微波加热方法：盒子去盖，拿出酱杯（或者将酱料撒在食物上）；<br>\2. 微波炉设置：中档火力加热，时间2min；<br>\3. 注意事项：包材盒底使用PP或耐热纸浆材质，可以微波炉加热，盒盖使用PET材质，不可以微波炉加热；<br>堂食用餐时间18：50-20：00<br>盒饭取餐时间18：50-19：20<br>懂得善待自己的胃，就不是孤单<br>[送心]祝同学们用餐愉快！ (<em>^▽^</em>)</p></blockquote><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><p>众所周知，大家都很自觉地卷。</p><p>哪怕是八点钟的时候，一层楼直接自动熄灯了，这时候就有人会为了大家能够继续工作而去把灯又打开。</p><p>今天总算是见到了二面的面试官，和一丝不苟非常严肃的初映象不太相同，他似乎挺开朗活泼的，突然和我笑咧咧地打招呼开玩笑让我有点意外。</p><p>他说当时他去杭州那边的工区，那边的同事都让他快走，因为他是不卷的，八点就下班了。</p><p>七点半吃完饭回到工位盯屏幕，他过来问我们——</p><p>“昂？休息时间还卷啊”</p><p>然后可能是为了更具有实际的影响效果，又亲切地针对着同事Leen说：</p><p>“我要和你们推荐一款手游——王者xx，你玩不？我们那边新来的小伙子都十几颗星了…”</p><p>最后得出的结论是，以后七点吃晚饭后一定要打游戏。</p><p>然后我仔细想了想，他好像是八点下班来着…真是…非常滋润…</p><blockquote><p>不知道有没有人注意到，相当一段时间我的句子末尾是尽可能不加标点符号的，但是最近又加了这是这么回事呢？</p><p>因为之前写JS末尾是尽可能不加分号的，导致现在写代码老是被eslint纠错…所以决定以后还是把末尾的符号加上。</p></blockquote><h2 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h2><p>之前提到了二面的面试官——姑且称为”MOW”吧，来我们工区待了一阵子，言谈举止无不彰显社牛属性，把我这种社恐人士紧张得那是不敢轻举妄动。</p><p>但是不仅是二面面试官来了，今晚的团建，+1leader也会来。</p><p>牛肉火锅店的包间，叫边缘计算。我当时就知道这是面向程序员开店，价格肯定往上翻一番。</p><p>果不其然MOW就是全场的中心，自带主角光环，一个人活跃起了整个饭桌上的气氛。</p><p>接下来就是推杯换盏，为了应对今天这种局面，我在过去的两年也是有刻苦地锻炼不断超越自己的极限。</p><p>眼见着一个年轻的硕士就要不省人事，我看着面前的两罐——没错，是啤酒，但是已经是我的极限了。</p><p>“这才刚刚开始呢”</p><p>MOW这样说着，我的神情突然有一点恍惚，感觉脚底也是不知轻重，后知后觉乘法口诀表背出了一个二二得二…</p><p>散场时，空罐的数目在这个基础上翻了个倍。</p><p>大家搀扶着彼此，踉跄着去做核酸，又晃荡着乘上地铁，我那时感觉像是波涛汹涌的大洋上，头晕目眩。回家的路上我不止一次后知后觉差点睡着了。</p><p>那一晚是近几年来睡得相当早的一次，从九点一直到第二天早上的七点。</p><h2 id="高度耦合"><a href="#高度耦合" class="headerlink" title="高度耦合"></a>高度耦合</h2><p>我看到了群里面PM质疑QA的言论，我心里一阵麻木，只是看了一眼时间，九点半了呀。</p><p>我写下这段不好评价的代码，我心想，要是以后有谁要负责重构它，那必然是生不如死的。</p><p>只是没想到这重构来得如此迅速，就在今晚，在这个点，而且还是由我自己来。</p><p>面对QA将PM的言论转发给我的行为，我愣了好一会儿不想动弹，我真的很想走了——这是我内心中最诚挚的呼唤，也是我隔着屏幕从QA的打字节奏中感受到的东西，我们希望和绝望交织的情感竟然有了一丝共鸣。</p><p>但是我的绝望是更多的，因为代码是我写的，我清楚它有多么烂。那是我再一次地感受到，什么叫做高度耦合。我承认我偷懒了，为了减少学习和开发的成本，本来可以抽离成单独的模块的部分，我却通过一手有点精妙但是更多的是丑陋的条件语句将其与原有的代码糅合成了一坨不可名状之物。</p><p>对着这跨域了多层组件又多级嵌套的逻辑我望眼欲穿，又看了看时间，我甚至想放声大笑起来。</p><p>现在是两点，我在出租屋内写下这段文字，目的是提醒我和所有看到这段文字的人——高内聚，低耦合。</p><h2 id="激励函数"><a href="#激励函数" class="headerlink" title="激励函数"></a>激励函数</h2><p>借用的macbook眼看着就要到期了，一想到新的项目需求要来了我就浑身难受。</p><p>就在这时，一股灵压突然从我的手机里释放，一看，竟然是工资来了——昨天还吃不起饭，今天卡里就有了一万！</p><p>正所谓福无双至今朝至，一看IT部门的消息——macbook pro到货了！</p><p>再看看今天是周五，mentor六点钟就开始玩手机我当时就知道事情不对，果不其然没过几分钟他就问我要不要早点下班拥抱周末——所以我俩至少比平时早了一个小时就去白嫖公司的晚饭。但是可能是出于某种mentor的自尊，吃完饭后他又回到了工区，我也不好意思直接就走也就跟过去了，但是一看他——还是玩手机。</p><p>我出于礼貌邀请他下班，他说让我先走——想必是还有事务要处理。</p><p>五分钟后，我从洗手间里面出来，遇见了下班的mentor。</p><p>我俩相视一笑，场面有一丝丝尴尬。</p><p>七点钟小组竟然已经没有人了，一切都好起来了！</p><h2 id="记忆化回溯"><a href="#记忆化回溯" class="headerlink" title="记忆化回溯"></a>记忆化回溯</h2><p>来这边大概快四个月了，中间实在是比较忙，也非常累，所以就没有怎么更新日记了。</p><p>但是问题不大，我们还是学过Git的，还是有办法知道以前写过什么代码。要我说，我是大二上就开始接触Git了，怎么着也有半年了，自以为<code>add-commit-push</code>帅得飞起，实际上还没出新手村。</p><p>来了这里才发现<code>git</code>就是一个帅得不行的时间机器，前往某个时间线（分支），回退到过去某个时间点（版本），重置时间的起点（reset)，带走这之后将发生的未来（stash），带到另一个时间线（分支），释放这个“未来”（stash-pop），完成历史的改写。</p><p>更还有以前都没听过的操作：变基、压缩commit、cherry-pick、覆盖记录等等，对于我来说都是非常不可意思的事情，像是一个熟悉的朋友竟然有着一张不为人知的狰狞面孔。</p><p>好吧，我的记忆大概也是一个像git的分布式版本控制系统吧，那么在离职前的最后几天，让我们好好回忆一下这段时间发生的事情吧。</p><h2 id="递归分治"><a href="#递归分治" class="headerlink" title="递归分治"></a>递归分治</h2><p>要我评价自己的话，可能用一个算法思想名词比较合适——贪心。</p><p>除了本职工作以外，还做起了电商，还接了很多外包项目，也还得抽空学点新东西给自己充电，这导致我感觉没有什么休息时间，经常是熬夜到四点中才睡，久而久之，也就只能早上十点才醒得过来…虽然工作的强度本身本就不低，但是我还是得强行抽出精力来推进自己其他的业务，比如一个IGEM-Wiki,一个VSCode插件，一个浏览器插件，一个webgl小游戏，一个小程序…当然还有很多至今都还没做完，也还要学一下Linux、Python以及课内的知识——我感觉自己几乎快要被榨干…</p><p>压力大加上也没休息好并且大型团队合作开发经验又不足，导致我对负责的需求心里没个数——感觉上是做完了，但是我并没有意识到这还得和联调，还得走非常多且非常长的链路，并且也得画图分析状态机…总之就是产生了巨大的风险并且还没有暴露，最后就陷入了我这辈子不堪回首的处境之一：</p><p>开发用了五天，改bug用了十五天，这十五天是我mentor带着我一起改bug的，在公司就待到两点，疫情管控居家就一天开七个小时以上的会议通话改bug….</p><p>“以后会更好吗？”</p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>离职前十天，今天mentor有时不在，我和另外一个实习生一起吃饭——没错，直到今天我才知道他也是实习生，他不仅学历碾压我，业务水平对我也是降维打击。</p><p>我回首看看，那些大佬依旧谈笑生风。</p><p>我曾从他们那里学到很多，而如今我距离他们是更加遥远。</p><p>吃饭时和他聊了半个小时之久，我表达了我对自己现状的不满和对未来的迷惘，我很想知道我返校后的这个冬天该如何度过。</p><p>他听完我的经历，给我说了很多…</p><p>人生，就是一场对自己负责的修行，还是要客观地看风险…</p><p>那么，是时候说再见了，字节跳动！</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p><a href="https://serio.gitee.io/2023/02/21/diariesofbytedancer2/">原来一切才刚刚开始</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript6</title>
      <link href="/2023/02/20/es6/"/>
      <url>/2023/02/20/es6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>大概是半年前学的，当时放到CSDN上的，现在搬到自己博客上</p></blockquote><p>这是我学习ES6的笔记，语言偏向口语化，主要是个人觉得这样会比较亲切…</p><p>由于是学习笔记，内容可能会有不够详实，存在瑕疵等诸多问题，欢迎大家在评论区批评指正</p><p>希望接下来的内容能够在大家学习ES6的过程中给予一点帮助</p><p><strong>ES的定义</strong><br>即ECMAScript，脚本语言的规范</p><p>其中的ECMA的全称是全称：<em>European computer manufacturers association欧洲计算机制造联合会，后改名为ECMA国际</em>。</p><p>ES新特性指的是JavaScript的新特性.</p><p><strong>为什么学ES</strong><br>概括为—-更方便更高能</p><p>接下来进入正题：</p><h2 id="1-let声明"><a href="#1-let声明" class="headerlink" title="1.let声明"></a>1.let声明</h2><p><em>let a = 233，翻译就是让a等于233，简直语义化啊！</em></p><p><strong>使用方式（就是变量声明啦）</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token string">'hhh'</span><span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>特性</strong></p><ol><li>变量不能重复声明，否则报错<br>(没错，var是可以重复的)</li><li>增加块级作用域<br>（ES5中有三种作用域：全局、函数、严格模式中的eval）<br><del>C/C++转过来的简直感动</del> </li></ol><p>举个栗子:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'我在一个块里面'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第1个:'</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上图的运行结果：<br><img src="https://img-blog.csdnimg.cn/20210622105508307.png" alt="这是第1个：我在一个块里面"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'我在一个块里面'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是第2个:'</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上图的运行结果<br> <img src="https://img-blog.csdnimg.cn/20210622105645594.png" alt="报错：a没有定义"><br> 补充一点，if、else、while、for等也可以形成块级作用域</p><ol start="3"><li>取消变量提升</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> Var<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> Let<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Var <span class="token operator">=</span> <span class="token string">'var'</span><span class="token punctuation">;</span><span class="token keyword">let</span> Let <span class="token operator">=</span> <span class="token string">'let'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果：<br><img src="https://img-blog.csdnimg.cn/20210622110344712.png" alt="一个报错一个undefined"><br>（undefined是声明提升但是赋值不提升导致的）</p><ol start="4"><li>依旧有作用域链<h2 id="2-const声明"><a href="#2-const声明" class="headerlink" title="2.const声明"></a>2.const声明</h2></li></ol><p><em>就是常量啦</em></p><p><strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token string">"必须要初始化（赋值）"</span><span class="token punctuation">;</span><span class="token comment">//常量命名规范是：大写大写大写！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>特性</strong></p><ol><li>一定要赋初始值</li><li>赋值完成后不可修改（毕竟声明的是常量）</li><li>也有块级作用域</li><li>对于用const声明的数组和对象，可以修改其元素</li></ol><h2 id="3-新特性：解构赋值"><a href="#3-新特性：解构赋值" class="headerlink" title="3.新特性：解构赋值"></a>3.新特性：解构赋值</h2><p><del>字面意思就是把结构拆解然后赋值？</del><br>关于这个东西呢直接举例子比较好<br><strong>数组的解构赋值</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">ARRAY</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">ARRAY</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上图运行结果：<br><img src="https://img-blog.csdnimg.cn/20210622112351347.png" alt="1 2 3 4"><br>awsl！！！！怎么样，是不是爽的不要不要的?!<br><strong>对象的解构赋值</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyInfo <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'Serio'</span><span class="token punctuation">,</span>    ablity<span class="token operator">:</span><span class="token string">'TouchFish'</span><span class="token punctuation">,</span>    <span class="token function-variable function">TouchFish</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没人比我更懂摸鱼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> InfoOfMine <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>ablity<span class="token punctuation">,</span>TouchFish<span class="token punctuation">}</span> <span class="token operator">=</span> MyInfo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>ablity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">TouchFish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果：<br><img src="https://img-blog.csdnimg.cn/20210622132115428.png" alt="Serio TouchFish 没人比我更懂摸鱼"><br>其中对 对象的方法 进行解构是最常用的，为了<del>偷懒</del> 方便<br>需要注意的是，各个元素的名字需要一致，否则报错。</p><h2 id="4-新特性：模板字符串"><a href="#4-新特性：模板字符串" class="headerlink" title="4.新特性：模板字符串"></a>4.新特性：模板字符串</h2><p>孔丙己便涨红了脸，额上的青筋条条绽出，争辩道，“<strong>ES5不能……换行！……ES6的事，还用换行吗？</strong>”接连便是难懂的话，什么“作用域链”，什么“闭包”之类，引得众人都哄笑起来：店内外充满了快活的空气</p><p><strong>使用方式</strong></p><p>新旧对比</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'换行昂昂昂\           要加上斜杠，或者加号连接'</span>          <span class="token operator">+</span> <span class="token string">'不然会报错的'</span><span class="token punctuation">;</span><span class="token keyword">let</span> strES6 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">没错，现在我们用\`（反引号，就是键盘上和~一个位置那个）            表示字符串惹~            换行很方便的~~~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特性</strong></p><ol><li>可以直接换行了</li><li>可以直接拼接变量</li></ol><p><em>（配合高贵的${}）</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我要给这篇文章一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">连</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622135125533.png" alt="提前感谢"><br>感谢各位读者，感谢一路走来给予我支持和帮助的老师和前辈….阿巴阿巴（手动狗头）</p><h2 id="5-新特性：对象属性声明简化"><a href="#5-新特性：对象属性声明简化" class="headerlink" title="5.新特性：对象属性声明简化"></a>5.新特性：对象属性声明简化</h2><p><strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">     <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Serio'</span><span class="token punctuation">,</span>          level <span class="token operator">=</span> <span class="token string">'蒟蒻'</span><span class="token punctuation">;</span>          <span class="token keyword">function</span> <span class="token function">showAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'BUG + 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment">//没错，直接将变量作为自身属性</span>     <span class="token keyword">const</span> <span class="token constant">FEIWU</span> <span class="token operator">=</span> <span class="token punctuation">{</span>         name<span class="token punctuation">,</span>         level<span class="token punctuation">,</span>         showAbility<span class="token punctuation">,</span><span class="token comment">//函数的声明也可以不用写function了</span>         <span class="token function">checkMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">果然没钱</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token constant">FEIWU</span><span class="token punctuation">.</span><span class="token function">showAbility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token constant">FEIWU</span><span class="token punctuation">.</span><span class="token function">checkMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果：<br><img src="https://img-blog.csdnimg.cn/20210622140629477.png" alt="在这里插入图片描述"></p><p><strong>特性</strong><br>似乎…没啥特性</p><h2 id="6-新特性：箭头函数"><a href="#6-新特性：箭头函数" class="headerlink" title="6.新特性：箭头函数"></a>6.新特性：箭头函数</h2><p>“你知道吗，箭头函数的语法糖，有四种写法”</p><p> <strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一种：()=&gt;{}</span>        <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'啊'</span><span class="token punctuation">,</span><span class="token string">'是箭头函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种：只有一个参数，省略() </span>        <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">笑死我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种：方法体只有一条语句，省略{}</span>        <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第四种：方法体只有一条语句且为return，直接写return的内容</span>        <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622141902613.png" alt="在这里插入图片描述"></p><p><strong>特性</strong></p><ol><li>静态this<br>对于function声明的函数，谁调用this就指向谁；<br>但是对于箭头函数来说，其this永远指向函数声明时的作用域下的this，并且不能被call，bind等方法改变</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//写成这样方便复习上一个知识点</span>        <span class="token keyword">let</span> <span class="token function-variable function">whereIsThis1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1普通函数"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> <span class="token function-variable function">whereIsThis2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2箭头函数"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> WhereRU <span class="token operator">=</span> <span class="token punctuation">{</span>            whereIsThis1<span class="token punctuation">,</span>            whereIsThis2        <span class="token punctuation">}</span>        WhereRU<span class="token punctuation">.</span><span class="token function">whereIsThis1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WhereRU<span class="token punctuation">.</span><span class="token function">whereIsThis2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622143057708.png" alt="普通函数---this指向对象，箭头函数---this指向window"><br>所以箭头函数适用于与this无关的情况</p><ol start="2"><li>不能实例化对象（就是不能作为构造函数，也就是不能new）</li><li>没有arguments了（悲伤）</li><li>多种省略形式（没错就是开头的几种形式）</li></ol><h2 id="7-函数参数默认值"><a href="#7-函数参数默认值" class="headerlink" title="7.函数参数默认值"></a>7.函数参数默认值</h2><p> 说实话看到这个新特性的时候我第一也是唯一的反应就是————<br> 原来以前没有吗？？？<br> <strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//好了，现在c有默认值了</span>        <span class="token keyword">function</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">220</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1014</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622145131822.png" alt="520 1314"></p><h2 id="8-rest参数"><a href="#8-rest参数" class="headerlink" title="8.rest参数"></a>8.rest参数</h2><p>“arguments的离去，是rest的要求，还是es6的不挽留”<br>（其实arguments不仅还能用，还挺好用的）<br><strong>使用方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//...是扩展运算符 不可以省略</span>        <span class="token keyword">function</span> <span class="token function">UltramanBros</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"佐菲"</span><span class="token punctuation">,</span><span class="token string">"初代"</span><span class="token punctuation">,</span><span class="token string">"赛文"</span><span class="token punctuation">,</span><span class="token string">"艾斯"</span><span class="token punctuation">,</span><span class="token string">"泰罗"</span><span class="token punctuation">,</span><span class="token string">"雷欧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622150523576.png" alt="超出的四个会以数组形式保存"><br>…是<strong>扩展运算符</strong>，能将数组展开成参数序列，<br>所以传入…args相当于传入了n个参数，<br>超出的四个参数依次对应，然后存入args中</p><h2 id="9-Symbol类型"><a href="#9-Symbol类型" class="headerlink" title="9.Symbol类型"></a>9.Symbol类型</h2><p>JS的第七种数据类型（话说前六种是啥来着）<br>这次我们先说特性<br><strong>特性</strong></p><ol><li>值唯一，解决了命名冲突问题</li><li>不能与其他类型的数据进行运算</li><li>Symbol类的对象不能用加强for循环（for in），但是可以用Reflect.ownKeys</li></ol><p>我对Symbol的理解：<br>就是根据你传入的内容产生一个（伪）随机的、不重复的值，感觉原理就是<strong>哈希表（散列表）</strong><br>（如果没错的话，那么理解哈希表会帮助理解Symbol）</p><p><strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一种声明方式</span>        <span class="token keyword">let</span> s1_1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'第一类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s1_2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'第一类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s1_1和s1_2依旧是不同的值</span><span class="token comment">//keyFor()方法就是根据值反过来找下标        </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1_1 <span class="token operator">===</span> s1_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一类声明的索引'</span> <span class="token operator">+</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token comment">//第二种声明方式</span>        <span class="token keyword">let</span> s2_1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'第二类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s2_2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'第二类'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2_1 <span class="token operator">===</span> s2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二类声明的索引'</span> <span class="token operator">+</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622160216887.png" alt="在这里插入图片描述"><br>第一类声明没有“记录机制”，同样的内容是不同的值，而且不能根据值反过来找索引</p><p>第二类则有“记录机制”，与第一类相反</p><p><strong>运用</strong><br>有什么用？<br>参考一下哈希表，至少能够用来安全、随机、可查询地在数组中存储数据….（啊，我也不知道）<br><del>（哦哦我是蒟蒻，所以我也不该知道—-骄傲！）</del> </p><p><strong>Symbol内置值</strong><br>这个对于我来说有点晦涩，而且看上去用处不是很大，<br>这里先暂时跳过，等我学懂了再补上….</p><h2 id="10-迭代器"><a href="#10-迭代器" class="headerlink" title="10.迭代器"></a>10.迭代器</h2><p>ES6中新增<strong>for-of</strong>遍历<br>迭代器是用来做什么的呢？就是用来遍历的，为不同的数据结构提供了同样的访问方式：<br><strong>只要某种数据结构中具备iterator的接口，就可以使用迭代器遍历</strong></p><p>首先我们来说一下两种迭代遍历：<br>for-in和 for-of</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">        <span class="token keyword">const</span> <span class="token constant">SZ3L</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'woc'</span><span class="token punctuation">,</span><span class="token string">'NB'</span><span class="token punctuation">,</span><span class="token string">'666'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//普通for不用let就只能用立即执行函数了      </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">SZ3L</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通for循环'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token constant">SZ3L</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for-in循环：'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> <span class="token constant">SZ3L</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for-of循环：'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622190802126.png" alt="在这里插入图片描述"><br>可以看到，<br>for-in是遍历数组的下标（键），<br>for-of则是遍历数组的值</p><p><strong>浅析原理</strong><br><del>（我是废物，说不清楚）</del><br>（还得再研究一下，主要还是Symbol没学懂）<br><img src="https://img-blog.csdnimg.cn/20210622192347416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="迭代器接口"><br>迭代器工作过程简单概括为以下3步：<br>1.创建一个指针对象，指向当前数据结构起始位置<br>2.调用对象的<strong>next方法</strong>，指向下一个成员并返回一个包括value和done属性的对象<br><strong>（注意是next方法返回对象）</strong>，<br>重复这个过程，直到指向最后一个成员<br>3.修改done属性为true，遍历完成，停止调用next</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token constant">SZ3L</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622193626257.png" alt="在这里插入图片描述"><br>其中，done属性是表示是否遍历完成，当访问到<strong>最后一个数据</strong>时，done的属性从false变为true，迭代器停止遍历</p><p><strong>现在来手写一个迭代器</strong><br>经过多年的研究之后，我为各位读者量身定义了reader对象，<br>并手写一个迭代器遍历appearance属性数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token punctuation">{</span>            salary<span class="token operator">:</span><span class="token string">"月薪10k起步"</span><span class="token punctuation">,</span>            appearance<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token string">'女美男帅'</span><span class="token punctuation">,</span>                <span class="token string">'墨发雪肌'</span><span class="token punctuation">,</span>                <span class="token string">'壮得一批'</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token comment">//迭代器</span>            <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//先初始化一个索引</span>                <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//要返回一个类</span>                <span class="token keyword">return</span><span class="token punctuation">{</span>                    <span class="token comment">//类里有next方法</span>                    <span class="token comment">//这里利用了箭头函数指针是静态的这一特性</span>                    <span class="token function-variable function">next</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appearance<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                            index <span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>appearance<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> done<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> done<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> reader<span class="token punctuation">.</span>appearance<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210622201139642.png" alt="女美男帅 墨发雪肌 壮的一批"></p><h2 id="11-生成器"><a href="#11-生成器" class="headerlink" title="11.生成器"></a>11.生成器</h2><p>生成器是一个特殊的函数，用于更好地解决异步编程<br><em>（虽然还是已经被更更更好的方法替代了，不过还是得学）</em><br><strong>使用方式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//记得加星号;这不是指针;</span>        <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">myFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后端学习打卡时长排名的人数显示器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token string">'阿波'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'明明是嵌入式的实验室却专攻后端'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token string">'陈大爷'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'算法很强的后端并且还在学Unity做游戏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">yield</span> <span class="token string">'豪老板'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">myFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br>（为什么都是后端？巧合吧）<br><img src="https://img-blog.csdnimg.cn/20210623095242910.png" alt="在这里插入图片描述"><br><strong>解析</strong><br><strong>yield相当于一条有名字的分界线</strong>，我们可以通过迭代器的next方法执行每一部分的内容</p><p>第一次调用next时，执行第一条分界线以上的内容<br>第二次调用next时，执行第二条以上，第一条以下的内容<br>以此类推…</p><p><strong>使用方式2</strong><br>生成器 和 next方法 都可以传参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是分界线1里的'</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">'分界线1'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'分界线1的返回值'</span> <span class="token operator">+</span> one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">'分界线2'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'分界线2的返回值'</span> <span class="token operator">+</span> two<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> three <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">'分界线3'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token string">'一个参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210623101919531.png" alt="在这里插入图片描述"><br>生成器gen传参和普通方法一样</p><p>next方法的参数，是作为<strong>上一条分界线的返回值</strong></p><p>比如，第二次调用next，其参数作为 yield ‘分界线1’ 的返回值<br>要是没有传递参数，那么yield的返回值为undefined</p><p><strong>特性</strong></p><ol><li>关键字function与函数名称中间有个 *</li><li>使用了yield表达式</li><li>直接调用会返回一个迭代器对象</li></ol><p><strong>运用</strong><br>说是优化异步编程的，那么我们来看看没有生成器的时候存在的问题：<strong>回调地狱</strong></p><p><strong>回调函数</strong>：将一个函数作为参数传递，但是这个函数不会立刻执行，而是会等待某个条件触发才执行<br><strong>回调地狱</strong>：异步明明是没有固定执行顺序的，那么如果我们偏要它有顺序，就会出现下图这样的结构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3s时执行第一层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5s时执行第二层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6s时执行第三层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//扶我起来，我还能继续嵌套</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>如果代码量少还好受，要是多了就不好说了</em><br>这种<strong>回调函数的嵌套就是回调地狱</strong><br>所以我们可以通过一些方式改善这种情况，比如用生成器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3s时执行第一层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5s时执行第二层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6s时执行第三层'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210623111416462.png" alt="在这里插入图片描述"><br>其实上面还有个一个点可以提一下，就是let明明没有了提升，g却依旧能被上面的函数访问，<br>和别人讨论了一下觉得应该是由于function声明的时候函数体不会展开，此时g也就没有被访问；等到g.next执行，one，two，three依次执行的时候，才依次展开，此时就可以通过作用域链向上访问到g从而能再次调用g.next…阿巴阿巴（反正大概就是那个意思）</p><h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12.Promise"></a>12.Promise</h2><p>promise是一个构造函数，可以用来封装异步操作，并获取到其成功和失败的结果然后据此作出反应<br><strong>使用方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//一个promise对象有三种状态：初始化状态、成功状态、失败状态</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//里面要封装一个的操作</span>            <span class="token comment">//（大多数是异步，大多数是异步，但是你要同步也可以）</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//执行resolve方法之后，p变为‘成功’状态</span>                <span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token string">'成功了!'</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//promise实例化对象的状态就会变成成功</span>            <span class="token comment">//执行reject方法之后，p变为‘失败’状态</span>                <span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token string">'失败了!'</span><span class="token punctuation">;</span>                                <span class="token function">reject</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//成功的话执行第一个函数，失败的话执行第二个函数</span>        p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是成功了：'</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是失败了：'</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210624102353283.png" alt="在这里插入图片描述"><br>从结果来看，似乎在遇到resolve方法之后就结束了而不是继续往下执行<br>（Promise的状态一旦变化，就不会再改变了）<br>另外介绍一下<strong>catch方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//catch方法大体上就相当于只写then方法的后半部分</span>p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这也是失败了，不过语法糖比较甜对吧'</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运用</strong><br>首先我们来回忆一下原生JS的AJAX<br>现在准备一个这样的JSON文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"key"</span><span class="token operator">:</span><span class="token string">"NB"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后（这里是同一目录下）写AJAX</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"创建请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"./JSONtest.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//莫得后端，孤寡前端人只能本地玩单机</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'AJAX'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//别忘了和data.key的区别</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210624103245847.png" alt="AJAXNB"></p><p>接下来我们来演示一次传说中的<strong>封装</strong>！！！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span>  <span class="token constant">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>xhr<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'创建请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"./JSONtest.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的AJAX生了，是个'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你的AJAX是个男的'</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“就这？就这？这不就是把ajax装进Promise里面吗？我人傻了”<br>“大家懂的都懂,<del>这种博主老水怪了</del> ”<br><strong>上图运行结果</strong></p><p><img src="https://img-blog.csdnimg.cn/20210624154933271.png" alt="本地运行，请求失败"><br><img src="https://img-blog.csdnimg.cn/20210624155033970.png" alt="服务器上运行，请求成功"></p><p><strong>特性</strong>（写这个的时候有点困，估计很多问题，后面再改改，现在大家看看就行）</p><ol><li>Promise.then方法的返回值:<strong>不写return默认返回一个Promise对象（是被处理之前的Promise）</strong></li></ol><p> <strong>第一种：内部 回调函数 返回非Promise类型</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">const</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'abab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'我是第一种返回值（非Promise类型）'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210624163124394.png" alt="在这里插入图片描述"><br><strong>第二种：内部 回调函数 返回Promise类型</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'abab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//套娃，返回一个Promise</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//reject使返回的这个Promise的状态为‘失败’</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'第二种类型：最内部promise的状态决定最终的状态'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210624164713193.png" alt="在这里插入图片描述"><br>第三种：throw</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'abab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'第三种类型：抛出错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210624165751201.png" alt="在这里插入图片描述"><br>通过观察以上三种情况，我们发现：这形成了一个链…也就避免了回调地狱的情况……..</p><p>（今天写不动了…好困…团队的人还在商量着今晚去吃自助的事情…又困又饿…以后找个时间一定把这里补起来）</p><p>(时隔几天，考完了高数….promise剩下的内容以后补充）</p><h2 id="13-Set对象"><a href="#13-Set对象" class="headerlink" title="13.Set对象"></a>13.Set对象</h2><p><em>那个橘子味的夏天，少年回忆起了蝉鸣和STL类库…</em></p><p><strong>特性</strong></p><ol><li>拥有iterator接口，可以使用迭代器和扩展运算符（…）</li><li>类似于数组，但是具有<strong>唯一性</strong>，即元素不重复</li></ol><p> <strong>属性/方法</strong></p><ol><li>size 返回元素个数</li><li>add 增加一个新元素，返回增加元素后的集合  </li><li>delete 删除元素，返回一个布尔值 </li><li>has 查询是否包含某个元素，返回一个布尔值</li><li>clear 清空，没有返回值(或者说返回undefined)</li></ol><p><strong>代码实例</strong><br>先单独说一下add</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以传入一个可迭代对象作为参数，参数用于初始化这个集合</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'甲'</span><span class="token punctuation">,</span> <span class="token string">'乙'</span><span class="token punctuation">,</span>  <span class="token string">'丙'</span><span class="token punctuation">,</span> <span class="token string">'乙'</span><span class="token punctuation">,</span> <span class="token string">'甲'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//add方法</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210630140148740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>都没什么特别的，<br>需要提一下的就是如果传入多个参数，只有第一个有效<strong>（不仅局限于add，delete，has等也是如此)</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以传入一个可迭代对象作为参数，参数用于构造这个集合</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'甲'</span><span class="token punctuation">,</span> <span class="token string">'乙'</span><span class="token punctuation">,</span>  <span class="token string">'丙'</span><span class="token punctuation">,</span> <span class="token string">'乙'</span><span class="token punctuation">,</span> <span class="token string">'甲'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// console.log(s2);</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// console.log(s2);</span><span class="token comment">//参数 乙 无效</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'甲'</span><span class="token punctuation">,</span><span class="token string">'乙'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'不存在的元素'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'520'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数666无效</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'丙'</span><span class="token punctuation">,</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210630141320394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>运用</strong><br><strong>1.数组去重</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用arr创建一个集合，然后展开得到1，2，3再放进数组</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果<br><img src="https://img-blog.csdnimg.cn/20210630141903251.png" alt="1 2 3"><br><strong>2.求交集</strong><br>这里顺便介绍：</p><h2 id="14-filter"><a href="#14-filter" class="headerlink" title="14.filter"></a>14.filter</h2><p>过滤器，<strong>遍历每个元素</strong>进行筛选<br><strong>代码实例</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//可以传三个参数，</span><span class="token comment">//顾名思义，结合输出结果不难理解</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>key<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是value'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是key'</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是arr'</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是过滤之后的结果'</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组长度是5，函数执行了5次遍历了每个元素，筛选出了大于2元素<br><img src="https://img-blog.csdnimg.cn/20210630144501974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="遍历5次，结果只剩一个3"></p><p>好了我们继续看我们的<strong>求交集</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630151543379.png" alt="1 2"><br><strong>3.求并集</strong><br>这个就没啥说的了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630152022168.png" alt="在这里插入图片描述"><br><strong>4.求补集</strong><br>其实也就和求交集一个意思</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过这里有八十岁老爷爷看了都说牛逼的简化：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630152901249.png" alt="2 3 4"></p><h2 id="15-map对象"><a href="#15-map对象" class="headerlink" title="15.map对象"></a>15.map对象</h2><p>其实就是键值对<br><strong>特性</strong></p><ol><li>又是一个自带iterator接口的</li><li></li></ol><p><strong>属性/方法</strong></p><ol><li>size 长度 </li><li>set 添加元素</li><li>has 查询是否存在</li><li>clear 清空</li><li>get 通过键传入值</li><li>delete 通过键删除元素</li></ol><p><strong>代码实例</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token string">'键233的值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'一个对象'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'键对象的值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'m.get(233):'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'m.get(obj):'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'m.has(obj)'</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'m.size:'</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clear之前:'</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clear之后:'</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630162847473.png" alt="在这里插入图片描述"></p><h2 id="16-class类"><a href="#16-class类" class="headerlink" title="16.class类"></a>16.class类</h2><p>先回顾一下<strong>构造函数实例化对象</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person1</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Person1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I\'m the '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">' DEEP! DARK! FANTASY♂!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> somebody1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person1</span><span class="token punctuation">(</span><span class="token string">'黑暗之王'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>somebody1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630174350744.png" alt="在这里插入图片描述"></p><p><strong>class类实例化对象</strong>（javar狂喜）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">{</span>    <span class="token comment">//构造器</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">',我是不朽的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> somebody2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token string">'玛尔加尼斯'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>somebody2<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210630210315995.png" alt="在这里插入图片描述"><br><strong>static静态</strong><br>不论新旧，都有这样一手操作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coder1</span><span class="token punctuation">{</span>    <span class="token comment">//什么都没有哦</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Coder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//意思是程序员一无所有[bushi</span><span class="token punctuation">}</span>Coder1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'知鑫'</span><span class="token punctuation">;</span>Coder2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'雨溪'</span><span class="token punctuation">;</span><span class="token keyword">let</span> coder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> coder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'红尘作伴，代码潇潇洒洒~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coder1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>coder2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>快快乐乐，昂第佛爱德~</em><br><img src="https://img-blog.csdnimg.cn/20210630212908786.png" alt="两个undefined"><br>通过上述方式添加的成员，只属于构造函数而不属于实例化对象.</p><p>上述写法相当于<br><strong>(static只能在class类里面合法)</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coder3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> name <span class="token operator">=</span> <span class="token string">'日娃'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> coder3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coder3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'无名英雄，程序员:'</span> <span class="token operator">+</span> coder3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>无名英雄的名字当然是undefined啊！</em><br><img src="https://img-blog.csdnimg.cn/20210630213651447.png" alt="undefined"><br><strong>继承</strong><br>又让我们先回顾构造函数如何继承吧<br><em>(JS高级的原型链…说实话我也快忘完了)</em></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Win10</span><span class="token punctuation">(</span><span class="token parameter">info<span class="token punctuation">,</span> bugs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bugs <span class="token operator">=</span> bugs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Win11</span><span class="token punctuation">(</span><span class="token parameter">info<span class="token punctuation">,</span> bugs<span class="token punctuation">,</span> moreBugs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Win10</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>info<span class="token punctuation">,</span>bugs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>moreBugs <span class="token operator">=</span> moreBugs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Win11</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Win10</span><span class="token punctuation">;</span><span class="token class-name">Win11</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Win11<span class="token punctuation">;</span><span class="token comment">//纠正Win11的构造函数 </span><span class="token class-name">Win11</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绿屏了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> newSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Win11</span><span class="token punctuation">(</span><span class="token string">'最后一代？从来没说过'</span><span class="token punctuation">,</span><span class="token string">'挺多'</span><span class="token punctuation">,</span><span class="token string">'更多了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newSystem<span class="token punctuation">)</span><span class="token punctuation">;</span>newSystem<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021063022112453.png" alt="在这里插入图片描述"><br>啥？为啥方法要写到prototype里面而不是直接写到对象里面？（上一节<strong>static静态</strong>才说了</p><p><strong>class继承</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Win10</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">info<span class="token punctuation">,</span>bugs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bugs <span class="token operator">=</span> bugs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Win11</span> <span class="token keyword">extends</span> <span class="token class-name">Win10</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">info<span class="token punctuation">,</span>bugs<span class="token punctuation">,</span>moreBugs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span>bugs<span class="token punctuation">)</span><span class="token punctuation">;</span>        moreBugs <span class="token operator">=</span> moreBugs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绿屏了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Win11</span><span class="token punctuation">(</span><span class="token string">'谁说win10是最后一代了？'</span><span class="token punctuation">,</span><span class="token string">'有bug'</span><span class="token punctuation">,</span><span class="token string">'更多bug!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mySystem<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mySystem:'</span><span class="token punctuation">,</span>mySystem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210701100648888.png" alt="运行结果"><br>虽然看上去和JAVA差不多了，但是实际上还是原型链的封装<br>子类对父类方法的重写也一样，其实只是原型链的知识…</p><h2 id="17-get与set"><a href="#17-get与set" class="headerlink" title="17.get与set"></a>17.get与set</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Coder</span><span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token function">whyWeLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'为了吃饭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">whyWeLive</span><span class="token punctuation">(</span><span class="token parameter">dream</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'为了理想'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> us <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ans <span class="token operator">=</span> us<span class="token punctuation">.</span>whyWeLive<span class="token punctuation">;</span> <span class="token comment">//访问，触发get部分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>us<span class="token punctuation">.</span>whyWeLive <span class="token operator">=</span> <span class="token string">'为更多的人创造更好的世界'</span><span class="token punctuation">;</span><span class="token comment">//修改，触发set部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意whyWeLive是属性不是方法，<br>get修饰是指，在该属性被访问的时候，调用后面的函数<br>set修饰是指，在该属性被修改的时候，调用后面的函数</p><p><img src="https://img-blog.csdnimg.cn/20210701103321673.png" alt="在这里插入图片描述"><br><em>人生来不是为了吃饭，我们还有理想</em></p><h2 id="18-数值扩展"><a href="#18-数值扩展" class="headerlink" title="18.数值扩展"></a>18.数值扩展</h2><p>感觉这部分也没什么好说的，了解一下就行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.误差（最小精度）</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0.1 + 0.2 === 0.3'</span><span class="token punctuation">,</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//EPSILON是一个极其小的数字</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'equal(0.1 + 0.2, 0.3):'</span><span class="token punctuation">,</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.更多的进制</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0b10100</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0o24</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'十进制'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'二进制'</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'八进制'</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'十六进制'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.更多方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Number.isNaN(100 / 0):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Number.isFinite(100 / 0):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Number.isInteger(2.3):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Number.parseInt(\'2333ababa66\'):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'2333ababa66'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Number.parseFloat(\'1.7321abcd\'):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'1.7321abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Math.trunc(4.33):'</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">4.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Number.parseInt(\'4.33\'):'</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">4.33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Math.sign(0):'</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Math.sign(-666):'</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>唯一需要注意的是这里的equal方法是用EPSILON属性实现的，不是JS自带的方法<br><img src="https://img-blog.csdnimg.cn/2021070115125938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NlcmlvX2d1Z3VndQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="19-Object方法扩展"><a href="#19-Object方法扩展" class="headerlink" title="19.Object方法扩展"></a>19.Object方法扩展</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.Object.is 判断两个值是否完全相等</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Object.is(NaN, NaN)'</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'NaN === NaN'</span><span class="token punctuation">,</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.Object.assign 合并对象</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Object.assign(a,b)'</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3.Object.setPrototypeOf 设置原型对象</span><span class="token comment">//4.Object.getPrototypeof 获取原型对象</span><span class="token keyword">let</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token operator">:</span> <span class="token string">'C'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token constant">D</span> <span class="token operator">=</span><span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Object.setPrototypeOf(C, D):'</span> <span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Object.getPrototypeOf(C):'</span> <span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210701175626457.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210705121429291.png" alt="在这里插入图片描述"></p><h2 id="20-module模块化"><a href="#20-module模块化" class="headerlink" title="20.module模块化"></a>20.module模块化</h2><p><em><strong>把丑陋的代码实现包起来，只留出接口给外面看</strong><br>（比如写一个冒泡排序，接口名字叫做快速排序，别人调用的时候就会觉得————好耶）</em></p><p><em>而且模块之间的内容是互不影响的，避免了污染</em></p><p>首先在同一目录下创建一个moduleTest.js文件，内容是</p><p><strong>其中export修饰的内容会被暴露</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token string">'2021/07/05'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myRecentLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'还在进行因为疫情被推迟的军训..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我想躺着写代码啊！！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我想吃肉！！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后另一边，我们这样写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">&gt;</span>    <span class="token comment">//模块化必须在服务器上测试</span>    <span class="token comment">//（本地折腾半天没有输出...）</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>date<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./moduleTest.js"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m <span class="token keyword">from</span> <span class="token string">'./moduleTest.js'</span><span class="token punctuation">;</span>    <span class="token comment">//这个语句很像SQL，语义化也很强</span>    <span class="token comment">//*是啥？参考一下css的*就知道了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">myRecentLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上图运行结果（<strong>一定要在服务器上运行啊！不然没有反应的</strong>）<br><img src="https://img-blog.csdnimg.cn/20210705130511467.png" alt="在这里插入图片描述"><br><strong>注意事项</strong><br>假如引入的两个模块中有重名内容，<br>比如<br><img src="https://img-blog.csdnimg.cn/20210705214428333.png" alt="在这里插入图片描述"><br>那么我们可以使用关键字as操作一手：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>date<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./moduleTest.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>date <span class="token keyword">as</span> date2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./moduleTest2.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"date:"</span><span class="token punctuation">,</span>date<span class="token punctuation">,</span><span class="token string">"\ndate2:"</span><span class="token punctuation">,</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（记得要在服务器上运行啊！！！）</strong><br><img src="https://img-blog.csdnimg.cn/2021070521470085.png" alt="在这里插入图片描述"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>ES6大概就这样结束了，不过我还是想写下这多余的话</p><p>ES6更新了很多东西，这篇笔记是我一边学习一遍写代码做记录产生的，也是第一次接触到其中一些内容，所以难免有漏掉部分知识点，和理解分析不到位的情况，希望大家包涵谅解</p><p>后面如果有机会的话，我也会继续做ES相关的内容</p><p>祝大家能够不断进步</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="/2023/02/20/algorithm-heap/"/>
      <url>/2023/02/20/algorithm-heap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于太久没有接触数据结构算法相关的知识了，所以以至于连堆的基本概念都忘了，在学习之后才发觉是学过的内容——所以我做下这篇笔记，一是为了自己复习，二是希望帮助到阅读这篇笔记的人</p><h2 id="堆的定义"><a href="#堆的定义" class="headerlink" title="堆的定义"></a>堆的定义</h2><p>说到堆，一般情况下是指的二叉堆，这里介绍二叉堆的概念，n叉堆以此类推，二项堆、斐波拉契堆、配对堆、树堆等需要另行学习</p><blockquote><p>n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆</p><p><strong>k<sub>i</sub>  &lt;=  k<sub>2i</sub>，k<sub>i</sub>  &lt;=  k<sub>2i+1</sub></strong><br><strong>或者</strong><br><strong>k<sub>i</sub>  &gt;=  k<sub>2i</sub>，k<sub>i</sub>  &gt;=  k<sub>2i+1</sub></strong></p><p>其中，i = 1,2,3,4…n/2</p></blockquote><p>一般情况，我们把二叉堆的逻辑结构看做是一棵<strong>特殊的完全二叉树</strong>，其特殊之处就是，</p><p>每个节点的子节点都大于其父节点（<strong>小根堆/小顶堆/最小堆</strong>）；</p><p>或者，每个节点的字节点都小于其父节点（<strong>大根堆/大顶堆/最大堆</strong>）</p><blockquote><p>至于为什么是要是<strong>完全</strong>二叉树，<br>一是因为要贴合定义，<br>二是因为堆一般用数组实现，<strong>完全</strong>则保证有效下标是连续的</p><p>当然了，只要符合定义都能是堆，不过看成完全二叉树会比较容易理解</p></blockquote><h2 id="堆的建立"><a href="#堆的建立" class="headerlink" title="堆的建立"></a>堆的建立</h2><p>我们手写实现一般是用一个数组来模拟树状结构</p><p>所以只需要开一个数组就可以了，至于使数据符合定义的工作先不急</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int size = 1e5 + 10;int head[size];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>下标一般从1开始，因为这样一来下标为x的节点的左孩子下标为2x，右孩子下标则为2x+1</p></blockquote><blockquote><p>当然如果从0开始的话，则分别是2x+1和2x+2</p></blockquote><p>在讨论如何进行下一步前，我们先要了解堆的常用操作，就像是栈有push和pop一般，堆的常见操作是up和down——它们都是（递归地）操作根节的</p><h2 id="up操作"><a href="#up操作" class="headerlink" title="up操作"></a>up操作</h2><p>此处以小根堆为例，大根堆则需要参考down操作类比</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void up (int index) {  while (index / 2 &amp;&amp; heap[index] &lt; heap[index / 2]) {        swap(heap[index], heap[index / 2]);        index /= 2;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该还是比较容易理解</p><h2 id="down操作"><a href="#down操作" class="headerlink" title="down操作"></a>down操作</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void down (int index) {    int temp = index;    if (index * 2 &lt;= heapSize &amp;&amp; heap[temp] &gt; heap[index * 2])        temp = index * 2;     if (index * 2 + 1 &lt;= heapSize &amp;&amp; heap[temp] &gt; heap[index * 2 + 1])        temp = index * 2 + 1;        if (temp != index) {        swap (heap[temp], heap[index]);        down (temp);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果触发了第一个if，那么第二个if的意思就是，如果<strong>左孩子比右孩子大</strong>——这里就完成了左右孩子中选择较大的一个</p></blockquote><p>down操作这里需要注意，temp和index不能随意混用，如果混用的话，在第一个if处可能不会有太大影响，但是这会给第二个if造成极大的干扰</p><h2 id="组合操作"><a href="#组合操作" class="headerlink" title="组合操作"></a>组合操作</h2><h3 id="插入一个数"><a href="#插入一个数" class="headerlink" title="插入一个数"></a>插入一个数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">heap[++ size] = x;up(size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="求集合最小值"><a href="#求集合最小值" class="headerlink" title="求集合最小值"></a>求集合最小值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">heap[1];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除最小值"><a href="#删除最小值" class="headerlink" title="删除最小值"></a>删除最小值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">heap[1] = heap[size];size --;down(1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除任意值"><a href="#删除任意值" class="headerlink" title="删除任意值"></a>删除任意值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">heap[k] = heap[size];size --;down(1);up(k);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改任意值"><a href="#修改任意值" class="headerlink" title="修改任意值"></a>修改任意值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">heap[k] = x;down(k);up(k);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>实际上就是建立一个堆的过程</p><p>以小根堆为例说明选出最小的前m个值的过程，下面是完整代码</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N = 1e6 + 10;int n, m, heapSize;int heap[N];void up (int index) {    while (index / 2 &amp;&amp; heap[index] &lt; heap[index / 2]) {        swap(heap[index], heap[index / 2]);        index /= 2;    }}void down (int index) {    int temp = index;    if (index * 2 &lt;= heapSize &amp;&amp; heap[temp] &gt; heap[index * 2])        temp = index * 2;    if (index * 2 + 1 &lt;= heapSize &amp;&amp; heap[temp] &gt; heap[index * 2 + 1])        temp = index * 2 + 1;    if (temp != index) {        swap (heap[temp], heap[index]);        down (temp);    }}int main () {    cin &gt;&gt; n &gt;&gt; m;    heapSize = n;    for(int i = 1; i &lt;= n; i ++)        cin &gt;&gt; heap[i];    for(int i = n / 2; i; i --)         down (i);    while (m --) {        cout &lt;&lt;  heap[1] &lt;&lt; " ";        heap[1] = heap[heapSize];        heapSize --;        down (1);    }     return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 专业基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/02/20/algorithm-kmp/"/>
      <url>/2023/02/20/algorithm-kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>KMP也是困扰我许久的算法了，道理感觉能懂，但是一到代码就难以理解</p><p>但是所幸我现在终于是搞懂了</p><p>记一些笔记，希望帮到未来的自己和更多学习的人</p><h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><p><strong>主串</strong><br>也叫匹配串、模式串，相当于是要进行搜索的范围</p><p><strong>子串</strong><br>主串中包含的连续的字符</p><p><strong>模板串</strong><br>需要搜索的目标，如果能够在主串中找到与自身相同的子串即为匹配成功</p><p><strong>朴素匹配算法</strong><br>也叫幼稚匹配、简单匹配算法，就是暴力</p><h2 id="KMP思路"><a href="#KMP思路" class="headerlink" title="KMP思路"></a>KMP思路</h2><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa05168427385788add0a9e4dfd35857cd02bd295f1049f2f2f877d4e/0.png" alt="主串和模板串"></p><p>比如我们要在如图所示的主串中找到该模板串，</p><p>请先不要以计算机的思维去想如何实现，我们<strong>先以人类的思维入手</strong>——</p><p>我们总是会先找以g开头的部分，而不是一个一个去比对：</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa05168427385788add0a9e4da98fea21485ec81d455393c4335f5823/0.png" alt="人类思维匹配示意"></p><p>如图，我们大概能在进行第三次匹配时成功</p><p>总结一下就是：</p><blockquote><p>顺序遍历主串，不回溯</p><p>移动模板串并<strong>跳过</strong>不必要的回溯</p><p>（这里的移动实际上就是遍历，移动只是一个利于结合图文进一步理解的说法——毕竟一个字符串能怎么动，还能在内存里面运动起来不成？）</p></blockquote><h2 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h2><p>既然要跳过不必要的回溯，那么该往哪里跳就成了我们要考虑的问题，先来看下面这个例子</p><p><img src="https://p.qlogo.cn/hy_personal/3e28f14aa05168427385788add0a9e4d0b7cc71b88049c02ddceb9c91806c67c/0.png" alt="KMP思路说明"></p><p>next数组是要记录“平移的距离”，其实也就是记录出现不匹配时，p指针应该回溯到的位置</p><p>那么该如何去求这个数组呢？</p><p>其实就是要记录（结合图片把下面这句话好好捋一捋）</p><blockquote><p> 出现不匹配的元素<strong>前面</strong>的 字符串中的 相同的<strong>最长</strong>的 <strong>前缀</strong> 和 <strong>后缀</strong> </p></blockquote><p>如果理解了这句话，那么也不难发现求next数组<strong>只需要观察模板串</strong></p><p><strong>举个例子</strong></p><p>这里我们习惯是下标从1开始，这样会有很多好处——我们后面再提</p><p>而且此处next[i]代表，<strong>当第i+1个元素不匹配时指针p应该回溯的位置</strong>——所以下标为0是有意义的</p><table><thead><tr><th>元素</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th></tr></thead><tbody><tr><td><strong>下标 i</strong></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>next[i]</strong></td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><p>手动求取的过程如下：</p><p>注意前缀和后缀是串的真子集</p><table><thead><tr><th>下标i</th><th>讨论的串</th><th>最长相同前后缀</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>不讨论</td><td>i=1时，若回溯，则一定是到0</td></tr><tr><td>2</td><td>ab</td><td>无</td><td>不匹配则只能重新开始，回溯到0</td></tr><tr><td>3</td><td>abc</td><td>无</td><td>同上</td></tr><tr><td>4</td><td>abca</td><td>a</td><td>回溯到第一个a，也就是i = 1这里</td></tr><tr><td>5</td><td>abcab</td><td>ab</td><td>回溯到第第一个b，也就是i = 2这里</td></tr></tbody></table><p>其实对于i=5的情况来说已经不用讨论了，因为到了这一步已经是完全匹配上了，但是我们还是把它记录下来</p><p><strong>代码实现</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int N = 1e5 + 10;int next[N];char t[N];// 模板串// 数组下标均从1开始，但根据上文可知next[1]是默认为0的不用求，所以i从2开始// 而且从2开始相较于从1开始会省去不少麻烦// 而j从0开始是为了一种试探性的比较for (int i = 2, j = 0; i &lt;= n; i ++) {    // j + 1是试探性地比较，不匹配则递归回溯直到 匹配或者j为0while (j &amp;&amp; t[i] != t[j + 1])     {        j = next[j];    }    // 跳出while的原因有两种，如果是因为匹配而跳出    // 那么就让试探性的j + 1真正地进一步    if(t[i] == t[j + 1])     {        j ++;    }    // 可以自己推导一下，在经历上述步骤后，    // j已经代表了此时讨论的串中最长相同前后缀的长度    next[i] = j;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始匹配"><a href="#开始匹配" class="headerlink" title="开始匹配"></a>开始匹配</h2><p>在求完next数组后</p><p>就要开始进行匹配了，匹配的思路 和 求next异曲同工</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// i是主串的下标，j+1是模板串下标，j仍可以用来试探next数组for (int i = 1, j = 0; i &lt;= m; i ++) {    // S是主串，P是模板串    while (j &amp;&amp; S[i] != P[j + 1]) {        j = next[j];    }    if (S[i] == P[j + 1]) {        j ++;    }    if (j == n) {        cout &lt;&lt; i - n &lt;&lt; " ";        // 我们如果要找出主串中所有的模板串，那么就进行下一步，回溯        j = next[j];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;const int N = 1e5 + 10;const int M = 1e6 + 10;int n, m;char P[N], S[M];int ne[N];int main() {    cin &gt;&gt; n &gt;&gt; P + 1 &gt;&gt; m &gt;&gt; S + 1;    for (int i = 2, j = 0; i &lt;= n; i ++) {        while (j &amp;&amp; P[i] != P[j + 1]) {            j = next[j];        }        if (P[i] == P[j + 1]) {            j ++;        }        next[i] = j;    }    for (int i = 1, j = 0; i &lt;= m; i ++) {        while (j &amp;&amp; S[i] != P[j + 1]) {            j = next[j];        }        if (S[i] == P[j + 1]) {            j ++;        }        if (j == n) {            cout &lt;&lt; i - n &lt;&lt; " ";            j = next[j];        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 专业基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
